
MAX31865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c90  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  08006da0  08006da0  00007da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800752c  0800752c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800752c  0800752c  0000852c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007534  08007534  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007534  08007534  00008534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007538  08007538  00008538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800753c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200001d4  08007710  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08007710  00009514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009aa1  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8f  00000000  00000000  00012c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00014a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000769  00000000  00000000  000153f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185ce  00000000  00000000  00015b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000beea  00000000  00000000  0002e12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008675b  00000000  00000000  0003a019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0774  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003898  00000000  00000000  000c07b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c4050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d88 	.word	0x08006d88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006d88 	.word	0x08006d88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <MX_GPIO_Init+0xb4>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a26      	ldr	r2, [pc, #152]	@ (8001110 <MX_GPIO_Init+0xb4>)
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <MX_GPIO_Init+0xb4>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001088:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <MX_GPIO_Init+0xb4>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a20      	ldr	r2, [pc, #128]	@ (8001110 <MX_GPIO_Init+0xb4>)
 800108e:	f043 0320 	orr.w	r3, r3, #32
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <MX_GPIO_Init+0xb4>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0320 	and.w	r3, r3, #32
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <MX_GPIO_Init+0xb4>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001110 <MX_GPIO_Init+0xb4>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <MX_GPIO_Init+0xb4>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010be:	4815      	ldr	r0, [pc, #84]	@ (8001114 <MX_GPIO_Init+0xb8>)
 80010c0:	f000 ff7a 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX31865_CS_GPIO_Port, MAX31865_CS_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2110      	movs	r1, #16
 80010c8:	4813      	ldr	r0, [pc, #76]	@ (8001118 <MX_GPIO_Init+0xbc>)
 80010ca:	f000 ff75 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2302      	movs	r3, #2
 80010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	480b      	ldr	r0, [pc, #44]	@ (8001114 <MX_GPIO_Init+0xb8>)
 80010e8:	f000 fde2 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX31865_CS_Pin */
  GPIO_InitStruct.Pin = MAX31865_CS_Pin;
 80010ec:	2310      	movs	r3, #16
 80010ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX31865_CS_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_GPIO_Init+0xbc>)
 8001104:	f000 fdd4 	bl	8001cb0 <HAL_GPIO_Init>

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	40011000 	.word	0x40011000
 8001118:	40010800 	.word	0x40010800

0800111c <stm32_spi_write_read>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**
 * @brief STM32 HAL SPI Write/Read function for MAX31865
 */
max31865_status_t stm32_spi_write_read(MAX31865_Handle_t *hmax, uint8_t *tx_data, uint8_t *rx_data, uint16_t size) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af02      	add	r7, sp, #8
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef hal_status;

    if (size == 1) {
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d11b      	bne.n	8001168 <stm32_spi_write_read+0x4c>
        // Write only (register address)
        hal_status = HAL_SPI_Transmit(&hspi1, tx_data, 1, HAL_MAX_DELAY);
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2201      	movs	r2, #1
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	4816      	ldr	r0, [pc, #88]	@ (8001194 <stm32_spi_write_read+0x78>)
 800113a:	f001 fbe9 	bl	8002910 <HAL_SPI_Transmit>
 800113e:	4603      	mov	r3, r0
 8001140:	75fb      	strb	r3, [r7, #23]
        if (hal_status != HAL_OK) return MAX31865_TIMEOUT;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <stm32_spi_write_read+0x30>
 8001148:	2302      	movs	r3, #2
 800114a:	e01e      	b.n	800118a <stm32_spi_write_read+0x6e>

        // Read response
        hal_status = HAL_SPI_Receive(&hspi1, rx_data, 1, HAL_MAX_DELAY);
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	2201      	movs	r2, #1
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	480f      	ldr	r0, [pc, #60]	@ (8001194 <stm32_spi_write_read+0x78>)
 8001156:	f001 fd1f 	bl	8002b98 <HAL_SPI_Receive>
 800115a:	4603      	mov	r3, r0
 800115c:	75fb      	strb	r3, [r7, #23]
        if (hal_status != HAL_OK) return MAX31865_TIMEOUT;
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d011      	beq.n	8001188 <stm32_spi_write_read+0x6c>
 8001164:	2302      	movs	r3, #2
 8001166:	e010      	b.n	800118a <stm32_spi_write_read+0x6e>
    } else {
        // TransmitReceive for multi-byte operations
        hal_status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, size, HAL_MAX_DELAY);
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	f04f 32ff 	mov.w	r2, #4294967295
 800116e:	9200      	str	r2, [sp, #0]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <stm32_spi_write_read+0x78>)
 8001176:	f001 fe28 	bl	8002dca <HAL_SPI_TransmitReceive>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
        if (hal_status != HAL_OK) return MAX31865_TIMEOUT;
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <stm32_spi_write_read+0x6c>
 8001184:	2302      	movs	r3, #2
 8001186:	e000      	b.n	800118a <stm32_spi_write_read+0x6e>
    }

    return MAX31865_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000220 	.word	0x20000220

08001198 <stm32_cs_low>:

/**
 * @brief Set CS pin low
 */
void stm32_cs_low(MAX31865_Handle_t *hmax) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef*)hmax->cs_port, hmax->cs_pin, GPIO_PIN_RESET);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6958      	ldr	r0, [r3, #20]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	f000 ff03 	bl	8001fb8 <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <stm32_cs_high>:

/**
 * @brief Set CS pin high
 */
void stm32_cs_high(MAX31865_Handle_t *hmax) {
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef*)hmax->cs_port, hmax->cs_pin, GPIO_PIN_SET);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6958      	ldr	r0, [r3, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	2201      	movs	r2, #1
 80011ce:	4619      	mov	r1, r3
 80011d0:	f000 fef2 	bl	8001fb8 <HAL_GPIO_WritePin>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <stm32_delay_ms>:

/**
 * @brief Delay function in milliseconds
 */
void stm32_delay_ms(uint32_t ms) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fc5b 	bl	8001aa0 <HAL_Delay>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <_write>:

/**
 * @brief Redirect printf to UART
 */
int _write(int file, char *ptr, int len) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	b29a      	uxth	r2, r3
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	4804      	ldr	r0, [pc, #16]	@ (800121c <_write+0x28>)
 800120c:	f002 f8e1 	bl	80033d2 <HAL_UART_Transmit>
    return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000027c 	.word	0x2000027c

08001220 <MAX31865_Test>:

/**
 * @brief Test MAX31865 functionality
 */
void MAX31865_Test(void) {
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b08e      	sub	sp, #56	@ 0x38
 8001224:	af04      	add	r7, sp, #16
    max31865_status_t status;
    float temperature, resistance;
    uint16_t rtd_raw;
    uint8_t fault_status;

    printf("\r\n=== MAX31865 RTD Temperature Sensor Test ===\r\n");
 8001226:	4876      	ldr	r0, [pc, #472]	@ (8001400 <MAX31865_Test+0x1e0>)
 8001228:	f003 fda8 	bl	8004d7c <puts>

    /* Initialize Platform Interface structure */
    max31865_platform_t platform = {
 800122c:	4b75      	ldr	r3, [pc, #468]	@ (8001404 <MAX31865_Test+0x1e4>)
 800122e:	463c      	mov	r4, r7
 8001230:	461d      	mov	r5, r3
 8001232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	6023      	str	r3, [r4, #0]
        .delay_ms = stm32_delay_ms,
        .platform_data = NULL
    };

    /* Initialize MAX31865 */
    status = MAX31865_Init(&hmax31865, &platform, GPIOA, GPIO_PIN_4,
 800123a:	4639      	mov	r1, r7
 800123c:	4b72      	ldr	r3, [pc, #456]	@ (8001408 <MAX31865_Test+0x1e8>)
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	4b72      	ldr	r3, [pc, #456]	@ (800140c <MAX31865_Test+0x1ec>)
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2301      	movs	r3, #1
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2310      	movs	r3, #16
 800124a:	4a71      	ldr	r2, [pc, #452]	@ (8001410 <MAX31865_Test+0x1f0>)
 800124c:	4871      	ldr	r0, [pc, #452]	@ (8001414 <MAX31865_Test+0x1f4>)
 800124e:	f002 faa6 	bl	800379e <MAX31865_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                          MAX31865_3WIRE, RREF_VALUE, RNOMINAL_VALUE);

    if (status != MAX31865_OK) {
 8001258:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <MAX31865_Test+0x4e>
        printf("ERROR: MAX31865 initialization failed! Status: %d\r\n", status);
 8001260:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001264:	4619      	mov	r1, r3
 8001266:	486c      	ldr	r0, [pc, #432]	@ (8001418 <MAX31865_Test+0x1f8>)
 8001268:	f003 fd20 	bl	8004cac <iprintf>
 800126c:	e0bf      	b.n	80013ee <MAX31865_Test+0x1ce>
        return;
    }

    printf("MAX31865 initialized successfully!\r\n");
 800126e:	486b      	ldr	r0, [pc, #428]	@ (800141c <MAX31865_Test+0x1fc>)
 8001270:	f003 fd84 	bl	8004d7c <puts>
    printf("Configuration: 3-wire, RREF=%.1f ohm, RNOMINAL=%.1f ohm\r\n",
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b69      	ldr	r3, [pc, #420]	@ (8001420 <MAX31865_Test+0x200>)
 800127a:	e9cd 2300 	strd	r2, r3, [sp]
 800127e:	a35e      	add	r3, pc, #376	@ (adr r3, 80013f8 <MAX31865_Test+0x1d8>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	4867      	ldr	r0, [pc, #412]	@ (8001424 <MAX31865_Test+0x204>)
 8001286:	f003 fd11 	bl	8004cac <iprintf>
           RREF_VALUE, RNOMINAL_VALUE);

    /* Set 60Hz filter */
    MAX31865_SetFilter(&hmax31865, MAX31865_FILTER_60HZ);
 800128a:	2100      	movs	r1, #0
 800128c:	4861      	ldr	r0, [pc, #388]	@ (8001414 <MAX31865_Test+0x1f4>)
 800128e:	f002 fc47 	bl	8003b20 <MAX31865_SetFilter>
    printf("Filter set to 60Hz\r\n\r\n");
 8001292:	4865      	ldr	r0, [pc, #404]	@ (8001428 <MAX31865_Test+0x208>)
 8001294:	f003 fd72 	bl	8004d7c <puts>

    /* Main measurement loop */
    for (int i = 0; i < 10; i++) {
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
 800129c:	e0a0      	b.n	80013e0 <MAX31865_Test+0x1c0>
        printf("--- Measurement %d ---\r\n", i + 1);
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	3301      	adds	r3, #1
 80012a2:	4619      	mov	r1, r3
 80012a4:	4861      	ldr	r0, [pc, #388]	@ (800142c <MAX31865_Test+0x20c>)
 80012a6:	f003 fd01 	bl	8004cac <iprintf>

        /* Read raw RTD value */
        status = MAX31865_ReadRTD(&hmax31865, &rtd_raw);
 80012aa:	f107 0316 	add.w	r3, r7, #22
 80012ae:	4619      	mov	r1, r3
 80012b0:	4858      	ldr	r0, [pc, #352]	@ (8001414 <MAX31865_Test+0x1f4>)
 80012b2:	f002 fd46 	bl	8003d42 <MAX31865_ReadRTD>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status == MAX31865_OK) {
 80012bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d107      	bne.n	80012d4 <MAX31865_Test+0xb4>
            printf("RTD Raw Value: %u (0x%04X)\r\n", rtd_raw, rtd_raw);
 80012c4:	8afb      	ldrh	r3, [r7, #22]
 80012c6:	4619      	mov	r1, r3
 80012c8:	8afb      	ldrh	r3, [r7, #22]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4858      	ldr	r0, [pc, #352]	@ (8001430 <MAX31865_Test+0x210>)
 80012ce:	f003 fced 	bl	8004cac <iprintf>
 80012d2:	e014      	b.n	80012fe <MAX31865_Test+0xde>
        } else if (status == MAX31865_FAULT) {
 80012d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d105      	bne.n	80012e8 <MAX31865_Test+0xc8>
            printf("RTD Fault detected! Raw: %u\r\n", rtd_raw);
 80012dc:	8afb      	ldrh	r3, [r7, #22]
 80012de:	4619      	mov	r1, r3
 80012e0:	4854      	ldr	r0, [pc, #336]	@ (8001434 <MAX31865_Test+0x214>)
 80012e2:	f003 fce3 	bl	8004cac <iprintf>
 80012e6:	e00a      	b.n	80012fe <MAX31865_Test+0xde>
        } else {
            printf("ERROR: Failed to read RTD! Status: %d\r\n", status);
 80012e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012ec:	4619      	mov	r1, r3
 80012ee:	4852      	ldr	r0, [pc, #328]	@ (8001438 <MAX31865_Test+0x218>)
 80012f0:	f003 fcdc 	bl	8004cac <iprintf>
            HAL_Delay(1000);
 80012f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012f8:	f000 fbd2 	bl	8001aa0 <HAL_Delay>
            continue;
 80012fc:	e06d      	b.n	80013da <MAX31865_Test+0x1ba>
        }

        /* Read resistance */
        status = MAX31865_ReadResistance(&hmax31865, &resistance);
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	4619      	mov	r1, r3
 8001304:	4843      	ldr	r0, [pc, #268]	@ (8001414 <MAX31865_Test+0x1f4>)
 8001306:	f002 fde3 	bl	8003ed0 <MAX31865_ReadResistance>
 800130a:	4603      	mov	r3, r0
 800130c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status == MAX31865_OK) {
 8001310:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <MAX31865_Test+0x10c>
            printf("Resistance: %.3f ohm\r\n", resistance);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f884 	bl	8000428 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4845      	ldr	r0, [pc, #276]	@ (800143c <MAX31865_Test+0x21c>)
 8001326:	f003 fcc1 	bl	8004cac <iprintf>
 800132a:	e005      	b.n	8001338 <MAX31865_Test+0x118>
        } else {
            printf("ERROR: Failed to read resistance! Status: %d\r\n", status);
 800132c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001330:	4619      	mov	r1, r3
 8001332:	4843      	ldr	r0, [pc, #268]	@ (8001440 <MAX31865_Test+0x220>)
 8001334:	f003 fcba 	bl	8004cac <iprintf>
        }

        /* Read temperature */
        status = MAX31865_ReadTemperature(&hmax31865, &temperature);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4835      	ldr	r0, [pc, #212]	@ (8001414 <MAX31865_Test+0x1f4>)
 8001340:	f002 fd90 	bl	8003e64 <MAX31865_ReadTemperature>
 8001344:	4603      	mov	r3, r0
 8001346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status == MAX31865_OK) {
 800134a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <MAX31865_Test+0x146>
            printf("Temperature: %.2f C\r\n", temperature);
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f867 	bl	8000428 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4839      	ldr	r0, [pc, #228]	@ (8001444 <MAX31865_Test+0x224>)
 8001360:	f003 fca4 	bl	8004cac <iprintf>
 8001364:	e005      	b.n	8001372 <MAX31865_Test+0x152>
        } else {
            printf("ERROR: Failed to read temperature! Status: %d\r\n", status);
 8001366:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800136a:	4619      	mov	r1, r3
 800136c:	4836      	ldr	r0, [pc, #216]	@ (8001448 <MAX31865_Test+0x228>)
 800136e:	f003 fc9d 	bl	8004cac <iprintf>
        }

        /* Check for faults */
        status = MAX31865_ReadFault(&hmax31865, &fault_status);
 8001372:	f107 0315 	add.w	r3, r7, #21
 8001376:	4619      	mov	r1, r3
 8001378:	4826      	ldr	r0, [pc, #152]	@ (8001414 <MAX31865_Test+0x1f4>)
 800137a:	f002 fd5c 	bl	8003e36 <MAX31865_ReadFault>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status == MAX31865_OK) {
 8001384:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001388:	2b00      	cmp	r3, #0
 800138a:	d119      	bne.n	80013c0 <MAX31865_Test+0x1a0>
            if (fault_status != 0) {
 800138c:	7d7b      	ldrb	r3, [r7, #21]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d012      	beq.n	80013b8 <MAX31865_Test+0x198>
                printf("FAULT STATUS: 0x%02X - %s\r\n",
 8001392:	7d7b      	ldrb	r3, [r7, #21]
 8001394:	461c      	mov	r4, r3
 8001396:	7d7b      	ldrb	r3, [r7, #21]
 8001398:	4618      	mov	r0, r3
 800139a:	f002 feb3 	bl	8004104 <MAX31865_GetFaultString>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4621      	mov	r1, r4
 80013a4:	4829      	ldr	r0, [pc, #164]	@ (800144c <MAX31865_Test+0x22c>)
 80013a6:	f003 fc81 	bl	8004cac <iprintf>
                       fault_status, MAX31865_GetFaultString(fault_status));

                /* Clear faults */
                MAX31865_ClearFault(&hmax31865);
 80013aa:	481a      	ldr	r0, [pc, #104]	@ (8001414 <MAX31865_Test+0x1f4>)
 80013ac:	f002 fc57 	bl	8003c5e <MAX31865_ClearFault>
                printf("Faults cleared.\r\n");
 80013b0:	4827      	ldr	r0, [pc, #156]	@ (8001450 <MAX31865_Test+0x230>)
 80013b2:	f003 fce3 	bl	8004d7c <puts>
 80013b6:	e009      	b.n	80013cc <MAX31865_Test+0x1ac>
            } else {
                printf("No faults detected.\r\n");
 80013b8:	4826      	ldr	r0, [pc, #152]	@ (8001454 <MAX31865_Test+0x234>)
 80013ba:	f003 fcdf 	bl	8004d7c <puts>
 80013be:	e005      	b.n	80013cc <MAX31865_Test+0x1ac>
            }
        } else {
            printf("ERROR: Failed to read fault status! Status: %d\r\n", status);
 80013c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013c4:	4619      	mov	r1, r3
 80013c6:	4824      	ldr	r0, [pc, #144]	@ (8001458 <MAX31865_Test+0x238>)
 80013c8:	f003 fc70 	bl	8004cac <iprintf>
        }

        printf("\r\n");
 80013cc:	4823      	ldr	r0, [pc, #140]	@ (800145c <MAX31865_Test+0x23c>)
 80013ce:	f003 fcd5 	bl	8004d7c <puts>
        HAL_Delay(2000); // Wait 2 seconds between measurements
 80013d2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013d6:	f000 fb63 	bl	8001aa0 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	3301      	adds	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	2b09      	cmp	r3, #9
 80013e4:	f77f af5b 	ble.w	800129e <MAX31865_Test+0x7e>
    }

    printf("=== Test Complete ===\r\n\r\n");
 80013e8:	481d      	ldr	r0, [pc, #116]	@ (8001460 <MAX31865_Test+0x240>)
 80013ea:	f003 fcc7 	bl	8004d7c <puts>
}
 80013ee:	3728      	adds	r7, #40	@ 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bdb0      	pop	{r4, r5, r7, pc}
 80013f4:	f3af 8000 	nop.w
 80013f8:	00000000 	.word	0x00000000
 80013fc:	407ae000 	.word	0x407ae000
 8001400:	08006da0 	.word	0x08006da0
 8001404:	0800702c 	.word	0x0800702c
 8001408:	42c80000 	.word	0x42c80000
 800140c:	43d70000 	.word	0x43d70000
 8001410:	40010800 	.word	0x40010800
 8001414:	200001f0 	.word	0x200001f0
 8001418:	08006dd0 	.word	0x08006dd0
 800141c:	08006e04 	.word	0x08006e04
 8001420:	40590000 	.word	0x40590000
 8001424:	08006e28 	.word	0x08006e28
 8001428:	08006e64 	.word	0x08006e64
 800142c:	08006e7c 	.word	0x08006e7c
 8001430:	08006e98 	.word	0x08006e98
 8001434:	08006eb8 	.word	0x08006eb8
 8001438:	08006ed8 	.word	0x08006ed8
 800143c:	08006f00 	.word	0x08006f00
 8001440:	08006f18 	.word	0x08006f18
 8001444:	08006f48 	.word	0x08006f48
 8001448:	08006f60 	.word	0x08006f60
 800144c:	08006f90 	.word	0x08006f90
 8001450:	08006fac 	.word	0x08006fac
 8001454:	08006fc0 	.word	0x08006fc0
 8001458:	08006fd8 	.word	0x08006fd8
 800145c:	0800700c 	.word	0x0800700c
 8001460:	08007010 	.word	0x08007010

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146a:	f000 fab7 	bl	80019dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146e:	f000 f845 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001472:	f7ff fdf3 	bl	800105c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001476:	f000 fa15 	bl	80018a4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800147a:	f000 f889 	bl	8001590 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n\r\n=== STM32F103C8T6 MAX31865 Test ===\r\n");
 800147e:	4817      	ldr	r0, [pc, #92]	@ (80014dc <main+0x78>)
 8001480:	f003 fc7c 	bl	8004d7c <puts>
  printf("System Clock: %lu Hz\r\n", HAL_RCC_GetHCLKFreq());
 8001484:	f001 f970 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8001488:	4603      	mov	r3, r0
 800148a:	4619      	mov	r1, r3
 800148c:	4814      	ldr	r0, [pc, #80]	@ (80014e0 <main+0x7c>)
 800148e:	f003 fc0d 	bl	8004cac <iprintf>
  printf("Compiled: %s %s\r\n\r\n", __DATE__, __TIME__);
 8001492:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <main+0x80>)
 8001494:	4914      	ldr	r1, [pc, #80]	@ (80014e8 <main+0x84>)
 8001496:	4815      	ldr	r0, [pc, #84]	@ (80014ec <main+0x88>)
 8001498:	f003 fc08 	bl	8004cac <iprintf>

  /* Run MAX31865 test */
  MAX31865_Test();
 800149c:	f7ff fec0 	bl	8001220 <MAX31865_Test>
    /* USER CODE BEGIN 3 */
	    /* Continuous temperature monitoring */
	    float temperature;
	    max31865_status_t status;

	    status = MAX31865_ReadTemperature(&hmax31865, &temperature);
 80014a0:	463b      	mov	r3, r7
 80014a2:	4619      	mov	r1, r3
 80014a4:	4812      	ldr	r0, [pc, #72]	@ (80014f0 <main+0x8c>)
 80014a6:	f002 fcdd 	bl	8003e64 <MAX31865_ReadTemperature>
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	    if (status == MAX31865_OK) {
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d109      	bne.n	80014c8 <main+0x64>
	        printf("Current Temperature: %.2f C\r\n", temperature);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe ffb6 	bl	8000428 <__aeabi_f2d>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <main+0x90>)
 80014c2:	f003 fbf3 	bl	8004cac <iprintf>
 80014c6:	e004      	b.n	80014d2 <main+0x6e>
	    } else {
	        printf("Temperature read error: %d\r\n", status);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4619      	mov	r1, r3
 80014cc:	480a      	ldr	r0, [pc, #40]	@ (80014f8 <main+0x94>)
 80014ce:	f003 fbed 	bl	8004cac <iprintf>
	    }
	    HAL_Delay(5000); // Update every 5 seconds
 80014d2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014d6:	f000 fae3 	bl	8001aa0 <HAL_Delay>
  {
 80014da:	e7e1      	b.n	80014a0 <main+0x3c>
 80014dc:	08007040 	.word	0x08007040
 80014e0:	0800706c 	.word	0x0800706c
 80014e4:	08007084 	.word	0x08007084
 80014e8:	08007090 	.word	0x08007090
 80014ec:	0800709c 	.word	0x0800709c
 80014f0:	200001f0 	.word	0x200001f0
 80014f4:	080070b0 	.word	0x080070b0
 80014f8:	080070d0 	.word	0x080070d0

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b090      	sub	sp, #64	@ 0x40
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	2228      	movs	r2, #40	@ 0x28
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fd16 	bl	8004f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001526:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	2301      	movs	r3, #1
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001530:	2302      	movs	r3, #2
 8001532:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001538:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800153a:	2300      	movs	r3, #0
 800153c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fd50 	bl	8001fe8 <HAL_RCC_OscConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800154e:	f000 f818 	bl	8001582 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	230f      	movs	r3, #15
 8001554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001556:	2302      	movs	r3, #2
 8001558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f000 ffbe 	bl	80024ec <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001576:	f000 f804 	bl	8001582 <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3740      	adds	r7, #64	@ 0x40
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001586:	b672      	cpsid	i
}
 8001588:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158a:	bf00      	nop
 800158c:	e7fd      	b.n	800158a <Error_Handler+0x8>
	...

08001590 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001594:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <MX_SPI1_Init+0x64>)
 8001596:	4a18      	ldr	r2, [pc, #96]	@ (80015f8 <MX_SPI1_Init+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <MX_SPI1_Init+0x64>)
 800159c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015c4:	2210      	movs	r2, #16
 80015c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015dc:	220a      	movs	r2, #10
 80015de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_SPI1_Init+0x64>)
 80015e2:	f001 f911 	bl	8002808 <HAL_SPI_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015ec:	f7ff ffc9 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000220 	.word	0x20000220
 80015f8:	40013000 	.word	0x40013000

080015fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_SPI_MspInit+0x88>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d12f      	bne.n	800167c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800161c:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <HAL_SPI_MspInit+0x8c>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a19      	ldr	r2, [pc, #100]	@ (8001688 <HAL_SPI_MspInit+0x8c>)
 8001622:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <HAL_SPI_MspInit+0x8c>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <HAL_SPI_MspInit+0x8c>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a13      	ldr	r2, [pc, #76]	@ (8001688 <HAL_SPI_MspInit+0x8c>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_SPI_MspInit+0x8c>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800164c:	23a0      	movs	r3, #160	@ 0xa0
 800164e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	4619      	mov	r1, r3
 800165e:	480b      	ldr	r0, [pc, #44]	@ (800168c <HAL_SPI_MspInit+0x90>)
 8001660:	f000 fb26 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001664:	2340      	movs	r3, #64	@ 0x40
 8001666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <HAL_SPI_MspInit+0x90>)
 8001678:	f000 fb1a 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40013000 	.word	0x40013000
 8001688:	40021000 	.word	0x40021000
 800168c:	40010800 	.word	0x40010800

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <HAL_MspInit+0x5c>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4a14      	ldr	r2, [pc, #80]	@ (80016ec <HAL_MspInit+0x5c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6193      	str	r3, [r2, #24]
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_MspInit+0x5c>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <HAL_MspInit+0x5c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a0e      	ldr	r2, [pc, #56]	@ (80016ec <HAL_MspInit+0x5c>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	61d3      	str	r3, [r2, #28]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <HAL_MspInit+0x5c>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <HAL_MspInit+0x60>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <HAL_MspInit+0x60>)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <NMI_Handler+0x4>

080016fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <MemManage_Handler+0x4>

0800170c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <UsageFault_Handler+0x4>

0800171c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001744:	f000 f990 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <_kill>:

int _kill(int pid, int sig)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001764:	f003 fc3c 	bl	8004fe0 <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	2216      	movs	r2, #22
 800176c:	601a      	str	r2, [r3, #0]
  return -1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_exit>:

void _exit (int status)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001782:	f04f 31ff 	mov.w	r1, #4294967295
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffe7 	bl	800175a <_kill>
  while (1) {}    /* Make sure we hang here */
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <_exit+0x12>

08001790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e00a      	b.n	80017b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a2:	f3af 8000 	nop.w
 80017a6:	4601      	mov	r1, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	b2ca      	uxtb	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf0      	blt.n	80017a2 <_read+0x12>
  }

  return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f0:	605a      	str	r2, [r3, #4]
  return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <_isatty>:

int _isatty(int file)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
	...

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f003 fbc0 	bl	8004fe0 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20005000 	.word	0x20005000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000278 	.word	0x20000278
 8001894:	20000518 	.word	0x20000518

08001898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <MX_USART1_UART_Init+0x50>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_USART1_UART_Init+0x4c>)
 80018dc:	f001 fd29 	bl	8003332 <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e6:	f7ff fe4c 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000027c 	.word	0x2000027c
 80018f4:	40013800 	.word	0x40013800

080018f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1c      	ldr	r2, [pc, #112]	@ (8001984 <HAL_UART_MspInit+0x8c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d131      	bne.n	800197c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <HAL_UART_MspInit+0x90>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a1a      	ldr	r2, [pc, #104]	@ (8001988 <HAL_UART_MspInit+0x90>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <HAL_UART_MspInit+0x90>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_UART_MspInit+0x90>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <HAL_UART_MspInit+0x90>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_UART_MspInit+0x90>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800194c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4619      	mov	r1, r3
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <HAL_UART_MspInit+0x94>)
 800195e:	f000 f9a7 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <HAL_UART_MspInit+0x94>)
 8001978:	f000 f99a 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40013800 	.word	0x40013800
 8001988:	40021000 	.word	0x40021000
 800198c:	40010800 	.word	0x40010800

08001990 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001990:	f7ff ff82 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001994:	480b      	ldr	r0, [pc, #44]	@ (80019c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001996:	490c      	ldr	r1, [pc, #48]	@ (80019c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001998:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a09      	ldr	r2, [pc, #36]	@ (80019d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019ac:	4c09      	ldr	r4, [pc, #36]	@ (80019d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ba:	f003 fb17 	bl	8004fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019be:	f7ff fd51 	bl	8001464 <main>
  bx lr
 80019c2:	4770      	bx	lr
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019cc:	0800753c 	.word	0x0800753c
  ldr r2, =_sbss
 80019d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019d4:	20000514 	.word	0x20000514

080019d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC1_2_IRQHandler>
	...

080019dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_Init+0x28>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <HAL_Init+0x28>)
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f000 f92b 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f2:	200f      	movs	r0, #15
 80019f4:	f000 f808 	bl	8001a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f8:	f7ff fe4a 	bl	8001690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40022000 	.word	0x40022000

08001a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_InitTick+0x54>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_InitTick+0x58>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f935 	bl	8001c96 <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00e      	b.n	8001a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d80a      	bhi.n	8001a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f000 f90b 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a48:	4a06      	ldr	r2, [pc, #24]	@ (8001a64 <HAL_InitTick+0x5c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_IncTick+0x1c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_IncTick+0x20>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a03      	ldr	r2, [pc, #12]	@ (8001a88 <HAL_IncTick+0x20>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000008 	.word	0x20000008
 8001a88:	200002c4 	.word	0x200002c4

08001a8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b02      	ldr	r3, [pc, #8]	@ (8001a9c <HAL_GetTick+0x10>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	200002c4 	.word	0x200002c4

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffe0 	bl	8001a8c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	@ 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff90 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff49 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff5e 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff90 	bl	8001ba0 <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5f 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffb0 	bl	8001c04 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b08b      	sub	sp, #44	@ 0x2c
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	e169      	b.n	8001f98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	f040 8158 	bne.w	8001f92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a9a      	ldr	r2, [pc, #616]	@ (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d05e      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001cec:	4a98      	ldr	r2, [pc, #608]	@ (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d875      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001cf2:	4a98      	ldr	r2, [pc, #608]	@ (8001f54 <HAL_GPIO_Init+0x2a4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d058      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001cf8:	4a96      	ldr	r2, [pc, #600]	@ (8001f54 <HAL_GPIO_Init+0x2a4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d86f      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001cfe:	4a96      	ldr	r2, [pc, #600]	@ (8001f58 <HAL_GPIO_Init+0x2a8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d052      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d04:	4a94      	ldr	r2, [pc, #592]	@ (8001f58 <HAL_GPIO_Init+0x2a8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d869      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d0a:	4a94      	ldr	r2, [pc, #592]	@ (8001f5c <HAL_GPIO_Init+0x2ac>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d04c      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d10:	4a92      	ldr	r2, [pc, #584]	@ (8001f5c <HAL_GPIO_Init+0x2ac>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d863      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d16:	4a92      	ldr	r2, [pc, #584]	@ (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d046      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d1c:	4a90      	ldr	r2, [pc, #576]	@ (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d85d      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d82a      	bhi.n	8001d7c <HAL_GPIO_Init+0xcc>
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d859      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d30 <HAL_GPIO_Init+0x80>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001dab 	.word	0x08001dab
 8001d34:	08001d85 	.word	0x08001d85
 8001d38:	08001d97 	.word	0x08001d97
 8001d3c:	08001dd9 	.word	0x08001dd9
 8001d40:	08001ddf 	.word	0x08001ddf
 8001d44:	08001ddf 	.word	0x08001ddf
 8001d48:	08001ddf 	.word	0x08001ddf
 8001d4c:	08001ddf 	.word	0x08001ddf
 8001d50:	08001ddf 	.word	0x08001ddf
 8001d54:	08001ddf 	.word	0x08001ddf
 8001d58:	08001ddf 	.word	0x08001ddf
 8001d5c:	08001ddf 	.word	0x08001ddf
 8001d60:	08001ddf 	.word	0x08001ddf
 8001d64:	08001ddf 	.word	0x08001ddf
 8001d68:	08001ddf 	.word	0x08001ddf
 8001d6c:	08001ddf 	.word	0x08001ddf
 8001d70:	08001ddf 	.word	0x08001ddf
 8001d74:	08001d8d 	.word	0x08001d8d
 8001d78:	08001da1 	.word	0x08001da1
 8001d7c:	4a79      	ldr	r2, [pc, #484]	@ (8001f64 <HAL_GPIO_Init+0x2b4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d82:	e02c      	b.n	8001dde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e029      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	3304      	adds	r3, #4
 8001d92:	623b      	str	r3, [r7, #32]
          break;
 8001d94:	e024      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	3308      	adds	r3, #8
 8001d9c:	623b      	str	r3, [r7, #32]
          break;
 8001d9e:	e01f      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	330c      	adds	r3, #12
 8001da6:	623b      	str	r3, [r7, #32]
          break;
 8001da8:	e01a      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db2:	2304      	movs	r3, #4
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e013      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	611a      	str	r2, [r3, #16]
          break;
 8001dca:	e009      	b.n	8001de0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	615a      	str	r2, [r3, #20]
          break;
 8001dd6:	e003      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          break;
 8001dde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2bff      	cmp	r3, #255	@ 0xff
 8001de4:	d801      	bhi.n	8001dea <HAL_GPIO_Init+0x13a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	e001      	b.n	8001dee <HAL_GPIO_Init+0x13e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2bff      	cmp	r3, #255	@ 0xff
 8001df4:	d802      	bhi.n	8001dfc <HAL_GPIO_Init+0x14c>
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	e002      	b.n	8001e02 <HAL_GPIO_Init+0x152>
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	3b08      	subs	r3, #8
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	210f      	movs	r1, #15
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	6a39      	ldr	r1, [r7, #32]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80b1 	beq.w	8001f92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e30:	4b4d      	ldr	r3, [pc, #308]	@ (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a4c      	ldr	r2, [pc, #304]	@ (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e48:	4a48      	ldr	r2, [pc, #288]	@ (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a40      	ldr	r2, [pc, #256]	@ (8001f70 <HAL_GPIO_Init+0x2c0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_GPIO_Init+0x1ec>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3f      	ldr	r2, [pc, #252]	@ (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00d      	beq.n	8001e98 <HAL_GPIO_Init+0x1e8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f78 <HAL_GPIO_Init+0x2c8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <HAL_GPIO_Init+0x1e4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3d      	ldr	r2, [pc, #244]	@ (8001f7c <HAL_GPIO_Init+0x2cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_GPIO_Init+0x1e0>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e006      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e90:	2304      	movs	r3, #4
 8001e92:	e004      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e002      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4093      	lsls	r3, r2
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eae:	492f      	ldr	r1, [pc, #188]	@ (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	492c      	ldr	r1, [pc, #176]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	4928      	ldr	r1, [pc, #160]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ef0:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4922      	ldr	r1, [pc, #136]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	491e      	ldr	r1, [pc, #120]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4918      	ldr	r1, [pc, #96]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4914      	ldr	r1, [pc, #80]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d021      	beq.n	8001f84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	490e      	ldr	r1, [pc, #56]	@ (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e021      	b.n	8001f92 <HAL_GPIO_Init+0x2e2>
 8001f4e:	bf00      	nop
 8001f50:	10320000 	.word	0x10320000
 8001f54:	10310000 	.word	0x10310000
 8001f58:	10220000 	.word	0x10220000
 8001f5c:	10210000 	.word	0x10210000
 8001f60:	10120000 	.word	0x10120000
 8001f64:	10110000 	.word	0x10110000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40010800 	.word	0x40010800
 8001f74:	40010c00 	.word	0x40010c00
 8001f78:	40011000 	.word	0x40011000
 8001f7c:	40011400 	.word	0x40011400
 8001f80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4909      	ldr	r1, [pc, #36]	@ (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	3301      	adds	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f47f ae8e 	bne.w	8001cc4 <HAL_GPIO_Init+0x14>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	372c      	adds	r7, #44	@ 0x2c
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc8:	787b      	ldrb	r3, [r7, #1]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fd4:	e003      	b.n	8001fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	041a      	lsls	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e272      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8087 	beq.w	8002116 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002008:	4b92      	ldr	r3, [pc, #584]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b04      	cmp	r3, #4
 8002012:	d00c      	beq.n	800202e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002014:	4b8f      	ldr	r3, [pc, #572]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d112      	bne.n	8002046 <HAL_RCC_OscConfig+0x5e>
 8002020:	4b8c      	ldr	r3, [pc, #560]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202c:	d10b      	bne.n	8002046 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202e:	4b89      	ldr	r3, [pc, #548]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d06c      	beq.n	8002114 <HAL_RCC_OscConfig+0x12c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d168      	bne.n	8002114 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e24c      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x76>
 8002050:	4b80      	ldr	r3, [pc, #512]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a7f      	ldr	r2, [pc, #508]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	e02e      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x98>
 8002066:	4b7b      	ldr	r3, [pc, #492]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7a      	ldr	r2, [pc, #488]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b78      	ldr	r3, [pc, #480]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a77      	ldr	r2, [pc, #476]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e01d      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002088:	d10c      	bne.n	80020a4 <HAL_RCC_OscConfig+0xbc>
 800208a:	4b72      	ldr	r3, [pc, #456]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a71      	ldr	r2, [pc, #452]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	4b6f      	ldr	r3, [pc, #444]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6e      	ldr	r2, [pc, #440]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_OscConfig+0xd4>
 80020a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b68      	ldr	r3, [pc, #416]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a67      	ldr	r2, [pc, #412]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fce2 	bl	8001a8c <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff fcde 	bl	8001a8c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e200      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	4b5d      	ldr	r3, [pc, #372]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0xe4>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fcce 	bl	8001a8c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff fcca 	bl	8001a8c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	@ 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1ec      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	4b53      	ldr	r3, [pc, #332]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x10c>
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d063      	beq.n	80021ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002122:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800212e:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b08      	cmp	r3, #8
 8002138:	d11c      	bne.n	8002174 <HAL_RCC_OscConfig+0x18c>
 800213a:	4b46      	ldr	r3, [pc, #280]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d116      	bne.n	8002174 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4b43      	ldr	r3, [pc, #268]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x176>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1c0      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b3d      	ldr	r3, [pc, #244]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4939      	ldr	r1, [pc, #228]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	e03a      	b.n	80021ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b36      	ldr	r3, [pc, #216]	@ (8002258 <HAL_RCC_OscConfig+0x270>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff fc83 	bl	8001a8c <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff fc7f 	bl	8001a8c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1a1      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4927      	ldr	r1, [pc, #156]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e015      	b.n	80021ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b26      	ldr	r3, [pc, #152]	@ (8002258 <HAL_RCC_OscConfig+0x270>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fc62 	bl	8001a8c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff fc5e 	bl	8001a8c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e180      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	4b1d      	ldr	r3, [pc, #116]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d03a      	beq.n	800226c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d019      	beq.n	8002232 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fe:	4b17      	ldr	r3, [pc, #92]	@ (800225c <HAL_RCC_OscConfig+0x274>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7ff fc42 	bl	8001a8c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff fc3e 	bl	8001a8c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e160      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <HAL_RCC_OscConfig+0x26c>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800222a:	2001      	movs	r0, #1
 800222c:	f000 face 	bl	80027cc <RCC_Delay>
 8002230:	e01c      	b.n	800226c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002232:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_RCC_OscConfig+0x274>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002238:	f7ff fc28 	bl	8001a8c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223e:	e00f      	b.n	8002260 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff fc24 	bl	8001a8c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d908      	bls.n	8002260 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e146      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	42420000 	.word	0x42420000
 800225c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b92      	ldr	r3, [pc, #584]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e9      	bne.n	8002240 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a6 	beq.w	80023c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4b8b      	ldr	r3, [pc, #556]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10d      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	4b88      	ldr	r3, [pc, #544]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a87      	ldr	r2, [pc, #540]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]
 8002296:	4b85      	ldr	r3, [pc, #532]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b82      	ldr	r3, [pc, #520]	@ (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d118      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b7f      	ldr	r3, [pc, #508]	@ (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7e      	ldr	r2, [pc, #504]	@ (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7ff fbe5 	bl	8001a8c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c6:	f7ff fbe1 	bl	8001a8c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b64      	cmp	r3, #100	@ 0x64
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e103      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b75      	ldr	r3, [pc, #468]	@ (80024b0 <HAL_RCC_OscConfig+0x4c8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_OscConfig+0x312>
 80022ec:	4b6f      	ldr	r3, [pc, #444]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a6e      	ldr	r2, [pc, #440]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	e02d      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x334>
 8002302:	4b6a      	ldr	r3, [pc, #424]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a69      	ldr	r2, [pc, #420]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	4b67      	ldr	r3, [pc, #412]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a66      	ldr	r2, [pc, #408]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	e01c      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d10c      	bne.n	800233e <HAL_RCC_OscConfig+0x356>
 8002324:	4b61      	ldr	r3, [pc, #388]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a60      	ldr	r2, [pc, #384]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6213      	str	r3, [r2, #32]
 8002330:	4b5e      	ldr	r3, [pc, #376]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a5d      	ldr	r2, [pc, #372]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e00b      	b.n	8002356 <HAL_RCC_OscConfig+0x36e>
 800233e:	4b5b      	ldr	r3, [pc, #364]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a5a      	ldr	r2, [pc, #360]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	4b58      	ldr	r3, [pc, #352]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a57      	ldr	r2, [pc, #348]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d015      	beq.n	800238a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235e:	f7ff fb95 	bl	8001a8c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7ff fb91 	bl	8001a8c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0b1      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	4b4b      	ldr	r3, [pc, #300]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ee      	beq.n	8002366 <HAL_RCC_OscConfig+0x37e>
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff fb7f 	bl	8001a8c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7ff fb7b 	bl	8001a8c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e09b      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	4b40      	ldr	r3, [pc, #256]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a3b      	ldr	r2, [pc, #236]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8087 	beq.w	80024de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d0:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d061      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d146      	bne.n	8002472 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e4:	4b33      	ldr	r3, [pc, #204]	@ (80024b4 <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fb4f 	bl	8001a8c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7ff fb4b 	bl	8001a8c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e06d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002404:	4b29      	ldr	r3, [pc, #164]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002418:	d108      	bne.n	800242c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800241a:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4921      	ldr	r1, [pc, #132]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a19      	ldr	r1, [r3, #32]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	430b      	orrs	r3, r1
 800243e:	491b      	ldr	r1, [pc, #108]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x4cc>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff fb1f 	bl	8001a8c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7ff fb1b 	bl	8001a8c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e03d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x46a>
 8002470:	e035      	b.n	80024de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_RCC_OscConfig+0x4cc>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fb08 	bl	8001a8c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002480:	f7ff fb04 	bl	8001a8c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e026      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_RCC_OscConfig+0x4c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x498>
 800249e:	e01e      	b.n	80024de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e019      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
 80024b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_OscConfig+0x500>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000

080024ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0d0      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b6a      	ldr	r3, [pc, #424]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d910      	bls.n	8002530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b67      	ldr	r3, [pc, #412]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 0207 	bic.w	r2, r3, #7
 8002516:	4965      	ldr	r1, [pc, #404]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b63      	ldr	r3, [pc, #396]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0b8      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d020      	beq.n	800257e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002548:	4b59      	ldr	r3, [pc, #356]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a58      	ldr	r2, [pc, #352]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002560:	4b53      	ldr	r3, [pc, #332]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a52      	ldr	r2, [pc, #328]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800256a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800256c:	4b50      	ldr	r3, [pc, #320]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	494d      	ldr	r1, [pc, #308]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d040      	beq.n	800260c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	4b47      	ldr	r3, [pc, #284]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d115      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e07f      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e073      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b3d      	ldr	r3, [pc, #244]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06b      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	4b39      	ldr	r3, [pc, #228]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4936      	ldr	r1, [pc, #216]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025dc:	f7ff fa56 	bl	8001a8c <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7ff fa52 	bl	8001a8c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e053      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b2d      	ldr	r3, [pc, #180]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 020c 	and.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d1eb      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800260c:	4b27      	ldr	r3, [pc, #156]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d210      	bcs.n	800263c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	4922      	ldr	r1, [pc, #136]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e032      	b.n	80026a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002648:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4916      	ldr	r1, [pc, #88]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002666:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	490e      	ldr	r1, [pc, #56]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800267a:	f000 f821 	bl	80026c0 <HAL_RCC_GetSysClockFreq>
 800267e:	4602      	mov	r2, r0
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	490a      	ldr	r1, [pc, #40]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	5ccb      	ldrb	r3, [r1, r3]
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	4a09      	ldr	r2, [pc, #36]	@ (80026b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_RCC_ClockConfig+0x1d0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff f9b4 	bl	8001a08 <HAL_InitTick>

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40021000 	.word	0x40021000
 80026b4:	08007188 	.word	0x08007188
 80026b8:	20000000 	.word	0x20000000
 80026bc:	20000004 	.word	0x20000004

080026c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026da:	4b1e      	ldr	r3, [pc, #120]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x94>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x30>
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x36>
 80026ee:	e027      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f0:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x98>)
 80026f2:	613b      	str	r3, [r7, #16]
      break;
 80026f4:	e027      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	0c9b      	lsrs	r3, r3, #18
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	4a17      	ldr	r2, [pc, #92]	@ (800275c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002700:	5cd3      	ldrb	r3, [r2, r3]
 8002702:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x94>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0c5b      	lsrs	r3, r3, #17
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	4a11      	ldr	r2, [pc, #68]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xa0>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a0d      	ldr	r2, [pc, #52]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x98>)
 8002722:	fb03 f202 	mul.w	r2, r3, r2
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e004      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a0c      	ldr	r2, [pc, #48]	@ (8002764 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	613b      	str	r3, [r7, #16]
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x98>)
 8002742:	613b      	str	r3, [r7, #16]
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	693b      	ldr	r3, [r7, #16]
}
 8002748:	4618      	mov	r0, r3
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	007a1200 	.word	0x007a1200
 800275c:	080071a0 	.word	0x080071a0
 8002760:	080071b0 	.word	0x080071b0
 8002764:	003d0900 	.word	0x003d0900

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b02      	ldr	r3, [pc, #8]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x10>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	20000000 	.word	0x20000000

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002780:	f7ff fff2 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	@ (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40021000 	.word	0x40021000
 80027a0:	08007198 	.word	0x08007198

080027a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027a8:	f7ff ffde 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0adb      	lsrs	r3, r3, #11
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08007198 	.word	0x08007198

080027cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <RCC_Delay+0x34>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <RCC_Delay+0x38>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0a5b      	lsrs	r3, r3, #9
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027e8:	bf00      	nop
  }
  while (Delay --);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1e5a      	subs	r2, r3, #1
 80027ee:	60fa      	str	r2, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f9      	bne.n	80027e8 <RCC_Delay+0x1c>
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000000 	.word	0x20000000
 8002804:	10624dd3 	.word	0x10624dd3

08002808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e076      	b.n	8002908 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	2b00      	cmp	r3, #0
 8002820:	d108      	bne.n	8002834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800282a:	d009      	beq.n	8002840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
 8002832:	e005      	b.n	8002840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fece 	bl	80015fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002876:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c4:	ea42 0103 	orr.w	r1, r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	0c1a      	lsrs	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f002 0204 	and.w	r2, r2, #4
 80028e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002920:	f7ff f8b4 	bl	8001a8c <HAL_GetTick>
 8002924:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d001      	beq.n	800293a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	e12a      	b.n	8002b90 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_SPI_Transmit+0x36>
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e122      	b.n	8002b90 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_SPI_Transmit+0x48>
 8002954:	2302      	movs	r3, #2
 8002956:	e11b      	b.n	8002b90 <HAL_SPI_Transmit+0x280>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2203      	movs	r2, #3
 8002964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a6:	d10f      	bne.n	80029c8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d2:	2b40      	cmp	r3, #64	@ 0x40
 80029d4:	d007      	beq.n	80029e6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ee:	d152      	bne.n	8002a96 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_SPI_Transmit+0xee>
 80029f8:	8b7b      	ldrh	r3, [r7, #26]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d145      	bne.n	8002a8a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	881a      	ldrh	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	1c9a      	adds	r2, r3, #2
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a22:	e032      	b.n	8002a8a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d112      	bne.n	8002a58 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	881a      	ldrh	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	1c9a      	adds	r2, r3, #2
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a56:	e018      	b.n	8002a8a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a58:	f7ff f818 	bl	8001a8c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d803      	bhi.n	8002a70 <HAL_SPI_Transmit+0x160>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d102      	bne.n	8002a76 <HAL_SPI_Transmit+0x166>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e082      	b.n	8002b90 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1c7      	bne.n	8002a24 <HAL_SPI_Transmit+0x114>
 8002a94:	e053      	b.n	8002b3e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_SPI_Transmit+0x194>
 8002a9e:	8b7b      	ldrh	r3, [r7, #26]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d147      	bne.n	8002b34 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aca:	e033      	b.n	8002b34 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d113      	bne.n	8002b02 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	330c      	adds	r3, #12
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b00:	e018      	b.n	8002b34 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b02:	f7fe ffc3 	bl	8001a8c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d803      	bhi.n	8002b1a <HAL_SPI_Transmit+0x20a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d102      	bne.n	8002b20 <HAL_SPI_Transmit+0x210>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e02d      	b.n	8002b90 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1c6      	bne.n	8002acc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	6839      	ldr	r1, [r7, #0]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fbc4 	bl	80032d0 <SPI_EndRxTxTransaction>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d001      	beq.n	8002bb8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e104      	b.n	8002dc2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bc0:	d112      	bne.n	8002be8 <HAL_SPI_Receive+0x50>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10e      	bne.n	8002be8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f8f3 	bl	8002dca <HAL_SPI_TransmitReceive>
 8002be4:	4603      	mov	r3, r0
 8002be6:	e0ec      	b.n	8002dc2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002be8:	f7fe ff50 	bl	8001a8c <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_SPI_Receive+0x62>
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0e1      	b.n	8002dc2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_SPI_Receive+0x74>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e0da      	b.n	8002dc2 <HAL_SPI_Receive+0x22a>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2204      	movs	r2, #4
 8002c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c5a:	d10f      	bne.n	8002c7c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c86:	2b40      	cmp	r3, #64	@ 0x40
 8002c88:	d007      	beq.n	8002c9a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d170      	bne.n	8002d84 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ca2:	e035      	b.n	8002d10 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d115      	bne.n	8002cde <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f103 020c 	add.w	r2, r3, #12
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cdc:	e018      	b.n	8002d10 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cde:	f7fe fed5 	bl	8001a8c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d803      	bhi.n	8002cf6 <HAL_SPI_Receive+0x15e>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d102      	bne.n	8002cfc <HAL_SPI_Receive+0x164>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e058      	b.n	8002dc2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1c4      	bne.n	8002ca4 <HAL_SPI_Receive+0x10c>
 8002d1a:	e038      	b.n	8002d8e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d113      	bne.n	8002d52 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d34:	b292      	uxth	r2, r2
 8002d36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3c:	1c9a      	adds	r2, r3, #2
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d50:	e018      	b.n	8002d84 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d52:	f7fe fe9b 	bl	8001a8c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d803      	bhi.n	8002d6a <HAL_SPI_Receive+0x1d2>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d102      	bne.n	8002d70 <HAL_SPI_Receive+0x1d8>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e01e      	b.n	8002dc2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1c6      	bne.n	8002d1c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fa4a 	bl	800322c <SPI_EndRxTransaction>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b08a      	sub	sp, #40	@ 0x28
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ddc:	f7fe fe56 	bl	8001a8c <HAL_GetTick>
 8002de0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002de8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d00c      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x4a>
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e00:	d106      	bne.n	8002e10 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_SPI_TransmitReceive+0x46>
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d001      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
 8002e12:	e17f      	b.n	8003114 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x5c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x5c>
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e174      	b.n	8003114 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x6e>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e16d      	b.n	8003114 <HAL_SPI_TransmitReceive+0x34a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d003      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2205      	movs	r2, #5
 8002e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	887a      	ldrh	r2, [r7, #2]
 8002e76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e94:	2b40      	cmp	r3, #64	@ 0x40
 8002e96:	d007      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eb0:	d17e      	bne.n	8002fb0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0xf6>
 8002eba:	8afb      	ldrh	r3, [r7, #22]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d16c      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee4:	e059      	b.n	8002f9a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d11b      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x162>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <HAL_SPI_TransmitReceive+0x162>
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d113      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	881a      	ldrh	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d119      	bne.n	8002f6e <HAL_SPI_TransmitReceive+0x1a4>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d014      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f6e:	f7fe fd8d 	bl	8001a8c <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d80d      	bhi.n	8002f9a <HAL_SPI_TransmitReceive+0x1d0>
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d009      	beq.n	8002f9a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0bc      	b.n	8003114 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1a0      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x11c>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d19b      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x11c>
 8002fae:	e082      	b.n	80030b6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_TransmitReceive+0x1f4>
 8002fb8:	8afb      	ldrh	r3, [r7, #22]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d171      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe4:	e05d      	b.n	80030a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d11c      	bne.n	800302e <HAL_SPI_TransmitReceive+0x264>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d017      	beq.n	800302e <HAL_SPI_TransmitReceive+0x264>
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d114      	bne.n	800302e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d119      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x2a6>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d014      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800306c:	2301      	movs	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003070:	f7fe fd0c 	bl	8001a8c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800307c:	429a      	cmp	r2, r3
 800307e:	d803      	bhi.n	8003088 <HAL_SPI_TransmitReceive+0x2be>
 8003080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d102      	bne.n	800308e <HAL_SPI_TransmitReceive+0x2c4>
 8003088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e038      	b.n	8003114 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d19c      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x21c>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d197      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f908 	bl	80032d0 <SPI_EndRxTxTransaction>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e01d      	b.n	8003114 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003112:	2300      	movs	r3, #0
  }
}
 8003114:	4618      	mov	r0, r3
 8003116:	3728      	adds	r7, #40	@ 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800312c:	f7fe fcae 	bl	8001a8c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	4413      	add	r3, r2
 800313a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800313c:	f7fe fca6 	bl	8001a8c <HAL_GetTick>
 8003140:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003142:	4b39      	ldr	r3, [pc, #228]	@ (8003228 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	015b      	lsls	r3, r3, #5
 8003148:	0d1b      	lsrs	r3, r3, #20
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	fb02 f303 	mul.w	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003152:	e054      	b.n	80031fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d050      	beq.n	80031fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800315c:	f7fe fc96 	bl	8001a8c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	429a      	cmp	r2, r3
 800316a:	d902      	bls.n	8003172 <SPI_WaitFlagStateUntilTimeout+0x56>
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d13d      	bne.n	80031ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003180:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800318a:	d111      	bne.n	80031b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003194:	d004      	beq.n	80031a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319e:	d107      	bne.n	80031b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b8:	d10f      	bne.n	80031da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e017      	b.n	800321e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	429a      	cmp	r2, r3
 800321a:	d19b      	bne.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000000 	.word	0x20000000

0800322c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003240:	d111      	bne.n	8003266 <SPI_EndRxTransaction+0x3a>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800324a:	d004      	beq.n	8003256 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003254:	d107      	bne.n	8003266 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003264:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800326e:	d117      	bne.n	80032a0 <SPI_EndRxTransaction+0x74>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003278:	d112      	bne.n	80032a0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	2101      	movs	r1, #1
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff ff49 	bl	800311c <SPI_WaitFlagStateUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01a      	beq.n	80032c6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e013      	b.n	80032c8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2200      	movs	r2, #0
 80032a8:	2180      	movs	r1, #128	@ 0x80
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff36 	bl	800311c <SPI_WaitFlagStateUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e000      	b.n	80032c8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2201      	movs	r2, #1
 80032e4:	2102      	movs	r1, #2
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff18 	bl	800311c <SPI_WaitFlagStateUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e013      	b.n	800332a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff ff05 	bl	800311c <SPI_WaitFlagStateUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e000      	b.n	800332a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e042      	b.n	80033ca <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fe facd 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2224      	movs	r2, #36	@ 0x24
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003374:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f972 	bl	8003660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800338a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800339a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b08a      	sub	sp, #40	@ 0x28
 80033d6:	af02      	add	r7, sp, #8
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d175      	bne.n	80034de <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_UART_Transmit+0x2c>
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e06e      	b.n	80034e0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2221      	movs	r2, #33	@ 0x21
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003410:	f7fe fb3c 	bl	8001a8c <HAL_GetTick>
 8003414:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	88fa      	ldrh	r2, [r7, #6]
 800341a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800342a:	d108      	bne.n	800343e <HAL_UART_Transmit+0x6c>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d104      	bne.n	800343e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	e003      	b.n	8003446 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003446:	e02e      	b.n	80034a6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	2180      	movs	r1, #128	@ 0x80
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f848 	bl	80034e8 <UART_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e03a      	b.n	80034e0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	3302      	adds	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	e007      	b.n	8003498 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3301      	adds	r3, #1
 8003496:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1cb      	bne.n	8003448 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2140      	movs	r1, #64	@ 0x40
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f814 	bl	80034e8 <UART_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e006      	b.n	80034e0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3720      	adds	r7, #32
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f8:	e03b      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d037      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7fe fac3 	bl	8001a8c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <UART_WaitOnFlagUntilTimeout+0x30>
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e03a      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d023      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b80      	cmp	r3, #128	@ 0x80
 800352e:	d020      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b40      	cmp	r3, #64	@ 0x40
 8003534:	d01d      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b08      	cmp	r3, #8
 8003542:	d116      	bne.n	8003572 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f81d 	bl	800359a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2208      	movs	r2, #8
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e00f      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4013      	ands	r3, r2
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	bf0c      	ite	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	2300      	movne	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	429a      	cmp	r2, r3
 800358e:	d0b4      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800359a:	b480      	push	{r7}
 800359c:	b095      	sub	sp, #84	@ 0x54
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80035c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e5      	bne.n	80035a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3314      	adds	r3, #20
 80035dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3314      	adds	r3, #20
 80035f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e5      	bne.n	80035d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	2b01      	cmp	r3, #1
 8003610:	d119      	bne.n	8003646 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	60bb      	str	r3, [r7, #8]
   return(result);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f023 0310 	bic.w	r3, r3, #16
 8003628:	647b      	str	r3, [r7, #68]	@ 0x44
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003632:	61ba      	str	r2, [r7, #24]
 8003634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	613b      	str	r3, [r7, #16]
   return(result);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e5      	bne.n	8003612 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003654:	bf00      	nop
 8003656:	3754      	adds	r7, #84	@ 0x54
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
	...

08003660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800369a:	f023 030c 	bic.w	r3, r3, #12
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003774 <UART_SetConfig+0x114>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036c8:	f7ff f86c 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	e002      	b.n	80036d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036d0:	f7ff f854 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	4a22      	ldr	r2, [pc, #136]	@ (8003778 <UART_SetConfig+0x118>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	0119      	lsls	r1, r3, #4
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009a      	lsls	r2, r3, #2
 8003700:	441a      	add	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	fbb2 f2f3 	udiv	r2, r2, r3
 800370c:	4b1a      	ldr	r3, [pc, #104]	@ (8003778 <UART_SetConfig+0x118>)
 800370e:	fba3 0302 	umull	r0, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2064      	movs	r0, #100	@ 0x64
 8003716:	fb00 f303 	mul.w	r3, r0, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	3332      	adds	r3, #50	@ 0x32
 8003720:	4a15      	ldr	r2, [pc, #84]	@ (8003778 <UART_SetConfig+0x118>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800372c:	4419      	add	r1, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009a      	lsls	r2, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	fbb2 f2f3 	udiv	r2, r2, r3
 8003744:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <UART_SetConfig+0x118>)
 8003746:	fba3 0302 	umull	r0, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2064      	movs	r0, #100	@ 0x64
 800374e:	fb00 f303 	mul.w	r3, r0, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	3332      	adds	r3, #50	@ 0x32
 8003758:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <UART_SetConfig+0x118>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	f003 020f 	and.w	r2, r3, #15
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	440a      	add	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40013800 	.word	0x40013800
 8003778:	51eb851f 	.word	0x51eb851f

0800377c <MAX31865_WaitForConversion>:

/* Private Functions */
static max31865_status_t MAX31865_WaitForConversion(MAX31865_Handle_t *hmax);

/* Wait for conversion completion */
static max31865_status_t MAX31865_WaitForConversion(MAX31865_Handle_t *hmax) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
    if (hmax->platform.delay_ms) {
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <MAX31865_WaitForConversion+0x18>
        hmax->platform.delay_ms(65); // 65ms for 60Hz filter, 52ms for 50Hz
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2041      	movs	r0, #65	@ 0x41
 8003792:	4798      	blx	r3
    }
    return MAX31865_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <MAX31865_Init>:
 */
max31865_status_t MAX31865_Init(MAX31865_Handle_t *hmax,
                                const max31865_platform_t *platform,
                                void *cs_port, uint32_t cs_pin,
                                max31865_numwires_t wires,
                                float rref, float rnominal) {
 800379e:	b5b0      	push	{r4, r5, r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	603b      	str	r3, [r7, #0]

    if (hmax == NULL || platform == NULL) {
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <MAX31865_Init+0x1a>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <MAX31865_Init+0x1e>
        return MAX31865_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e079      	b.n	80038b0 <MAX31865_Init+0x112>
    }

    /* Copy Platform Interface functions */
    hmax->platform = *platform;
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4614      	mov	r4, r2
 80037c2:	461d      	mov	r5, r3
 80037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	6023      	str	r3, [r4, #0]

    /* Initialize structure */
    hmax->cs_port = cs_port;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	615a      	str	r2, [r3, #20]
    hmax->cs_pin = cs_pin;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	619a      	str	r2, [r3, #24]
    hmax->rref = rref;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037dc:	61da      	str	r2, [r3, #28]
    hmax->rnominal = rnominal;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e2:	621a      	str	r2, [r3, #32]
    hmax->wires = wires;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    hmax->filter = MAX31865_FILTER_60HZ;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hmax->initialized = false;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    hmax->last_fault = 0;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    hmax->last_temperature = 0.0f;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmax->last_rtd_raw = 0;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	859a      	strh	r2, [r3, #44]	@ 0x2c

    /* Set CS high initially */
    if (hmax->platform.cs_high) {
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <MAX31865_Init+0x86>
        hmax->platform.cs_high(hmax);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	4798      	blx	r3
    }

    if (hmax->platform.delay_ms) {
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <MAX31865_Init+0x96>
        hmax->platform.delay_ms(10);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	200a      	movs	r0, #10
 8003832:	4798      	blx	r3
    }

    /* Test communication */
    uint8_t config_reg = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	75fb      	strb	r3, [r7, #23]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config_reg) != MAX31865_OK) {
 8003838:	f107 0317 	add.w	r3, r7, #23
 800383c:	461a      	mov	r2, r3
 800383e:	2100      	movs	r1, #0
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f839 	bl	80038b8 <MAX31865_ReadRegister8>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MAX31865_Init+0xb2>
        MAX31865_DEBUG_PRINT("MAX31865: Communication test failed\r\n");
        return MAX31865_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e02f      	b.n	80038b0 <MAX31865_Init+0x112>
    }

    /* Clear any existing faults */
    MAX31865_ClearFault(hmax);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fa04 	bl	8003c5e <MAX31865_ClearFault>

    /* Configure wire mode */
    if (MAX31865_SetWires(hmax, wires) != MAX31865_OK) {
 8003856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800385a:	4619      	mov	r1, r3
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f924 	bl	8003aaa <MAX31865_SetWires>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MAX31865_Init+0xce>
        return MAX31865_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e021      	b.n	80038b0 <MAX31865_Init+0x112>
    }

    /* Disable bias initially */
    if (MAX31865_EnableBias(hmax, false) != MAX31865_OK) {
 800386c:	2100      	movs	r1, #0
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f991 	bl	8003b96 <MAX31865_EnableBias>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MAX31865_Init+0xe0>
        return MAX31865_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e018      	b.n	80038b0 <MAX31865_Init+0x112>
    }

    /* Disable auto conversion */
    if (MAX31865_EnableAutoConvert(hmax, false) != MAX31865_OK) {
 800387e:	2100      	movs	r1, #0
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f9ba 	bl	8003bfa <MAX31865_EnableAutoConvert>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MAX31865_Init+0xf2>
        return MAX31865_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e00f      	b.n	80038b0 <MAX31865_Init+0x112>
    }

    /* Set default thresholds */
    if (MAX31865_SetThresholds(hmax, 0x0000, 0x7FFF) != MAX31865_OK) {
 8003890:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003894:	2100      	movs	r1, #0
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fa0d 	bl	8003cb6 <MAX31865_SetThresholds>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MAX31865_Init+0x108>
        return MAX31865_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e004      	b.n	80038b0 <MAX31865_Init+0x112>
    }

    hmax->initialized = true;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    MAX31865_DEBUG_PRINT("MAX31865: Initialized successfully\r\n");

    return MAX31865_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bdb0      	pop	{r4, r5, r7, pc}

080038b8 <MAX31865_ReadRegister8>:
}

/**
 * @brief Read 8-bit register
 */
max31865_status_t MAX31865_ReadRegister8(MAX31865_Handle_t *hmax, uint8_t reg, uint8_t *data) {
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	460b      	mov	r3, r1
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	72fb      	strb	r3, [r7, #11]
    if (hmax == NULL || data == NULL || hmax->platform.spi_write_read == NULL) {
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <MAX31865_ReadRegister8+0x22>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <MAX31865_ReadRegister8+0x22>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <MAX31865_ReadRegister8+0x26>
        return MAX31865_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e03a      	b.n	8003954 <MAX31865_ReadRegister8+0x9c>
    }

    uint8_t tx_data = reg & 0x7F; // Clear MSB for read
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	75bb      	strb	r3, [r7, #22]
    uint8_t rx_data[2] = {0, 0};
 80038e8:	2300      	movs	r3, #0
 80038ea:	82bb      	strh	r3, [r7, #20]
    max31865_status_t status;

    if (hmax->platform.cs_low) {
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <MAX31865_ReadRegister8+0x44>
        hmax->platform.cs_low(hmax);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	4798      	blx	r3
    }

    if (hmax->platform.delay_ms) {
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <MAX31865_ReadRegister8+0x54>
        hmax->platform.delay_ms(1);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2001      	movs	r0, #1
 800390a:	4798      	blx	r3
    }

    /* Send register address and read data */
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, 2);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681c      	ldr	r4, [r3, #0]
 8003910:	f107 0214 	add.w	r2, r7, #20
 8003914:	f107 0116 	add.w	r1, r7, #22
 8003918:	2302      	movs	r3, #2
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	47a0      	blx	r4
 800391e:	4603      	mov	r3, r0
 8003920:	75fb      	strb	r3, [r7, #23]

    if (hmax->platform.delay_ms) {
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <MAX31865_ReadRegister8+0x7a>
        hmax->platform.delay_ms(1);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2001      	movs	r0, #1
 8003930:	4798      	blx	r3
    }

    if (hmax->platform.cs_high) {
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <MAX31865_ReadRegister8+0x8a>
        hmax->platform.cs_high(hmax);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	4798      	blx	r3
    }

    if (status != MAX31865_OK) {
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MAX31865_ReadRegister8+0x94>
        return status;
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	e003      	b.n	8003954 <MAX31865_ReadRegister8+0x9c>
    }

    *data = rx_data[1]; // Data comes in second byte
 800394c:	7d7a      	ldrb	r2, [r7, #21]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	701a      	strb	r2, [r3, #0]
    return MAX31865_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd90      	pop	{r4, r7, pc}

0800395c <MAX31865_ReadRegister16>:

/**
 * @brief Read 16-bit register
 */
max31865_status_t MAX31865_ReadRegister16(MAX31865_Handle_t *hmax, uint8_t reg, uint16_t *data) {
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	460b      	mov	r3, r1
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	72fb      	strb	r3, [r7, #11]
    if (hmax == NULL || data == NULL || hmax->platform.spi_write_read == NULL) {
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d006      	beq.n	800397e <MAX31865_ReadRegister16+0x22>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <MAX31865_ReadRegister16+0x22>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <MAX31865_ReadRegister16+0x26>
        return MAX31865_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e047      	b.n	8003a12 <MAX31865_ReadRegister16+0xb6>
    }

    uint8_t tx_data = reg & 0x7F; // Clear MSB for read
 8003982:	7afb      	ldrb	r3, [r7, #11]
 8003984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003988:	b2db      	uxtb	r3, r3
 800398a:	75bb      	strb	r3, [r7, #22]
    uint8_t rx_data[3] = {0, 0, 0};
 800398c:	f107 0310 	add.w	r3, r7, #16
 8003990:	2100      	movs	r1, #0
 8003992:	460a      	mov	r2, r1
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	460a      	mov	r2, r1
 8003998:	709a      	strb	r2, [r3, #2]
    max31865_status_t status;

    if (hmax->platform.cs_low) {
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <MAX31865_ReadRegister16+0x4e>
        hmax->platform.cs_low(hmax);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	4798      	blx	r3
    }

    if (hmax->platform.delay_ms) {
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <MAX31865_ReadRegister16+0x5e>
        hmax->platform.delay_ms(1);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2001      	movs	r0, #1
 80039b8:	4798      	blx	r3
    }

    /* Send register address and read 2 bytes */
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, 3);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681c      	ldr	r4, [r3, #0]
 80039be:	f107 0210 	add.w	r2, r7, #16
 80039c2:	f107 0116 	add.w	r1, r7, #22
 80039c6:	2303      	movs	r3, #3
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	47a0      	blx	r4
 80039cc:	4603      	mov	r3, r0
 80039ce:	75fb      	strb	r3, [r7, #23]

    if (hmax->platform.delay_ms) {
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <MAX31865_ReadRegister16+0x84>
        hmax->platform.delay_ms(1);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2001      	movs	r0, #1
 80039de:	4798      	blx	r3
    }

    if (hmax->platform.cs_high) {
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <MAX31865_ReadRegister16+0x94>
        hmax->platform.cs_high(hmax);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	4798      	blx	r3
    }

    if (status != MAX31865_OK) {
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MAX31865_ReadRegister16+0x9e>
        return status;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
 80039f8:	e00b      	b.n	8003a12 <MAX31865_ReadRegister16+0xb6>
    }

    *data = ((uint16_t)rx_data[1] << 8) | rx_data[2];
 80039fa:	7c7b      	ldrb	r3, [r7, #17]
 80039fc:	b21b      	sxth	r3, r3
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	b21a      	sxth	r2, r3
 8003a02:	7cbb      	ldrb	r3, [r7, #18]
 8003a04:	b21b      	sxth	r3, r3
 8003a06:	4313      	orrs	r3, r2
 8003a08:	b21b      	sxth	r3, r3
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	801a      	strh	r2, [r3, #0]
    return MAX31865_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd90      	pop	{r4, r7, pc}

08003a1a <MAX31865_WriteRegister8>:

/**
 * @brief Write 8-bit register
 */
max31865_status_t MAX31865_WriteRegister8(MAX31865_Handle_t *hmax, uint8_t reg, uint8_t data) {
 8003a1a:	b590      	push	{r4, r7, lr}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
 8003a26:	4613      	mov	r3, r2
 8003a28:	70bb      	strb	r3, [r7, #2]
    if (hmax == NULL || hmax->platform.spi_write_read == NULL) {
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <MAX31865_WriteRegister8+0x1e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <MAX31865_WriteRegister8+0x22>
        return MAX31865_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e032      	b.n	8003aa2 <MAX31865_WriteRegister8+0x88>

    uint8_t tx_data[2];
    uint8_t rx_data[2];
    max31865_status_t status;

    tx_data[0] = reg | 0x80; // Set MSB for write
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	733b      	strb	r3, [r7, #12]
    tx_data[1] = data;
 8003a46:	78bb      	ldrb	r3, [r7, #2]
 8003a48:	737b      	strb	r3, [r7, #13]

    if (hmax->platform.cs_low) {
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <MAX31865_WriteRegister8+0x40>
        hmax->platform.cs_low(hmax);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
    }

    if (hmax->platform.delay_ms) {
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <MAX31865_WriteRegister8+0x50>
        hmax->platform.delay_ms(1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2001      	movs	r0, #1
 8003a68:	4798      	blx	r3
    }

    status = hmax->platform.spi_write_read(hmax, tx_data, rx_data, 2);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681c      	ldr	r4, [r3, #0]
 8003a6e:	f107 0208 	add.w	r2, r7, #8
 8003a72:	f107 010c 	add.w	r1, r7, #12
 8003a76:	2302      	movs	r3, #2
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	47a0      	blx	r4
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	73fb      	strb	r3, [r7, #15]

    if (hmax->platform.delay_ms) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <MAX31865_WriteRegister8+0x76>
        hmax->platform.delay_ms(1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	4798      	blx	r3
    }

    if (hmax->platform.cs_high) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <MAX31865_WriteRegister8+0x86>
        hmax->platform.cs_high(hmax);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
    }

    return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd90      	pop	{r4, r7, pc}

08003aaa <MAX31865_SetWires>:

/**
 * @brief Set wire configuration
 */
max31865_status_t MAX31865_SetWires(MAX31865_Handle_t *hmax, max31865_numwires_t wires) {
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
    if (hmax == NULL) return MAX31865_ERROR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <MAX31865_SetWires+0x16>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e02b      	b.n	8003b18 <MAX31865_SetWires+0x6e>

    uint8_t config = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8003ac4:	f107 030f 	add.w	r3, r7, #15
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2100      	movs	r1, #0
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fef3 	bl	80038b8 <MAX31865_ReadRegister8>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MAX31865_SetWires+0x32>
        return MAX31865_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e01d      	b.n	8003b18 <MAX31865_SetWires+0x6e>
    }

    if (wires == MAX31865_3WIRE) {
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d105      	bne.n	8003aee <MAX31865_SetWires+0x44>
        config |= MAX31865_CONFIG_3WIRE;
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	f043 0310 	orr.w	r3, r3, #16
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	e004      	b.n	8003af8 <MAX31865_SetWires+0x4e>
    } else {
        config &= ~MAX31865_CONFIG_3WIRE;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	f023 0310 	bic.w	r3, r3, #16
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	73fb      	strb	r3, [r7, #15]
    }

    if (MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config) != MAX31865_OK) {
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	461a      	mov	r2, r3
 8003afc:	2100      	movs	r1, #0
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff8b 	bl	8003a1a <MAX31865_WriteRegister8>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MAX31865_SetWires+0x64>
        return MAX31865_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e004      	b.n	8003b18 <MAX31865_SetWires+0x6e>
    }

    hmax->wires = wires;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    return MAX31865_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <MAX31865_SetFilter>:

/**
 * @brief Set noise filter
 */
max31865_status_t MAX31865_SetFilter(MAX31865_Handle_t *hmax, max31865_filter_t filter) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
    if (hmax == NULL) return MAX31865_ERROR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <MAX31865_SetFilter+0x16>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e02b      	b.n	8003b8e <MAX31865_SetFilter+0x6e>

    uint8_t config = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8003b3a:	f107 030f 	add.w	r3, r7, #15
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2100      	movs	r1, #0
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff feb8 	bl	80038b8 <MAX31865_ReadRegister8>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <MAX31865_SetFilter+0x32>
        return MAX31865_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e01d      	b.n	8003b8e <MAX31865_SetFilter+0x6e>
    }

    if (filter == MAX31865_FILTER_50HZ) {
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <MAX31865_SetFilter+0x44>
        config |= MAX31865_CONFIG_FILT50HZ;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	e004      	b.n	8003b6e <MAX31865_SetFilter+0x4e>
    } else {
        config &= ~MAX31865_CONFIG_FILT50HZ;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	73fb      	strb	r3, [r7, #15]
    }

    if (MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config) != MAX31865_OK) {
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	461a      	mov	r2, r3
 8003b72:	2100      	movs	r1, #0
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff50 	bl	8003a1a <MAX31865_WriteRegister8>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MAX31865_SetFilter+0x64>
        return MAX31865_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e004      	b.n	8003b8e <MAX31865_SetFilter+0x6e>
    }

    hmax->filter = filter;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    return MAX31865_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <MAX31865_EnableBias>:

/**
 * @brief Enable/disable bias voltage
 */
max31865_status_t MAX31865_EnableBias(MAX31865_Handle_t *hmax, bool enable) {
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	70fb      	strb	r3, [r7, #3]
    if (hmax == NULL) return MAX31865_ERROR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <MAX31865_EnableBias+0x16>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e022      	b.n	8003bf2 <MAX31865_EnableBias+0x5c>

    uint8_t config = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8003bb0:	f107 030f 	add.w	r3, r7, #15
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff fe7d 	bl	80038b8 <MAX31865_ReadRegister8>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MAX31865_EnableBias+0x32>
        return MAX31865_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e014      	b.n	8003bf2 <MAX31865_EnableBias+0x5c>
    }

    if (enable) {
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <MAX31865_EnableBias+0x44>
        config |= MAX31865_CONFIG_BIAS;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	e004      	b.n	8003be4 <MAX31865_EnableBias+0x4e>
    } else {
        config &= ~MAX31865_CONFIG_BIAS;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	73fb      	strb	r3, [r7, #15]
    }

    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	461a      	mov	r2, r3
 8003be8:	2100      	movs	r1, #0
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ff15 	bl	8003a1a <MAX31865_WriteRegister8>
 8003bf0:	4603      	mov	r3, r0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <MAX31865_EnableAutoConvert>:

/**
 * @brief Enable/disable auto conversion mode
 */
max31865_status_t MAX31865_EnableAutoConvert(MAX31865_Handle_t *hmax, bool enable) {
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	70fb      	strb	r3, [r7, #3]
    if (hmax == NULL) return MAX31865_ERROR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <MAX31865_EnableAutoConvert+0x16>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e022      	b.n	8003c56 <MAX31865_EnableAutoConvert+0x5c>

    uint8_t config = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8003c14:	f107 030f 	add.w	r3, r7, #15
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff fe4b 	bl	80038b8 <MAX31865_ReadRegister8>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MAX31865_EnableAutoConvert+0x32>
        return MAX31865_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e014      	b.n	8003c56 <MAX31865_EnableAutoConvert+0x5c>
    }

    if (enable) {
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <MAX31865_EnableAutoConvert+0x44>
        config |= MAX31865_CONFIG_MODEAUTO;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e004      	b.n	8003c48 <MAX31865_EnableAutoConvert+0x4e>
    } else {
        config &= ~MAX31865_CONFIG_MODEAUTO;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	73fb      	strb	r3, [r7, #15]
    }

    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fee3 	bl	8003a1a <MAX31865_WriteRegister8>
 8003c54:	4603      	mov	r3, r0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <MAX31865_ClearFault>:

/**
 * @brief Clear fault status
 */
max31865_status_t MAX31865_ClearFault(MAX31865_Handle_t *hmax) {
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
    if (hmax == NULL) return MAX31865_ERROR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <MAX31865_ClearFault+0x12>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e01e      	b.n	8003cae <MAX31865_ClearFault+0x50>

    uint8_t config = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8003c74:	f107 030f 	add.w	r3, r7, #15
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fe1b 	bl	80038b8 <MAX31865_ReadRegister8>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MAX31865_ClearFault+0x2e>
        return MAX31865_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e010      	b.n	8003cae <MAX31865_ClearFault+0x50>
    }

    config &= ~0x2C; // Clear fault detection bits
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	f023 032c 	bic.w	r3, r3, #44	@ 0x2c
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	73fb      	strb	r3, [r7, #15]
    config |= MAX31865_CONFIG_FAULTSTAT;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	73fb      	strb	r3, [r7, #15]

    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff feb7 	bl	8003a1a <MAX31865_WriteRegister8>
 8003cac:	4603      	mov	r3, r0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <MAX31865_SetThresholds>:

/**
 * @brief Set fault thresholds
 */
max31865_status_t MAX31865_SetThresholds(MAX31865_Handle_t *hmax, uint16_t lower, uint16_t upper) {
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	807b      	strh	r3, [r7, #2]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	803b      	strh	r3, [r7, #0]
    if (hmax == NULL) return MAX31865_ERROR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <MAX31865_SetThresholds+0x1a>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e034      	b.n	8003d3a <MAX31865_SetThresholds+0x84>

    /* Set lower threshold */
    if (MAX31865_WriteRegister8(hmax, MAX31865_LFAULT_MSB_REG, (lower >> 8) & 0xFF) != MAX31865_OK) {
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2105      	movs	r1, #5
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff fe9c 	bl	8003a1a <MAX31865_WriteRegister8>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MAX31865_SetThresholds+0x36>
        return MAX31865_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e026      	b.n	8003d3a <MAX31865_SetThresholds+0x84>
    }
    if (MAX31865_WriteRegister8(hmax, MAX31865_LFAULT_LSB_REG, lower & 0xFF) != MAX31865_OK) {
 8003cec:	887b      	ldrh	r3, [r7, #2]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2106      	movs	r1, #6
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff fe90 	bl	8003a1a <MAX31865_WriteRegister8>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MAX31865_SetThresholds+0x4e>
        return MAX31865_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e01a      	b.n	8003d3a <MAX31865_SetThresholds+0x84>
    }

    /* Set upper threshold */
    if (MAX31865_WriteRegister8(hmax, MAX31865_HFAULT_MSB_REG, (upper >> 8) & 0xFF) != MAX31865_OK) {
 8003d04:	883b      	ldrh	r3, [r7, #0]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2103      	movs	r1, #3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fe82 	bl	8003a1a <MAX31865_WriteRegister8>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MAX31865_SetThresholds+0x6a>
        return MAX31865_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e00c      	b.n	8003d3a <MAX31865_SetThresholds+0x84>
    }
    if (MAX31865_WriteRegister8(hmax, MAX31865_HFAULT_LSB_REG, upper & 0xFF) != MAX31865_OK) {
 8003d20:	883b      	ldrh	r3, [r7, #0]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	2104      	movs	r1, #4
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff fe76 	bl	8003a1a <MAX31865_WriteRegister8>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MAX31865_SetThresholds+0x82>
        return MAX31865_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <MAX31865_SetThresholds+0x84>
    }

    return MAX31865_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <MAX31865_ReadRTD>:

/**
 * @brief Read RTD raw value (one-shot mode)
 */
max31865_status_t MAX31865_ReadRTD(MAX31865_Handle_t *hmax, uint16_t *rtd_raw) {
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
    if (hmax == NULL || rtd_raw == NULL) return MAX31865_ERROR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <MAX31865_ReadRTD+0x16>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <MAX31865_ReadRTD+0x1a>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e068      	b.n	8003e2e <MAX31865_ReadRTD+0xec>

    /* Clear faults */
    MAX31865_ClearFault(hmax);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff ff7e 	bl	8003c5e <MAX31865_ClearFault>

    /* Enable bias */
    if (MAX31865_EnableBias(hmax, true) != MAX31865_OK) {
 8003d62:	2101      	movs	r1, #1
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff16 	bl	8003b96 <MAX31865_EnableBias>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MAX31865_ReadRTD+0x32>
        return MAX31865_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e05c      	b.n	8003e2e <MAX31865_ReadRTD+0xec>
    }

    if (hmax->platform.delay_ms) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <MAX31865_ReadRTD+0x42>
        hmax->platform.delay_ms(10); // Wait for bias to stabilize
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	200a      	movs	r0, #10
 8003d82:	4798      	blx	r3
    }

    /* Start one-shot conversion */
    uint8_t config = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	73fb      	strb	r3, [r7, #15]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8003d88:	f107 030f 	add.w	r3, r7, #15
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2100      	movs	r1, #0
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fd91 	bl	80038b8 <MAX31865_ReadRegister8>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MAX31865_ReadRTD+0x5e>
        return MAX31865_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e046      	b.n	8003e2e <MAX31865_ReadRTD+0xec>
    }

    config |= MAX31865_CONFIG_1SHOT;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	f043 0320 	orr.w	r3, r3, #32
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	73fb      	strb	r3, [r7, #15]
    if (MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config) != MAX31865_OK) {
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	461a      	mov	r2, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fe32 	bl	8003a1a <MAX31865_WriteRegister8>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <MAX31865_ReadRTD+0x7e>
        return MAX31865_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e036      	b.n	8003e2e <MAX31865_ReadRTD+0xec>
    }

    /* Wait for conversion */
    if (MAX31865_WaitForConversion(hmax) != MAX31865_OK) {
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fcdb 	bl	800377c <MAX31865_WaitForConversion>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MAX31865_ReadRTD+0x8e>
        return MAX31865_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e02e      	b.n	8003e2e <MAX31865_ReadRTD+0xec>
    }

    /* Read RTD register */
    uint16_t rtd_reg = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	81bb      	strh	r3, [r7, #12]
    if (MAX31865_ReadRegister16(hmax, MAX31865_RTD_MSB_REG, &rtd_reg) != MAX31865_OK) {
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2101      	movs	r1, #1
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fdbd 	bl	800395c <MAX31865_ReadRegister16>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MAX31865_ReadRTD+0xaa>
        return MAX31865_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e020      	b.n	8003e2e <MAX31865_ReadRTD+0xec>
    }

    /* Disable bias to reduce self-heating */
    MAX31865_EnableBias(hmax, false);
 8003dec:	2100      	movs	r1, #0
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff fed1 	bl	8003b96 <MAX31865_EnableBias>

    /* Remove fault bit (LSB) and store result */
    *rtd_raw = rtd_reg >> 1;
 8003df4:	89bb      	ldrh	r3, [r7, #12]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	801a      	strh	r2, [r3, #0]
    hmax->last_rtd_raw = *rtd_raw;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	881a      	ldrh	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	859a      	strh	r2, [r3, #44]	@ 0x2c

    /* Check for fault in LSB */
    if (rtd_reg & 0x01) {
 8003e06:	89bb      	ldrh	r3, [r7, #12]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <MAX31865_ReadRTD+0xea>
        uint8_t fault_status = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	72fb      	strb	r3, [r7, #11]
        MAX31865_ReadFault(hmax, &fault_status);
 8003e14:	f107 030b 	add.w	r3, r7, #11
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f80b 	bl	8003e36 <MAX31865_ReadFault>
        hmax->last_fault = fault_status;
 8003e20:	7afa      	ldrb	r2, [r7, #11]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        return MAX31865_FAULT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e000      	b.n	8003e2e <MAX31865_ReadRTD+0xec>
    }

    return MAX31865_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <MAX31865_ReadFault>:

/**
 * @brief Read fault status
 */
max31865_status_t MAX31865_ReadFault(MAX31865_Handle_t *hmax, uint8_t *fault_status) {
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
    if (hmax == NULL || fault_status == NULL) return MAX31865_ERROR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <MAX31865_ReadFault+0x16>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <MAX31865_ReadFault+0x1a>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e005      	b.n	8003e5c <MAX31865_ReadFault+0x26>

    return MAX31865_ReadRegister8(hmax, MAX31865_FAULT_STATUS_REG, fault_status);
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	2107      	movs	r1, #7
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fd2f 	bl	80038b8 <MAX31865_ReadRegister8>
 8003e5a:	4603      	mov	r3, r0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <MAX31865_ReadTemperature>:

/**
 * @brief Read temperature
 */
max31865_status_t MAX31865_ReadTemperature(MAX31865_Handle_t *hmax, float *temperature) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    if (hmax == NULL || temperature == NULL) return MAX31865_ERROR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <MAX31865_ReadTemperature+0x16>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <MAX31865_ReadTemperature+0x1a>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e024      	b.n	8003ec8 <MAX31865_ReadTemperature+0x64>

    uint16_t rtd_raw = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	81fb      	strh	r3, [r7, #14]
    max31865_status_t status = MAX31865_ReadRTD(hmax, &rtd_raw);
 8003e82:	f107 030e 	add.w	r3, r7, #14
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ff5a 	bl	8003d42 <MAX31865_ReadRTD>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]

    if (status != MAX31865_OK) {
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MAX31865_ReadTemperature+0x38>
        return status;
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	e015      	b.n	8003ec8 <MAX31865_ReadTemperature+0x64>
    }

    /* Convert to resistance */
    float resistance = MAX31865_RTDtoResistance(rtd_raw, hmax->rref);
 8003e9c:	89fa      	ldrh	r2, [r7, #14]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f000 f83e 	bl	8003f26 <MAX31865_RTDtoResistance>
 8003eaa:	6138      	str	r0, [r7, #16]

    /* Convert to temperature */
    *temperature = MAX31865_ResistanceToTemperature(resistance, hmax->rnominal);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6938      	ldr	r0, [r7, #16]
 8003eb4:	f000 f852 	bl	8003f5c <MAX31865_ResistanceToTemperature>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	601a      	str	r2, [r3, #0]
    hmax->last_temperature = *temperature;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	629a      	str	r2, [r3, #40]	@ 0x28

    return MAX31865_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <MAX31865_ReadResistance>:

/**
 * @brief Read resistance
 */
max31865_status_t MAX31865_ReadResistance(MAX31865_Handle_t *hmax, float *resistance) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
    if (hmax == NULL || resistance == NULL) return MAX31865_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <MAX31865_ReadResistance+0x16>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <MAX31865_ReadResistance+0x1a>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e019      	b.n	8003f1e <MAX31865_ReadResistance+0x4e>

    uint16_t rtd_raw = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	81bb      	strh	r3, [r7, #12]
    max31865_status_t status = MAX31865_ReadRTD(hmax, &rtd_raw);
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ff24 	bl	8003d42 <MAX31865_ReadRTD>
 8003efa:	4603      	mov	r3, r0
 8003efc:	73fb      	strb	r3, [r7, #15]

    if (status != MAX31865_OK) {
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MAX31865_ReadResistance+0x38>
        return status;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	e00a      	b.n	8003f1e <MAX31865_ReadResistance+0x4e>
    }

    *resistance = MAX31865_RTDtoResistance(rtd_raw, hmax->rref);
 8003f08:	89ba      	ldrh	r2, [r7, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f000 f808 	bl	8003f26 <MAX31865_RTDtoResistance>
 8003f16:	4602      	mov	r2, r0
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	601a      	str	r2, [r3, #0]

    return MAX31865_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <MAX31865_RTDtoResistance>:

/**
 * @brief Convert RTD raw value to resistance
 */
float MAX31865_RTDtoResistance(uint16_t rtd_raw, float rref) {
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	6039      	str	r1, [r7, #0]
 8003f30:	80fb      	strh	r3, [r7, #6]
    return ((float)rtd_raw * rref) / MAX31865_ADC_MAX;
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fe5d 	bl	8000bf4 <__aeabi_ui2f>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	6839      	ldr	r1, [r7, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc feb0 	bl	8000ca4 <__aeabi_fmul>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc ff5e 	bl	8000e0c <__aeabi_fdiv>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <MAX31865_ResistanceToTemperature>:

/**
 * @brief Convert resistance to temperature using Callendar-Van Dusen equation
 */
float MAX31865_ResistanceToTemperature(float resistance, float rnominal) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
    float Z1, Z2, Z3, Z4, temp;

    /* Callendar-Van Dusen equation for positive temperatures */
    Z1 = -RTD_A;
 8003f66:	4b5c      	ldr	r3, [pc, #368]	@ (80040d8 <MAX31865_ResistanceToTemperature+0x17c>)
 8003f68:	61fb      	str	r3, [r7, #28]
    Z2 = RTD_A * RTD_A - (4.0f * RTD_B);
 8003f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80040dc <MAX31865_ResistanceToTemperature+0x180>)
 8003f6c:	61bb      	str	r3, [r7, #24]
    Z3 = (4.0f * RTD_B) / rnominal;
 8003f6e:	6839      	ldr	r1, [r7, #0]
 8003f70:	485b      	ldr	r0, [pc, #364]	@ (80040e0 <MAX31865_ResistanceToTemperature+0x184>)
 8003f72:	f7fc ff4b 	bl	8000e0c <__aeabi_fdiv>
 8003f76:	4603      	mov	r3, r0
 8003f78:	617b      	str	r3, [r7, #20]
    Z4 = 2.0f * RTD_B;
 8003f7a:	4b5a      	ldr	r3, [pc, #360]	@ (80040e4 <MAX31865_ResistanceToTemperature+0x188>)
 8003f7c:	613b      	str	r3, [r7, #16]

    temp = Z2 + (Z3 * resistance);
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	6978      	ldr	r0, [r7, #20]
 8003f82:	f7fc fe8f 	bl	8000ca4 <__aeabi_fmul>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4619      	mov	r1, r3
 8003f8a:	69b8      	ldr	r0, [r7, #24]
 8003f8c:	f7fc fd82 	bl	8000a94 <__addsf3>
 8003f90:	4603      	mov	r3, r0
 8003f92:	60fb      	str	r3, [r7, #12]
    temp = (sqrtf(temp) + Z1) / Z4;
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f002 fe6d 	bl	8006c74 <sqrtf>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	69f9      	ldr	r1, [r7, #28]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fc fd78 	bl	8000a94 <__addsf3>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	6939      	ldr	r1, [r7, #16]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fc ff2f 	bl	8000e0c <__aeabi_fdiv>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	60fb      	str	r3, [r7, #12]

    if (temp >= 0.0f) {
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7fd f826 	bl	8001008 <__aeabi_fcmpge>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <MAX31865_ResistanceToTemperature+0x6a>
        return temp;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	e084      	b.n	80040d0 <MAX31865_ResistanceToTemperature+0x174>
    }

    /* For negative temperatures */
    float rpoly = resistance / rnominal * 100.0f; // Normalize to PT100
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fc ff1f 	bl	8000e0c <__aeabi_fdiv>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4945      	ldr	r1, [pc, #276]	@ (80040e8 <MAX31865_ResistanceToTemperature+0x18c>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc fe66 	bl	8000ca4 <__aeabi_fmul>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	60bb      	str	r3, [r7, #8]

    temp = -242.02f;
 8003fdc:	4b43      	ldr	r3, [pc, #268]	@ (80040ec <MAX31865_ResistanceToTemperature+0x190>)
 8003fde:	60fb      	str	r3, [r7, #12]
    temp += 2.2228f * rpoly;
 8003fe0:	4943      	ldr	r1, [pc, #268]	@ (80040f0 <MAX31865_ResistanceToTemperature+0x194>)
 8003fe2:	68b8      	ldr	r0, [r7, #8]
 8003fe4:	f7fc fe5e 	bl	8000ca4 <__aeabi_fmul>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7fc fd51 	bl	8000a94 <__addsf3>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	60fb      	str	r3, [r7, #12]
    rpoly *= (resistance / rnominal * 100.0f);
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fc ff07 	bl	8000e0c <__aeabi_fdiv>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4939      	ldr	r1, [pc, #228]	@ (80040e8 <MAX31865_ResistanceToTemperature+0x18c>)
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc fe4e 	bl	8000ca4 <__aeabi_fmul>
 8004008:	4603      	mov	r3, r0
 800400a:	4619      	mov	r1, r3
 800400c:	68b8      	ldr	r0, [r7, #8]
 800400e:	f7fc fe49 	bl	8000ca4 <__aeabi_fmul>
 8004012:	4603      	mov	r3, r0
 8004014:	60bb      	str	r3, [r7, #8]
    temp += 2.5859e-3f * rpoly;
 8004016:	4937      	ldr	r1, [pc, #220]	@ (80040f4 <MAX31865_ResistanceToTemperature+0x198>)
 8004018:	68b8      	ldr	r0, [r7, #8]
 800401a:	f7fc fe43 	bl	8000ca4 <__aeabi_fmul>
 800401e:	4603      	mov	r3, r0
 8004020:	4619      	mov	r1, r3
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f7fc fd36 	bl	8000a94 <__addsf3>
 8004028:	4603      	mov	r3, r0
 800402a:	60fb      	str	r3, [r7, #12]
    rpoly *= (resistance / rnominal * 100.0f);
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fc feec 	bl	8000e0c <__aeabi_fdiv>
 8004034:	4603      	mov	r3, r0
 8004036:	492c      	ldr	r1, [pc, #176]	@ (80040e8 <MAX31865_ResistanceToTemperature+0x18c>)
 8004038:	4618      	mov	r0, r3
 800403a:	f7fc fe33 	bl	8000ca4 <__aeabi_fmul>
 800403e:	4603      	mov	r3, r0
 8004040:	4619      	mov	r1, r3
 8004042:	68b8      	ldr	r0, [r7, #8]
 8004044:	f7fc fe2e 	bl	8000ca4 <__aeabi_fmul>
 8004048:	4603      	mov	r3, r0
 800404a:	60bb      	str	r3, [r7, #8]
    temp -= 4.8260e-6f * rpoly;
 800404c:	492a      	ldr	r1, [pc, #168]	@ (80040f8 <MAX31865_ResistanceToTemperature+0x19c>)
 800404e:	68b8      	ldr	r0, [r7, #8]
 8004050:	f7fc fe28 	bl	8000ca4 <__aeabi_fmul>
 8004054:	4603      	mov	r3, r0
 8004056:	4619      	mov	r1, r3
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f7fc fd19 	bl	8000a90 <__aeabi_fsub>
 800405e:	4603      	mov	r3, r0
 8004060:	60fb      	str	r3, [r7, #12]
    rpoly *= (resistance / rnominal * 100.0f);
 8004062:	6839      	ldr	r1, [r7, #0]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7fc fed1 	bl	8000e0c <__aeabi_fdiv>
 800406a:	4603      	mov	r3, r0
 800406c:	491e      	ldr	r1, [pc, #120]	@ (80040e8 <MAX31865_ResistanceToTemperature+0x18c>)
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc fe18 	bl	8000ca4 <__aeabi_fmul>
 8004074:	4603      	mov	r3, r0
 8004076:	4619      	mov	r1, r3
 8004078:	68b8      	ldr	r0, [r7, #8]
 800407a:	f7fc fe13 	bl	8000ca4 <__aeabi_fmul>
 800407e:	4603      	mov	r3, r0
 8004080:	60bb      	str	r3, [r7, #8]
    temp -= 2.8183e-8f * rpoly;
 8004082:	491e      	ldr	r1, [pc, #120]	@ (80040fc <MAX31865_ResistanceToTemperature+0x1a0>)
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	f7fc fe0d 	bl	8000ca4 <__aeabi_fmul>
 800408a:	4603      	mov	r3, r0
 800408c:	4619      	mov	r1, r3
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7fc fcfe 	bl	8000a90 <__aeabi_fsub>
 8004094:	4603      	mov	r3, r0
 8004096:	60fb      	str	r3, [r7, #12]
    rpoly *= (resistance / rnominal * 100.0f);
 8004098:	6839      	ldr	r1, [r7, #0]
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc feb6 	bl	8000e0c <__aeabi_fdiv>
 80040a0:	4603      	mov	r3, r0
 80040a2:	4911      	ldr	r1, [pc, #68]	@ (80040e8 <MAX31865_ResistanceToTemperature+0x18c>)
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fc fdfd 	bl	8000ca4 <__aeabi_fmul>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4619      	mov	r1, r3
 80040ae:	68b8      	ldr	r0, [r7, #8]
 80040b0:	f7fc fdf8 	bl	8000ca4 <__aeabi_fmul>
 80040b4:	4603      	mov	r3, r0
 80040b6:	60bb      	str	r3, [r7, #8]
    temp += 1.5243e-10f * rpoly;
 80040b8:	4911      	ldr	r1, [pc, #68]	@ (8004100 <MAX31865_ResistanceToTemperature+0x1a4>)
 80040ba:	68b8      	ldr	r0, [r7, #8]
 80040bc:	f7fc fdf2 	bl	8000ca4 <__aeabi_fmul>
 80040c0:	4603      	mov	r3, r0
 80040c2:	4619      	mov	r1, r3
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7fc fce5 	bl	8000a94 <__addsf3>
 80040ca:	4603      	mov	r3, r0
 80040cc:	60fb      	str	r3, [r7, #12]

    return temp;
 80040ce:	68fb      	ldr	r3, [r7, #12]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	bb801132 	.word	0xbb801132
 80040dc:	37938316 	.word	0x37938316
 80040e0:	b61b057f 	.word	0xb61b057f
 80040e4:	b59b057f 	.word	0xb59b057f
 80040e8:	42c80000 	.word	0x42c80000
 80040ec:	c372051f 	.word	0xc372051f
 80040f0:	400e425b 	.word	0x400e425b
 80040f4:	3b297834 	.word	0x3b297834
 80040f8:	36a1ef06 	.word	0x36a1ef06
 80040fc:	32f21713 	.word	0x32f21713
 8004100:	2f27993b 	.word	0x2f27993b

08004104 <MAX31865_GetFaultString>:

/**
 * @brief Get fault status string
 */
const char* MAX31865_GetFaultString(uint8_t fault_bits) {
 8004104:	b5b0      	push	{r4, r5, r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	71fb      	strb	r3, [r7, #7]
    static char fault_str[256];
    fault_str[0] = '\0';
 800410e:	4b51      	ldr	r3, [pc, #324]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]

    if (fault_bits == 0) {
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <MAX31865_GetFaultString+0x1a>
        return "No faults";
 800411a:	4b4f      	ldr	r3, [pc, #316]	@ (8004258 <MAX31865_GetFaultString+0x154>)
 800411c:	e096      	b.n	800424c <MAX31865_GetFaultString+0x148>
    }

    if (fault_bits & MAX31865_FAULT_HIGHTHRESH) {
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	2b00      	cmp	r3, #0
 8004124:	da12      	bge.n	800414c <MAX31865_GetFaultString+0x48>
        strcat(fault_str, "RTD High Threshold; ");
 8004126:	484b      	ldr	r0, [pc, #300]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 8004128:	f7fc f812 	bl	8000150 <strlen>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	4b48      	ldr	r3, [pc, #288]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 8004132:	4413      	add	r3, r2
 8004134:	4a49      	ldr	r2, [pc, #292]	@ (800425c <MAX31865_GetFaultString+0x158>)
 8004136:	461d      	mov	r5, r3
 8004138:	4614      	mov	r4, r2
 800413a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413c:	6028      	str	r0, [r5, #0]
 800413e:	6069      	str	r1, [r5, #4]
 8004140:	60aa      	str	r2, [r5, #8]
 8004142:	60eb      	str	r3, [r5, #12]
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	6128      	str	r0, [r5, #16]
 8004148:	7923      	ldrb	r3, [r4, #4]
 800414a:	752b      	strb	r3, [r5, #20]
    }
    if (fault_bits & MAX31865_FAULT_LOWTHRESH) {
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <MAX31865_GetFaultString+0x74>
        strcat(fault_str, "RTD Low Threshold; ");
 8004156:	483f      	ldr	r0, [pc, #252]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 8004158:	f7fb fffa 	bl	8000150 <strlen>
 800415c:	4603      	mov	r3, r0
 800415e:	461a      	mov	r2, r3
 8004160:	4b3c      	ldr	r3, [pc, #240]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 8004162:	4413      	add	r3, r2
 8004164:	4a3e      	ldr	r2, [pc, #248]	@ (8004260 <MAX31865_GetFaultString+0x15c>)
 8004166:	461d      	mov	r5, r3
 8004168:	4614      	mov	r4, r2
 800416a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800416c:	6028      	str	r0, [r5, #0]
 800416e:	6069      	str	r1, [r5, #4]
 8004170:	60aa      	str	r2, [r5, #8]
 8004172:	60eb      	str	r3, [r5, #12]
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	6128      	str	r0, [r5, #16]
    }
    if (fault_bits & MAX31865_FAULT_REFINLOW) {
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d015      	beq.n	80041ae <MAX31865_GetFaultString+0xaa>
        strcat(fault_str, "REFIN- > 0.85 x BIAS; ");
 8004182:	4834      	ldr	r0, [pc, #208]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 8004184:	f7fb ffe4 	bl	8000150 <strlen>
 8004188:	4603      	mov	r3, r0
 800418a:	461a      	mov	r2, r3
 800418c:	4b31      	ldr	r3, [pc, #196]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 800418e:	4413      	add	r3, r2
 8004190:	4a34      	ldr	r2, [pc, #208]	@ (8004264 <MAX31865_GetFaultString+0x160>)
 8004192:	461c      	mov	r4, r3
 8004194:	4615      	mov	r5, r2
 8004196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004198:	6020      	str	r0, [r4, #0]
 800419a:	6061      	str	r1, [r4, #4]
 800419c:	60a2      	str	r2, [r4, #8]
 800419e:	60e3      	str	r3, [r4, #12]
 80041a0:	6828      	ldr	r0, [r5, #0]
 80041a2:	6120      	str	r0, [r4, #16]
 80041a4:	88ab      	ldrh	r3, [r5, #4]
 80041a6:	79aa      	ldrb	r2, [r5, #6]
 80041a8:	82a3      	strh	r3, [r4, #20]
 80041aa:	4613      	mov	r3, r2
 80041ac:	75a3      	strb	r3, [r4, #22]
    }
    if (fault_bits & MAX31865_FAULT_REFINHIGH) {
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <MAX31865_GetFaultString+0xe0>
        strcat(fault_str, "REFIN- < 0.85 x BIAS; ");
 80041b8:	4826      	ldr	r0, [pc, #152]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 80041ba:	f7fb ffc9 	bl	8000150 <strlen>
 80041be:	4603      	mov	r3, r0
 80041c0:	461a      	mov	r2, r3
 80041c2:	4b24      	ldr	r3, [pc, #144]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 80041c4:	4413      	add	r3, r2
 80041c6:	4a28      	ldr	r2, [pc, #160]	@ (8004268 <MAX31865_GetFaultString+0x164>)
 80041c8:	461c      	mov	r4, r3
 80041ca:	4615      	mov	r5, r2
 80041cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ce:	6020      	str	r0, [r4, #0]
 80041d0:	6061      	str	r1, [r4, #4]
 80041d2:	60a2      	str	r2, [r4, #8]
 80041d4:	60e3      	str	r3, [r4, #12]
 80041d6:	6828      	ldr	r0, [r5, #0]
 80041d8:	6120      	str	r0, [r4, #16]
 80041da:	88ab      	ldrh	r3, [r5, #4]
 80041dc:	79aa      	ldrb	r2, [r5, #6]
 80041de:	82a3      	strh	r3, [r4, #20]
 80041e0:	4613      	mov	r3, r2
 80041e2:	75a3      	strb	r3, [r4, #22]
    }
    if (fault_bits & MAX31865_FAULT_RTDINLOW) {
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d015      	beq.n	800421a <MAX31865_GetFaultString+0x116>
        strcat(fault_str, "RTDIN- < 0.85 x BIAS; ");
 80041ee:	4819      	ldr	r0, [pc, #100]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 80041f0:	f7fb ffae 	bl	8000150 <strlen>
 80041f4:	4603      	mov	r3, r0
 80041f6:	461a      	mov	r2, r3
 80041f8:	4b16      	ldr	r3, [pc, #88]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 80041fa:	4413      	add	r3, r2
 80041fc:	4a1b      	ldr	r2, [pc, #108]	@ (800426c <MAX31865_GetFaultString+0x168>)
 80041fe:	461c      	mov	r4, r3
 8004200:	4615      	mov	r5, r2
 8004202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004204:	6020      	str	r0, [r4, #0]
 8004206:	6061      	str	r1, [r4, #4]
 8004208:	60a2      	str	r2, [r4, #8]
 800420a:	60e3      	str	r3, [r4, #12]
 800420c:	6828      	ldr	r0, [r5, #0]
 800420e:	6120      	str	r0, [r4, #16]
 8004210:	88ab      	ldrh	r3, [r5, #4]
 8004212:	79aa      	ldrb	r2, [r5, #6]
 8004214:	82a3      	strh	r3, [r4, #20]
 8004216:	4613      	mov	r3, r2
 8004218:	75a3      	strb	r3, [r4, #22]
    }
    if (fault_bits & MAX31865_FAULT_OVUV) {
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <MAX31865_GetFaultString+0x146>
        strcat(fault_str, "Over/Under Voltage; ");
 8004224:	480b      	ldr	r0, [pc, #44]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 8004226:	f7fb ff93 	bl	8000150 <strlen>
 800422a:	4603      	mov	r3, r0
 800422c:	461a      	mov	r2, r3
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <MAX31865_GetFaultString+0x150>)
 8004230:	4413      	add	r3, r2
 8004232:	4a0f      	ldr	r2, [pc, #60]	@ (8004270 <MAX31865_GetFaultString+0x16c>)
 8004234:	461d      	mov	r5, r3
 8004236:	4614      	mov	r4, r2
 8004238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800423a:	6028      	str	r0, [r5, #0]
 800423c:	6069      	str	r1, [r5, #4]
 800423e:	60aa      	str	r2, [r5, #8]
 8004240:	60eb      	str	r3, [r5, #12]
 8004242:	6820      	ldr	r0, [r4, #0]
 8004244:	6128      	str	r0, [r5, #16]
 8004246:	7923      	ldrb	r3, [r4, #4]
 8004248:	752b      	strb	r3, [r5, #20]
    }

    return fault_str;
 800424a:	4b02      	ldr	r3, [pc, #8]	@ (8004254 <MAX31865_GetFaultString+0x150>)
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bdb0      	pop	{r4, r5, r7, pc}
 8004254:	200002c8 	.word	0x200002c8
 8004258:	080070f0 	.word	0x080070f0
 800425c:	080070fc 	.word	0x080070fc
 8004260:	08007114 	.word	0x08007114
 8004264:	08007128 	.word	0x08007128
 8004268:	08007140 	.word	0x08007140
 800426c:	08007158 	.word	0x08007158
 8004270:	08007170 	.word	0x08007170

08004274 <__cvt>:
 8004274:	2b00      	cmp	r3, #0
 8004276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800427a:	461d      	mov	r5, r3
 800427c:	bfbb      	ittet	lt
 800427e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004282:	461d      	movlt	r5, r3
 8004284:	2300      	movge	r3, #0
 8004286:	232d      	movlt	r3, #45	@ 0x2d
 8004288:	b088      	sub	sp, #32
 800428a:	4614      	mov	r4, r2
 800428c:	bfb8      	it	lt
 800428e:	4614      	movlt	r4, r2
 8004290:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004292:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004294:	7013      	strb	r3, [r2, #0]
 8004296:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004298:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800429c:	f023 0820 	bic.w	r8, r3, #32
 80042a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042a4:	d005      	beq.n	80042b2 <__cvt+0x3e>
 80042a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80042aa:	d100      	bne.n	80042ae <__cvt+0x3a>
 80042ac:	3601      	adds	r6, #1
 80042ae:	2302      	movs	r3, #2
 80042b0:	e000      	b.n	80042b4 <__cvt+0x40>
 80042b2:	2303      	movs	r3, #3
 80042b4:	aa07      	add	r2, sp, #28
 80042b6:	9204      	str	r2, [sp, #16]
 80042b8:	aa06      	add	r2, sp, #24
 80042ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80042be:	e9cd 3600 	strd	r3, r6, [sp]
 80042c2:	4622      	mov	r2, r4
 80042c4:	462b      	mov	r3, r5
 80042c6:	f000 ff4f 	bl	8005168 <_dtoa_r>
 80042ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80042ce:	4607      	mov	r7, r0
 80042d0:	d119      	bne.n	8004306 <__cvt+0x92>
 80042d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80042d4:	07db      	lsls	r3, r3, #31
 80042d6:	d50e      	bpl.n	80042f6 <__cvt+0x82>
 80042d8:	eb00 0906 	add.w	r9, r0, r6
 80042dc:	2200      	movs	r2, #0
 80042de:	2300      	movs	r3, #0
 80042e0:	4620      	mov	r0, r4
 80042e2:	4629      	mov	r1, r5
 80042e4:	f7fc fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80042e8:	b108      	cbz	r0, 80042ee <__cvt+0x7a>
 80042ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80042ee:	2230      	movs	r2, #48	@ 0x30
 80042f0:	9b07      	ldr	r3, [sp, #28]
 80042f2:	454b      	cmp	r3, r9
 80042f4:	d31e      	bcc.n	8004334 <__cvt+0xc0>
 80042f6:	4638      	mov	r0, r7
 80042f8:	9b07      	ldr	r3, [sp, #28]
 80042fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80042fc:	1bdb      	subs	r3, r3, r7
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	b008      	add	sp, #32
 8004302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004306:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800430a:	eb00 0906 	add.w	r9, r0, r6
 800430e:	d1e5      	bne.n	80042dc <__cvt+0x68>
 8004310:	7803      	ldrb	r3, [r0, #0]
 8004312:	2b30      	cmp	r3, #48	@ 0x30
 8004314:	d10a      	bne.n	800432c <__cvt+0xb8>
 8004316:	2200      	movs	r2, #0
 8004318:	2300      	movs	r3, #0
 800431a:	4620      	mov	r0, r4
 800431c:	4629      	mov	r1, r5
 800431e:	f7fc fb43 	bl	80009a8 <__aeabi_dcmpeq>
 8004322:	b918      	cbnz	r0, 800432c <__cvt+0xb8>
 8004324:	f1c6 0601 	rsb	r6, r6, #1
 8004328:	f8ca 6000 	str.w	r6, [sl]
 800432c:	f8da 3000 	ldr.w	r3, [sl]
 8004330:	4499      	add	r9, r3
 8004332:	e7d3      	b.n	80042dc <__cvt+0x68>
 8004334:	1c59      	adds	r1, r3, #1
 8004336:	9107      	str	r1, [sp, #28]
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	e7d9      	b.n	80042f0 <__cvt+0x7c>

0800433c <__exponent>:
 800433c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433e:	2900      	cmp	r1, #0
 8004340:	bfb6      	itet	lt
 8004342:	232d      	movlt	r3, #45	@ 0x2d
 8004344:	232b      	movge	r3, #43	@ 0x2b
 8004346:	4249      	neglt	r1, r1
 8004348:	2909      	cmp	r1, #9
 800434a:	7002      	strb	r2, [r0, #0]
 800434c:	7043      	strb	r3, [r0, #1]
 800434e:	dd29      	ble.n	80043a4 <__exponent+0x68>
 8004350:	f10d 0307 	add.w	r3, sp, #7
 8004354:	461d      	mov	r5, r3
 8004356:	270a      	movs	r7, #10
 8004358:	fbb1 f6f7 	udiv	r6, r1, r7
 800435c:	461a      	mov	r2, r3
 800435e:	fb07 1416 	mls	r4, r7, r6, r1
 8004362:	3430      	adds	r4, #48	@ 0x30
 8004364:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004368:	460c      	mov	r4, r1
 800436a:	2c63      	cmp	r4, #99	@ 0x63
 800436c:	4631      	mov	r1, r6
 800436e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004372:	dcf1      	bgt.n	8004358 <__exponent+0x1c>
 8004374:	3130      	adds	r1, #48	@ 0x30
 8004376:	1e94      	subs	r4, r2, #2
 8004378:	f803 1c01 	strb.w	r1, [r3, #-1]
 800437c:	4623      	mov	r3, r4
 800437e:	1c41      	adds	r1, r0, #1
 8004380:	42ab      	cmp	r3, r5
 8004382:	d30a      	bcc.n	800439a <__exponent+0x5e>
 8004384:	f10d 0309 	add.w	r3, sp, #9
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	42ac      	cmp	r4, r5
 800438c:	bf88      	it	hi
 800438e:	2300      	movhi	r3, #0
 8004390:	3302      	adds	r3, #2
 8004392:	4403      	add	r3, r0
 8004394:	1a18      	subs	r0, r3, r0
 8004396:	b003      	add	sp, #12
 8004398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800439e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80043a2:	e7ed      	b.n	8004380 <__exponent+0x44>
 80043a4:	2330      	movs	r3, #48	@ 0x30
 80043a6:	3130      	adds	r1, #48	@ 0x30
 80043a8:	7083      	strb	r3, [r0, #2]
 80043aa:	70c1      	strb	r1, [r0, #3]
 80043ac:	1d03      	adds	r3, r0, #4
 80043ae:	e7f1      	b.n	8004394 <__exponent+0x58>

080043b0 <_printf_float>:
 80043b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b4:	b091      	sub	sp, #68	@ 0x44
 80043b6:	460c      	mov	r4, r1
 80043b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80043bc:	4616      	mov	r6, r2
 80043be:	461f      	mov	r7, r3
 80043c0:	4605      	mov	r5, r0
 80043c2:	f000 fdc3 	bl	8004f4c <_localeconv_r>
 80043c6:	6803      	ldr	r3, [r0, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	9308      	str	r3, [sp, #32]
 80043cc:	f7fb fec0 	bl	8000150 <strlen>
 80043d0:	2300      	movs	r3, #0
 80043d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80043d4:	f8d8 3000 	ldr.w	r3, [r8]
 80043d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80043da:	3307      	adds	r3, #7
 80043dc:	f023 0307 	bic.w	r3, r3, #7
 80043e0:	f103 0208 	add.w	r2, r3, #8
 80043e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80043e8:	f8d4 b000 	ldr.w	fp, [r4]
 80043ec:	f8c8 2000 	str.w	r2, [r8]
 80043f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80043f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043fa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80043fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004406:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800440a:	4b9c      	ldr	r3, [pc, #624]	@ (800467c <_printf_float+0x2cc>)
 800440c:	f7fc fafe 	bl	8000a0c <__aeabi_dcmpun>
 8004410:	bb70      	cbnz	r0, 8004470 <_printf_float+0xc0>
 8004412:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004416:	f04f 32ff 	mov.w	r2, #4294967295
 800441a:	4b98      	ldr	r3, [pc, #608]	@ (800467c <_printf_float+0x2cc>)
 800441c:	f7fc fad8 	bl	80009d0 <__aeabi_dcmple>
 8004420:	bb30      	cbnz	r0, 8004470 <_printf_float+0xc0>
 8004422:	2200      	movs	r2, #0
 8004424:	2300      	movs	r3, #0
 8004426:	4640      	mov	r0, r8
 8004428:	4649      	mov	r1, r9
 800442a:	f7fc fac7 	bl	80009bc <__aeabi_dcmplt>
 800442e:	b110      	cbz	r0, 8004436 <_printf_float+0x86>
 8004430:	232d      	movs	r3, #45	@ 0x2d
 8004432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004436:	4a92      	ldr	r2, [pc, #584]	@ (8004680 <_printf_float+0x2d0>)
 8004438:	4b92      	ldr	r3, [pc, #584]	@ (8004684 <_printf_float+0x2d4>)
 800443a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800443e:	bf8c      	ite	hi
 8004440:	4690      	movhi	r8, r2
 8004442:	4698      	movls	r8, r3
 8004444:	2303      	movs	r3, #3
 8004446:	f04f 0900 	mov.w	r9, #0
 800444a:	6123      	str	r3, [r4, #16]
 800444c:	f02b 0304 	bic.w	r3, fp, #4
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	4633      	mov	r3, r6
 8004454:	4621      	mov	r1, r4
 8004456:	4628      	mov	r0, r5
 8004458:	9700      	str	r7, [sp, #0]
 800445a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800445c:	f000 f9d4 	bl	8004808 <_printf_common>
 8004460:	3001      	adds	r0, #1
 8004462:	f040 8090 	bne.w	8004586 <_printf_float+0x1d6>
 8004466:	f04f 30ff 	mov.w	r0, #4294967295
 800446a:	b011      	add	sp, #68	@ 0x44
 800446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004470:	4642      	mov	r2, r8
 8004472:	464b      	mov	r3, r9
 8004474:	4640      	mov	r0, r8
 8004476:	4649      	mov	r1, r9
 8004478:	f7fc fac8 	bl	8000a0c <__aeabi_dcmpun>
 800447c:	b148      	cbz	r0, 8004492 <_printf_float+0xe2>
 800447e:	464b      	mov	r3, r9
 8004480:	2b00      	cmp	r3, #0
 8004482:	bfb8      	it	lt
 8004484:	232d      	movlt	r3, #45	@ 0x2d
 8004486:	4a80      	ldr	r2, [pc, #512]	@ (8004688 <_printf_float+0x2d8>)
 8004488:	bfb8      	it	lt
 800448a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800448e:	4b7f      	ldr	r3, [pc, #508]	@ (800468c <_printf_float+0x2dc>)
 8004490:	e7d3      	b.n	800443a <_printf_float+0x8a>
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	d13f      	bne.n	800451c <_printf_float+0x16c>
 800449c:	2306      	movs	r3, #6
 800449e:	6063      	str	r3, [r4, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80044a6:	6023      	str	r3, [r4, #0]
 80044a8:	9206      	str	r2, [sp, #24]
 80044aa:	aa0e      	add	r2, sp, #56	@ 0x38
 80044ac:	e9cd a204 	strd	sl, r2, [sp, #16]
 80044b0:	aa0d      	add	r2, sp, #52	@ 0x34
 80044b2:	9203      	str	r2, [sp, #12]
 80044b4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80044b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80044bc:	6863      	ldr	r3, [r4, #4]
 80044be:	4642      	mov	r2, r8
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	4628      	mov	r0, r5
 80044c4:	464b      	mov	r3, r9
 80044c6:	910a      	str	r1, [sp, #40]	@ 0x28
 80044c8:	f7ff fed4 	bl	8004274 <__cvt>
 80044cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80044ce:	4680      	mov	r8, r0
 80044d0:	2947      	cmp	r1, #71	@ 0x47
 80044d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80044d4:	d128      	bne.n	8004528 <_printf_float+0x178>
 80044d6:	1cc8      	adds	r0, r1, #3
 80044d8:	db02      	blt.n	80044e0 <_printf_float+0x130>
 80044da:	6863      	ldr	r3, [r4, #4]
 80044dc:	4299      	cmp	r1, r3
 80044de:	dd40      	ble.n	8004562 <_printf_float+0x1b2>
 80044e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80044e4:	fa5f fa8a 	uxtb.w	sl, sl
 80044e8:	4652      	mov	r2, sl
 80044ea:	3901      	subs	r1, #1
 80044ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80044f0:	910d      	str	r1, [sp, #52]	@ 0x34
 80044f2:	f7ff ff23 	bl	800433c <__exponent>
 80044f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80044f8:	4681      	mov	r9, r0
 80044fa:	1813      	adds	r3, r2, r0
 80044fc:	2a01      	cmp	r2, #1
 80044fe:	6123      	str	r3, [r4, #16]
 8004500:	dc02      	bgt.n	8004508 <_printf_float+0x158>
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	07d2      	lsls	r2, r2, #31
 8004506:	d501      	bpl.n	800450c <_printf_float+0x15c>
 8004508:	3301      	adds	r3, #1
 800450a:	6123      	str	r3, [r4, #16]
 800450c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004510:	2b00      	cmp	r3, #0
 8004512:	d09e      	beq.n	8004452 <_printf_float+0xa2>
 8004514:	232d      	movs	r3, #45	@ 0x2d
 8004516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800451a:	e79a      	b.n	8004452 <_printf_float+0xa2>
 800451c:	2947      	cmp	r1, #71	@ 0x47
 800451e:	d1bf      	bne.n	80044a0 <_printf_float+0xf0>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1bd      	bne.n	80044a0 <_printf_float+0xf0>
 8004524:	2301      	movs	r3, #1
 8004526:	e7ba      	b.n	800449e <_printf_float+0xee>
 8004528:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800452c:	d9dc      	bls.n	80044e8 <_printf_float+0x138>
 800452e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004532:	d118      	bne.n	8004566 <_printf_float+0x1b6>
 8004534:	2900      	cmp	r1, #0
 8004536:	6863      	ldr	r3, [r4, #4]
 8004538:	dd0b      	ble.n	8004552 <_printf_float+0x1a2>
 800453a:	6121      	str	r1, [r4, #16]
 800453c:	b913      	cbnz	r3, 8004544 <_printf_float+0x194>
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	07d0      	lsls	r0, r2, #31
 8004542:	d502      	bpl.n	800454a <_printf_float+0x19a>
 8004544:	3301      	adds	r3, #1
 8004546:	440b      	add	r3, r1
 8004548:	6123      	str	r3, [r4, #16]
 800454a:	f04f 0900 	mov.w	r9, #0
 800454e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004550:	e7dc      	b.n	800450c <_printf_float+0x15c>
 8004552:	b913      	cbnz	r3, 800455a <_printf_float+0x1aa>
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	07d2      	lsls	r2, r2, #31
 8004558:	d501      	bpl.n	800455e <_printf_float+0x1ae>
 800455a:	3302      	adds	r3, #2
 800455c:	e7f4      	b.n	8004548 <_printf_float+0x198>
 800455e:	2301      	movs	r3, #1
 8004560:	e7f2      	b.n	8004548 <_printf_float+0x198>
 8004562:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004568:	4299      	cmp	r1, r3
 800456a:	db05      	blt.n	8004578 <_printf_float+0x1c8>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	6121      	str	r1, [r4, #16]
 8004570:	07d8      	lsls	r0, r3, #31
 8004572:	d5ea      	bpl.n	800454a <_printf_float+0x19a>
 8004574:	1c4b      	adds	r3, r1, #1
 8004576:	e7e7      	b.n	8004548 <_printf_float+0x198>
 8004578:	2900      	cmp	r1, #0
 800457a:	bfcc      	ite	gt
 800457c:	2201      	movgt	r2, #1
 800457e:	f1c1 0202 	rsble	r2, r1, #2
 8004582:	4413      	add	r3, r2
 8004584:	e7e0      	b.n	8004548 <_printf_float+0x198>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	055a      	lsls	r2, r3, #21
 800458a:	d407      	bmi.n	800459c <_printf_float+0x1ec>
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	4642      	mov	r2, r8
 8004590:	4631      	mov	r1, r6
 8004592:	4628      	mov	r0, r5
 8004594:	47b8      	blx	r7
 8004596:	3001      	adds	r0, #1
 8004598:	d12b      	bne.n	80045f2 <_printf_float+0x242>
 800459a:	e764      	b.n	8004466 <_printf_float+0xb6>
 800459c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80045a0:	f240 80dc 	bls.w	800475c <_printf_float+0x3ac>
 80045a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80045a8:	2200      	movs	r2, #0
 80045aa:	2300      	movs	r3, #0
 80045ac:	f7fc f9fc 	bl	80009a8 <__aeabi_dcmpeq>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d033      	beq.n	800461c <_printf_float+0x26c>
 80045b4:	2301      	movs	r3, #1
 80045b6:	4631      	mov	r1, r6
 80045b8:	4628      	mov	r0, r5
 80045ba:	4a35      	ldr	r2, [pc, #212]	@ (8004690 <_printf_float+0x2e0>)
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f af51 	beq.w	8004466 <_printf_float+0xb6>
 80045c4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80045c8:	4543      	cmp	r3, r8
 80045ca:	db02      	blt.n	80045d2 <_printf_float+0x222>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	07d8      	lsls	r0, r3, #31
 80045d0:	d50f      	bpl.n	80045f2 <_printf_float+0x242>
 80045d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045d6:	4631      	mov	r1, r6
 80045d8:	4628      	mov	r0, r5
 80045da:	47b8      	blx	r7
 80045dc:	3001      	adds	r0, #1
 80045de:	f43f af42 	beq.w	8004466 <_printf_float+0xb6>
 80045e2:	f04f 0900 	mov.w	r9, #0
 80045e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80045ea:	f104 0a1a 	add.w	sl, r4, #26
 80045ee:	45c8      	cmp	r8, r9
 80045f0:	dc09      	bgt.n	8004606 <_printf_float+0x256>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	079b      	lsls	r3, r3, #30
 80045f6:	f100 8102 	bmi.w	80047fe <_printf_float+0x44e>
 80045fa:	68e0      	ldr	r0, [r4, #12]
 80045fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045fe:	4298      	cmp	r0, r3
 8004600:	bfb8      	it	lt
 8004602:	4618      	movlt	r0, r3
 8004604:	e731      	b.n	800446a <_printf_float+0xba>
 8004606:	2301      	movs	r3, #1
 8004608:	4652      	mov	r2, sl
 800460a:	4631      	mov	r1, r6
 800460c:	4628      	mov	r0, r5
 800460e:	47b8      	blx	r7
 8004610:	3001      	adds	r0, #1
 8004612:	f43f af28 	beq.w	8004466 <_printf_float+0xb6>
 8004616:	f109 0901 	add.w	r9, r9, #1
 800461a:	e7e8      	b.n	80045ee <_printf_float+0x23e>
 800461c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800461e:	2b00      	cmp	r3, #0
 8004620:	dc38      	bgt.n	8004694 <_printf_float+0x2e4>
 8004622:	2301      	movs	r3, #1
 8004624:	4631      	mov	r1, r6
 8004626:	4628      	mov	r0, r5
 8004628:	4a19      	ldr	r2, [pc, #100]	@ (8004690 <_printf_float+0x2e0>)
 800462a:	47b8      	blx	r7
 800462c:	3001      	adds	r0, #1
 800462e:	f43f af1a 	beq.w	8004466 <_printf_float+0xb6>
 8004632:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004636:	ea59 0303 	orrs.w	r3, r9, r3
 800463a:	d102      	bne.n	8004642 <_printf_float+0x292>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	07d9      	lsls	r1, r3, #31
 8004640:	d5d7      	bpl.n	80045f2 <_printf_float+0x242>
 8004642:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004646:	4631      	mov	r1, r6
 8004648:	4628      	mov	r0, r5
 800464a:	47b8      	blx	r7
 800464c:	3001      	adds	r0, #1
 800464e:	f43f af0a 	beq.w	8004466 <_printf_float+0xb6>
 8004652:	f04f 0a00 	mov.w	sl, #0
 8004656:	f104 0b1a 	add.w	fp, r4, #26
 800465a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800465c:	425b      	negs	r3, r3
 800465e:	4553      	cmp	r3, sl
 8004660:	dc01      	bgt.n	8004666 <_printf_float+0x2b6>
 8004662:	464b      	mov	r3, r9
 8004664:	e793      	b.n	800458e <_printf_float+0x1de>
 8004666:	2301      	movs	r3, #1
 8004668:	465a      	mov	r2, fp
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	f43f aef8 	beq.w	8004466 <_printf_float+0xb6>
 8004676:	f10a 0a01 	add.w	sl, sl, #1
 800467a:	e7ee      	b.n	800465a <_printf_float+0x2aa>
 800467c:	7fefffff 	.word	0x7fefffff
 8004680:	080071b6 	.word	0x080071b6
 8004684:	080071b2 	.word	0x080071b2
 8004688:	080071be 	.word	0x080071be
 800468c:	080071ba 	.word	0x080071ba
 8004690:	080071c2 	.word	0x080071c2
 8004694:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004696:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800469a:	4553      	cmp	r3, sl
 800469c:	bfa8      	it	ge
 800469e:	4653      	movge	r3, sl
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	4699      	mov	r9, r3
 80046a4:	dc36      	bgt.n	8004714 <_printf_float+0x364>
 80046a6:	f04f 0b00 	mov.w	fp, #0
 80046aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046ae:	f104 021a 	add.w	r2, r4, #26
 80046b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80046b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80046b6:	eba3 0309 	sub.w	r3, r3, r9
 80046ba:	455b      	cmp	r3, fp
 80046bc:	dc31      	bgt.n	8004722 <_printf_float+0x372>
 80046be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046c0:	459a      	cmp	sl, r3
 80046c2:	dc3a      	bgt.n	800473a <_printf_float+0x38a>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	07da      	lsls	r2, r3, #31
 80046c8:	d437      	bmi.n	800473a <_printf_float+0x38a>
 80046ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046cc:	ebaa 0903 	sub.w	r9, sl, r3
 80046d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046d2:	ebaa 0303 	sub.w	r3, sl, r3
 80046d6:	4599      	cmp	r9, r3
 80046d8:	bfa8      	it	ge
 80046da:	4699      	movge	r9, r3
 80046dc:	f1b9 0f00 	cmp.w	r9, #0
 80046e0:	dc33      	bgt.n	800474a <_printf_float+0x39a>
 80046e2:	f04f 0800 	mov.w	r8, #0
 80046e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046ea:	f104 0b1a 	add.w	fp, r4, #26
 80046ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046f0:	ebaa 0303 	sub.w	r3, sl, r3
 80046f4:	eba3 0309 	sub.w	r3, r3, r9
 80046f8:	4543      	cmp	r3, r8
 80046fa:	f77f af7a 	ble.w	80045f2 <_printf_float+0x242>
 80046fe:	2301      	movs	r3, #1
 8004700:	465a      	mov	r2, fp
 8004702:	4631      	mov	r1, r6
 8004704:	4628      	mov	r0, r5
 8004706:	47b8      	blx	r7
 8004708:	3001      	adds	r0, #1
 800470a:	f43f aeac 	beq.w	8004466 <_printf_float+0xb6>
 800470e:	f108 0801 	add.w	r8, r8, #1
 8004712:	e7ec      	b.n	80046ee <_printf_float+0x33e>
 8004714:	4642      	mov	r2, r8
 8004716:	4631      	mov	r1, r6
 8004718:	4628      	mov	r0, r5
 800471a:	47b8      	blx	r7
 800471c:	3001      	adds	r0, #1
 800471e:	d1c2      	bne.n	80046a6 <_printf_float+0x2f6>
 8004720:	e6a1      	b.n	8004466 <_printf_float+0xb6>
 8004722:	2301      	movs	r3, #1
 8004724:	4631      	mov	r1, r6
 8004726:	4628      	mov	r0, r5
 8004728:	920a      	str	r2, [sp, #40]	@ 0x28
 800472a:	47b8      	blx	r7
 800472c:	3001      	adds	r0, #1
 800472e:	f43f ae9a 	beq.w	8004466 <_printf_float+0xb6>
 8004732:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004734:	f10b 0b01 	add.w	fp, fp, #1
 8004738:	e7bb      	b.n	80046b2 <_printf_float+0x302>
 800473a:	4631      	mov	r1, r6
 800473c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	d1c0      	bne.n	80046ca <_printf_float+0x31a>
 8004748:	e68d      	b.n	8004466 <_printf_float+0xb6>
 800474a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800474c:	464b      	mov	r3, r9
 800474e:	4631      	mov	r1, r6
 8004750:	4628      	mov	r0, r5
 8004752:	4442      	add	r2, r8
 8004754:	47b8      	blx	r7
 8004756:	3001      	adds	r0, #1
 8004758:	d1c3      	bne.n	80046e2 <_printf_float+0x332>
 800475a:	e684      	b.n	8004466 <_printf_float+0xb6>
 800475c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004760:	f1ba 0f01 	cmp.w	sl, #1
 8004764:	dc01      	bgt.n	800476a <_printf_float+0x3ba>
 8004766:	07db      	lsls	r3, r3, #31
 8004768:	d536      	bpl.n	80047d8 <_printf_float+0x428>
 800476a:	2301      	movs	r3, #1
 800476c:	4642      	mov	r2, r8
 800476e:	4631      	mov	r1, r6
 8004770:	4628      	mov	r0, r5
 8004772:	47b8      	blx	r7
 8004774:	3001      	adds	r0, #1
 8004776:	f43f ae76 	beq.w	8004466 <_printf_float+0xb6>
 800477a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800477e:	4631      	mov	r1, r6
 8004780:	4628      	mov	r0, r5
 8004782:	47b8      	blx	r7
 8004784:	3001      	adds	r0, #1
 8004786:	f43f ae6e 	beq.w	8004466 <_printf_float+0xb6>
 800478a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800478e:	2200      	movs	r2, #0
 8004790:	2300      	movs	r3, #0
 8004792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004796:	f7fc f907 	bl	80009a8 <__aeabi_dcmpeq>
 800479a:	b9c0      	cbnz	r0, 80047ce <_printf_float+0x41e>
 800479c:	4653      	mov	r3, sl
 800479e:	f108 0201 	add.w	r2, r8, #1
 80047a2:	4631      	mov	r1, r6
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b8      	blx	r7
 80047a8:	3001      	adds	r0, #1
 80047aa:	d10c      	bne.n	80047c6 <_printf_float+0x416>
 80047ac:	e65b      	b.n	8004466 <_printf_float+0xb6>
 80047ae:	2301      	movs	r3, #1
 80047b0:	465a      	mov	r2, fp
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	f43f ae54 	beq.w	8004466 <_printf_float+0xb6>
 80047be:	f108 0801 	add.w	r8, r8, #1
 80047c2:	45d0      	cmp	r8, sl
 80047c4:	dbf3      	blt.n	80047ae <_printf_float+0x3fe>
 80047c6:	464b      	mov	r3, r9
 80047c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80047cc:	e6e0      	b.n	8004590 <_printf_float+0x1e0>
 80047ce:	f04f 0800 	mov.w	r8, #0
 80047d2:	f104 0b1a 	add.w	fp, r4, #26
 80047d6:	e7f4      	b.n	80047c2 <_printf_float+0x412>
 80047d8:	2301      	movs	r3, #1
 80047da:	4642      	mov	r2, r8
 80047dc:	e7e1      	b.n	80047a2 <_printf_float+0x3f2>
 80047de:	2301      	movs	r3, #1
 80047e0:	464a      	mov	r2, r9
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f ae3c 	beq.w	8004466 <_printf_float+0xb6>
 80047ee:	f108 0801 	add.w	r8, r8, #1
 80047f2:	68e3      	ldr	r3, [r4, #12]
 80047f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80047f6:	1a5b      	subs	r3, r3, r1
 80047f8:	4543      	cmp	r3, r8
 80047fa:	dcf0      	bgt.n	80047de <_printf_float+0x42e>
 80047fc:	e6fd      	b.n	80045fa <_printf_float+0x24a>
 80047fe:	f04f 0800 	mov.w	r8, #0
 8004802:	f104 0919 	add.w	r9, r4, #25
 8004806:	e7f4      	b.n	80047f2 <_printf_float+0x442>

08004808 <_printf_common>:
 8004808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480c:	4616      	mov	r6, r2
 800480e:	4698      	mov	r8, r3
 8004810:	688a      	ldr	r2, [r1, #8]
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	4607      	mov	r7, r0
 8004816:	4293      	cmp	r3, r2
 8004818:	bfb8      	it	lt
 800481a:	4613      	movlt	r3, r2
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004822:	460c      	mov	r4, r1
 8004824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004828:	b10a      	cbz	r2, 800482e <_printf_common+0x26>
 800482a:	3301      	adds	r3, #1
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	0699      	lsls	r1, r3, #26
 8004832:	bf42      	ittt	mi
 8004834:	6833      	ldrmi	r3, [r6, #0]
 8004836:	3302      	addmi	r3, #2
 8004838:	6033      	strmi	r3, [r6, #0]
 800483a:	6825      	ldr	r5, [r4, #0]
 800483c:	f015 0506 	ands.w	r5, r5, #6
 8004840:	d106      	bne.n	8004850 <_printf_common+0x48>
 8004842:	f104 0a19 	add.w	sl, r4, #25
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	6832      	ldr	r2, [r6, #0]
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	42ab      	cmp	r3, r5
 800484e:	dc2b      	bgt.n	80048a8 <_printf_common+0xa0>
 8004850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	3b00      	subs	r3, #0
 8004858:	bf18      	it	ne
 800485a:	2301      	movne	r3, #1
 800485c:	0692      	lsls	r2, r2, #26
 800485e:	d430      	bmi.n	80048c2 <_printf_common+0xba>
 8004860:	4641      	mov	r1, r8
 8004862:	4638      	mov	r0, r7
 8004864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004868:	47c8      	blx	r9
 800486a:	3001      	adds	r0, #1
 800486c:	d023      	beq.n	80048b6 <_printf_common+0xae>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6922      	ldr	r2, [r4, #16]
 8004872:	f003 0306 	and.w	r3, r3, #6
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf14      	ite	ne
 800487a:	2500      	movne	r5, #0
 800487c:	6833      	ldreq	r3, [r6, #0]
 800487e:	f04f 0600 	mov.w	r6, #0
 8004882:	bf08      	it	eq
 8004884:	68e5      	ldreq	r5, [r4, #12]
 8004886:	f104 041a 	add.w	r4, r4, #26
 800488a:	bf08      	it	eq
 800488c:	1aed      	subeq	r5, r5, r3
 800488e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004892:	bf08      	it	eq
 8004894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004898:	4293      	cmp	r3, r2
 800489a:	bfc4      	itt	gt
 800489c:	1a9b      	subgt	r3, r3, r2
 800489e:	18ed      	addgt	r5, r5, r3
 80048a0:	42b5      	cmp	r5, r6
 80048a2:	d11a      	bne.n	80048da <_printf_common+0xd2>
 80048a4:	2000      	movs	r0, #0
 80048a6:	e008      	b.n	80048ba <_printf_common+0xb2>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4652      	mov	r2, sl
 80048ac:	4641      	mov	r1, r8
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c8      	blx	r9
 80048b2:	3001      	adds	r0, #1
 80048b4:	d103      	bne.n	80048be <_printf_common+0xb6>
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048be:	3501      	adds	r5, #1
 80048c0:	e7c1      	b.n	8004846 <_printf_common+0x3e>
 80048c2:	2030      	movs	r0, #48	@ 0x30
 80048c4:	18e1      	adds	r1, r4, r3
 80048c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048d0:	4422      	add	r2, r4
 80048d2:	3302      	adds	r3, #2
 80048d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048d8:	e7c2      	b.n	8004860 <_printf_common+0x58>
 80048da:	2301      	movs	r3, #1
 80048dc:	4622      	mov	r2, r4
 80048de:	4641      	mov	r1, r8
 80048e0:	4638      	mov	r0, r7
 80048e2:	47c8      	blx	r9
 80048e4:	3001      	adds	r0, #1
 80048e6:	d0e6      	beq.n	80048b6 <_printf_common+0xae>
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7d9      	b.n	80048a0 <_printf_common+0x98>

080048ec <_printf_i>:
 80048ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	7e0f      	ldrb	r7, [r1, #24]
 80048f2:	4691      	mov	r9, r2
 80048f4:	2f78      	cmp	r7, #120	@ 0x78
 80048f6:	4680      	mov	r8, r0
 80048f8:	460c      	mov	r4, r1
 80048fa:	469a      	mov	sl, r3
 80048fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004902:	d807      	bhi.n	8004914 <_printf_i+0x28>
 8004904:	2f62      	cmp	r7, #98	@ 0x62
 8004906:	d80a      	bhi.n	800491e <_printf_i+0x32>
 8004908:	2f00      	cmp	r7, #0
 800490a:	f000 80d1 	beq.w	8004ab0 <_printf_i+0x1c4>
 800490e:	2f58      	cmp	r7, #88	@ 0x58
 8004910:	f000 80b8 	beq.w	8004a84 <_printf_i+0x198>
 8004914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800491c:	e03a      	b.n	8004994 <_printf_i+0xa8>
 800491e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004922:	2b15      	cmp	r3, #21
 8004924:	d8f6      	bhi.n	8004914 <_printf_i+0x28>
 8004926:	a101      	add	r1, pc, #4	@ (adr r1, 800492c <_printf_i+0x40>)
 8004928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800492c:	08004985 	.word	0x08004985
 8004930:	08004999 	.word	0x08004999
 8004934:	08004915 	.word	0x08004915
 8004938:	08004915 	.word	0x08004915
 800493c:	08004915 	.word	0x08004915
 8004940:	08004915 	.word	0x08004915
 8004944:	08004999 	.word	0x08004999
 8004948:	08004915 	.word	0x08004915
 800494c:	08004915 	.word	0x08004915
 8004950:	08004915 	.word	0x08004915
 8004954:	08004915 	.word	0x08004915
 8004958:	08004a97 	.word	0x08004a97
 800495c:	080049c3 	.word	0x080049c3
 8004960:	08004a51 	.word	0x08004a51
 8004964:	08004915 	.word	0x08004915
 8004968:	08004915 	.word	0x08004915
 800496c:	08004ab9 	.word	0x08004ab9
 8004970:	08004915 	.word	0x08004915
 8004974:	080049c3 	.word	0x080049c3
 8004978:	08004915 	.word	0x08004915
 800497c:	08004915 	.word	0x08004915
 8004980:	08004a59 	.word	0x08004a59
 8004984:	6833      	ldr	r3, [r6, #0]
 8004986:	1d1a      	adds	r2, r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6032      	str	r2, [r6, #0]
 800498c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004994:	2301      	movs	r3, #1
 8004996:	e09c      	b.n	8004ad2 <_printf_i+0x1e6>
 8004998:	6833      	ldr	r3, [r6, #0]
 800499a:	6820      	ldr	r0, [r4, #0]
 800499c:	1d19      	adds	r1, r3, #4
 800499e:	6031      	str	r1, [r6, #0]
 80049a0:	0606      	lsls	r6, r0, #24
 80049a2:	d501      	bpl.n	80049a8 <_printf_i+0xbc>
 80049a4:	681d      	ldr	r5, [r3, #0]
 80049a6:	e003      	b.n	80049b0 <_printf_i+0xc4>
 80049a8:	0645      	lsls	r5, r0, #25
 80049aa:	d5fb      	bpl.n	80049a4 <_printf_i+0xb8>
 80049ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049b0:	2d00      	cmp	r5, #0
 80049b2:	da03      	bge.n	80049bc <_printf_i+0xd0>
 80049b4:	232d      	movs	r3, #45	@ 0x2d
 80049b6:	426d      	negs	r5, r5
 80049b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049bc:	230a      	movs	r3, #10
 80049be:	4858      	ldr	r0, [pc, #352]	@ (8004b20 <_printf_i+0x234>)
 80049c0:	e011      	b.n	80049e6 <_printf_i+0xfa>
 80049c2:	6821      	ldr	r1, [r4, #0]
 80049c4:	6833      	ldr	r3, [r6, #0]
 80049c6:	0608      	lsls	r0, r1, #24
 80049c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80049cc:	d402      	bmi.n	80049d4 <_printf_i+0xe8>
 80049ce:	0649      	lsls	r1, r1, #25
 80049d0:	bf48      	it	mi
 80049d2:	b2ad      	uxthmi	r5, r5
 80049d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	bf14      	ite	ne
 80049da:	230a      	movne	r3, #10
 80049dc:	2308      	moveq	r3, #8
 80049de:	4850      	ldr	r0, [pc, #320]	@ (8004b20 <_printf_i+0x234>)
 80049e0:	2100      	movs	r1, #0
 80049e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049e6:	6866      	ldr	r6, [r4, #4]
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	60a6      	str	r6, [r4, #8]
 80049ec:	db05      	blt.n	80049fa <_printf_i+0x10e>
 80049ee:	6821      	ldr	r1, [r4, #0]
 80049f0:	432e      	orrs	r6, r5
 80049f2:	f021 0104 	bic.w	r1, r1, #4
 80049f6:	6021      	str	r1, [r4, #0]
 80049f8:	d04b      	beq.n	8004a92 <_printf_i+0x1a6>
 80049fa:	4616      	mov	r6, r2
 80049fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a00:	fb03 5711 	mls	r7, r3, r1, r5
 8004a04:	5dc7      	ldrb	r7, [r0, r7]
 8004a06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a0a:	462f      	mov	r7, r5
 8004a0c:	42bb      	cmp	r3, r7
 8004a0e:	460d      	mov	r5, r1
 8004a10:	d9f4      	bls.n	80049fc <_printf_i+0x110>
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d10b      	bne.n	8004a2e <_printf_i+0x142>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	07df      	lsls	r7, r3, #31
 8004a1a:	d508      	bpl.n	8004a2e <_printf_i+0x142>
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	6861      	ldr	r1, [r4, #4]
 8004a20:	4299      	cmp	r1, r3
 8004a22:	bfde      	ittt	le
 8004a24:	2330      	movle	r3, #48	@ 0x30
 8004a26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a2e:	1b92      	subs	r2, r2, r6
 8004a30:	6122      	str	r2, [r4, #16]
 8004a32:	464b      	mov	r3, r9
 8004a34:	4621      	mov	r1, r4
 8004a36:	4640      	mov	r0, r8
 8004a38:	f8cd a000 	str.w	sl, [sp]
 8004a3c:	aa03      	add	r2, sp, #12
 8004a3e:	f7ff fee3 	bl	8004808 <_printf_common>
 8004a42:	3001      	adds	r0, #1
 8004a44:	d14a      	bne.n	8004adc <_printf_i+0x1f0>
 8004a46:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4a:	b004      	add	sp, #16
 8004a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f043 0320 	orr.w	r3, r3, #32
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	2778      	movs	r7, #120	@ 0x78
 8004a5a:	4832      	ldr	r0, [pc, #200]	@ (8004b24 <_printf_i+0x238>)
 8004a5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	6831      	ldr	r1, [r6, #0]
 8004a64:	061f      	lsls	r7, r3, #24
 8004a66:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a6a:	d402      	bmi.n	8004a72 <_printf_i+0x186>
 8004a6c:	065f      	lsls	r7, r3, #25
 8004a6e:	bf48      	it	mi
 8004a70:	b2ad      	uxthmi	r5, r5
 8004a72:	6031      	str	r1, [r6, #0]
 8004a74:	07d9      	lsls	r1, r3, #31
 8004a76:	bf44      	itt	mi
 8004a78:	f043 0320 	orrmi.w	r3, r3, #32
 8004a7c:	6023      	strmi	r3, [r4, #0]
 8004a7e:	b11d      	cbz	r5, 8004a88 <_printf_i+0x19c>
 8004a80:	2310      	movs	r3, #16
 8004a82:	e7ad      	b.n	80049e0 <_printf_i+0xf4>
 8004a84:	4826      	ldr	r0, [pc, #152]	@ (8004b20 <_printf_i+0x234>)
 8004a86:	e7e9      	b.n	8004a5c <_printf_i+0x170>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	f023 0320 	bic.w	r3, r3, #32
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	e7f6      	b.n	8004a80 <_printf_i+0x194>
 8004a92:	4616      	mov	r6, r2
 8004a94:	e7bd      	b.n	8004a12 <_printf_i+0x126>
 8004a96:	6833      	ldr	r3, [r6, #0]
 8004a98:	6825      	ldr	r5, [r4, #0]
 8004a9a:	1d18      	adds	r0, r3, #4
 8004a9c:	6961      	ldr	r1, [r4, #20]
 8004a9e:	6030      	str	r0, [r6, #0]
 8004aa0:	062e      	lsls	r6, r5, #24
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	d501      	bpl.n	8004aaa <_printf_i+0x1be>
 8004aa6:	6019      	str	r1, [r3, #0]
 8004aa8:	e002      	b.n	8004ab0 <_printf_i+0x1c4>
 8004aaa:	0668      	lsls	r0, r5, #25
 8004aac:	d5fb      	bpl.n	8004aa6 <_printf_i+0x1ba>
 8004aae:	8019      	strh	r1, [r3, #0]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4616      	mov	r6, r2
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	e7bc      	b.n	8004a32 <_printf_i+0x146>
 8004ab8:	6833      	ldr	r3, [r6, #0]
 8004aba:	2100      	movs	r1, #0
 8004abc:	1d1a      	adds	r2, r3, #4
 8004abe:	6032      	str	r2, [r6, #0]
 8004ac0:	681e      	ldr	r6, [r3, #0]
 8004ac2:	6862      	ldr	r2, [r4, #4]
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f000 fab8 	bl	800503a <memchr>
 8004aca:	b108      	cbz	r0, 8004ad0 <_printf_i+0x1e4>
 8004acc:	1b80      	subs	r0, r0, r6
 8004ace:	6060      	str	r0, [r4, #4]
 8004ad0:	6863      	ldr	r3, [r4, #4]
 8004ad2:	6123      	str	r3, [r4, #16]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ada:	e7aa      	b.n	8004a32 <_printf_i+0x146>
 8004adc:	4632      	mov	r2, r6
 8004ade:	4649      	mov	r1, r9
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	47d0      	blx	sl
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d0ad      	beq.n	8004a46 <_printf_i+0x15a>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	079b      	lsls	r3, r3, #30
 8004aee:	d413      	bmi.n	8004b18 <_printf_i+0x22c>
 8004af0:	68e0      	ldr	r0, [r4, #12]
 8004af2:	9b03      	ldr	r3, [sp, #12]
 8004af4:	4298      	cmp	r0, r3
 8004af6:	bfb8      	it	lt
 8004af8:	4618      	movlt	r0, r3
 8004afa:	e7a6      	b.n	8004a4a <_printf_i+0x15e>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4632      	mov	r2, r6
 8004b00:	4649      	mov	r1, r9
 8004b02:	4640      	mov	r0, r8
 8004b04:	47d0      	blx	sl
 8004b06:	3001      	adds	r0, #1
 8004b08:	d09d      	beq.n	8004a46 <_printf_i+0x15a>
 8004b0a:	3501      	adds	r5, #1
 8004b0c:	68e3      	ldr	r3, [r4, #12]
 8004b0e:	9903      	ldr	r1, [sp, #12]
 8004b10:	1a5b      	subs	r3, r3, r1
 8004b12:	42ab      	cmp	r3, r5
 8004b14:	dcf2      	bgt.n	8004afc <_printf_i+0x210>
 8004b16:	e7eb      	b.n	8004af0 <_printf_i+0x204>
 8004b18:	2500      	movs	r5, #0
 8004b1a:	f104 0619 	add.w	r6, r4, #25
 8004b1e:	e7f5      	b.n	8004b0c <_printf_i+0x220>
 8004b20:	080071c4 	.word	0x080071c4
 8004b24:	080071d5 	.word	0x080071d5

08004b28 <std>:
 8004b28:	2300      	movs	r3, #0
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b36:	6083      	str	r3, [r0, #8]
 8004b38:	8181      	strh	r1, [r0, #12]
 8004b3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b3c:	81c2      	strh	r2, [r0, #14]
 8004b3e:	6183      	str	r3, [r0, #24]
 8004b40:	4619      	mov	r1, r3
 8004b42:	2208      	movs	r2, #8
 8004b44:	305c      	adds	r0, #92	@ 0x5c
 8004b46:	f000 f9f9 	bl	8004f3c <memset>
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <std+0x58>)
 8004b4c:	6224      	str	r4, [r4, #32]
 8004b4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b50:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <std+0x5c>)
 8004b52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <std+0x60>)
 8004b56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b58:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <std+0x64>)
 8004b5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <std+0x68>)
 8004b5e:	429c      	cmp	r4, r3
 8004b60:	d006      	beq.n	8004b70 <std+0x48>
 8004b62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b66:	4294      	cmp	r4, r2
 8004b68:	d002      	beq.n	8004b70 <std+0x48>
 8004b6a:	33d0      	adds	r3, #208	@ 0xd0
 8004b6c:	429c      	cmp	r4, r3
 8004b6e:	d105      	bne.n	8004b7c <std+0x54>
 8004b70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b78:	f000 ba5c 	b.w	8005034 <__retarget_lock_init_recursive>
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	08004d8d 	.word	0x08004d8d
 8004b84:	08004daf 	.word	0x08004daf
 8004b88:	08004de7 	.word	0x08004de7
 8004b8c:	08004e0b 	.word	0x08004e0b
 8004b90:	200003c8 	.word	0x200003c8

08004b94 <stdio_exit_handler>:
 8004b94:	4a02      	ldr	r2, [pc, #8]	@ (8004ba0 <stdio_exit_handler+0xc>)
 8004b96:	4903      	ldr	r1, [pc, #12]	@ (8004ba4 <stdio_exit_handler+0x10>)
 8004b98:	4803      	ldr	r0, [pc, #12]	@ (8004ba8 <stdio_exit_handler+0x14>)
 8004b9a:	f000 b869 	b.w	8004c70 <_fwalk_sglue>
 8004b9e:	bf00      	nop
 8004ba0:	2000000c 	.word	0x2000000c
 8004ba4:	08006981 	.word	0x08006981
 8004ba8:	2000001c 	.word	0x2000001c

08004bac <cleanup_stdio>:
 8004bac:	6841      	ldr	r1, [r0, #4]
 8004bae:	4b0c      	ldr	r3, [pc, #48]	@ (8004be0 <cleanup_stdio+0x34>)
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	4299      	cmp	r1, r3
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	d001      	beq.n	8004bbc <cleanup_stdio+0x10>
 8004bb8:	f001 fee2 	bl	8006980 <_fflush_r>
 8004bbc:	68a1      	ldr	r1, [r4, #8]
 8004bbe:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <cleanup_stdio+0x38>)
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	d002      	beq.n	8004bca <cleanup_stdio+0x1e>
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f001 fedb 	bl	8006980 <_fflush_r>
 8004bca:	68e1      	ldr	r1, [r4, #12]
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <cleanup_stdio+0x3c>)
 8004bce:	4299      	cmp	r1, r3
 8004bd0:	d004      	beq.n	8004bdc <cleanup_stdio+0x30>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd8:	f001 bed2 	b.w	8006980 <_fflush_r>
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	bf00      	nop
 8004be0:	200003c8 	.word	0x200003c8
 8004be4:	20000430 	.word	0x20000430
 8004be8:	20000498 	.word	0x20000498

08004bec <global_stdio_init.part.0>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <global_stdio_init.part.0+0x30>)
 8004bf0:	4c0b      	ldr	r4, [pc, #44]	@ (8004c20 <global_stdio_init.part.0+0x34>)
 8004bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c24 <global_stdio_init.part.0+0x38>)
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	2104      	movs	r1, #4
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f7ff ff94 	bl	8004b28 <std>
 8004c00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c04:	2201      	movs	r2, #1
 8004c06:	2109      	movs	r1, #9
 8004c08:	f7ff ff8e 	bl	8004b28 <std>
 8004c0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c10:	2202      	movs	r2, #2
 8004c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c16:	2112      	movs	r1, #18
 8004c18:	f7ff bf86 	b.w	8004b28 <std>
 8004c1c:	20000500 	.word	0x20000500
 8004c20:	200003c8 	.word	0x200003c8
 8004c24:	08004b95 	.word	0x08004b95

08004c28 <__sfp_lock_acquire>:
 8004c28:	4801      	ldr	r0, [pc, #4]	@ (8004c30 <__sfp_lock_acquire+0x8>)
 8004c2a:	f000 ba04 	b.w	8005036 <__retarget_lock_acquire_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000509 	.word	0x20000509

08004c34 <__sfp_lock_release>:
 8004c34:	4801      	ldr	r0, [pc, #4]	@ (8004c3c <__sfp_lock_release+0x8>)
 8004c36:	f000 b9ff 	b.w	8005038 <__retarget_lock_release_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	20000509 	.word	0x20000509

08004c40 <__sinit>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	4604      	mov	r4, r0
 8004c44:	f7ff fff0 	bl	8004c28 <__sfp_lock_acquire>
 8004c48:	6a23      	ldr	r3, [r4, #32]
 8004c4a:	b11b      	cbz	r3, 8004c54 <__sinit+0x14>
 8004c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c50:	f7ff bff0 	b.w	8004c34 <__sfp_lock_release>
 8004c54:	4b04      	ldr	r3, [pc, #16]	@ (8004c68 <__sinit+0x28>)
 8004c56:	6223      	str	r3, [r4, #32]
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <__sinit+0x2c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f5      	bne.n	8004c4c <__sinit+0xc>
 8004c60:	f7ff ffc4 	bl	8004bec <global_stdio_init.part.0>
 8004c64:	e7f2      	b.n	8004c4c <__sinit+0xc>
 8004c66:	bf00      	nop
 8004c68:	08004bad 	.word	0x08004bad
 8004c6c:	20000500 	.word	0x20000500

08004c70 <_fwalk_sglue>:
 8004c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c74:	4607      	mov	r7, r0
 8004c76:	4688      	mov	r8, r1
 8004c78:	4614      	mov	r4, r2
 8004c7a:	2600      	movs	r6, #0
 8004c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c80:	f1b9 0901 	subs.w	r9, r9, #1
 8004c84:	d505      	bpl.n	8004c92 <_fwalk_sglue+0x22>
 8004c86:	6824      	ldr	r4, [r4, #0]
 8004c88:	2c00      	cmp	r4, #0
 8004c8a:	d1f7      	bne.n	8004c7c <_fwalk_sglue+0xc>
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c92:	89ab      	ldrh	r3, [r5, #12]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d907      	bls.n	8004ca8 <_fwalk_sglue+0x38>
 8004c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	d003      	beq.n	8004ca8 <_fwalk_sglue+0x38>
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c0      	blx	r8
 8004ca6:	4306      	orrs	r6, r0
 8004ca8:	3568      	adds	r5, #104	@ 0x68
 8004caa:	e7e9      	b.n	8004c80 <_fwalk_sglue+0x10>

08004cac <iprintf>:
 8004cac:	b40f      	push	{r0, r1, r2, r3}
 8004cae:	b507      	push	{r0, r1, r2, lr}
 8004cb0:	4906      	ldr	r1, [pc, #24]	@ (8004ccc <iprintf+0x20>)
 8004cb2:	ab04      	add	r3, sp, #16
 8004cb4:	6808      	ldr	r0, [r1, #0]
 8004cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cba:	6881      	ldr	r1, [r0, #8]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	f001 fcc7 	bl	8006650 <_vfiprintf_r>
 8004cc2:	b003      	add	sp, #12
 8004cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cc8:	b004      	add	sp, #16
 8004cca:	4770      	bx	lr
 8004ccc:	20000018 	.word	0x20000018

08004cd0 <_puts_r>:
 8004cd0:	6a03      	ldr	r3, [r0, #32]
 8004cd2:	b570      	push	{r4, r5, r6, lr}
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	460e      	mov	r6, r1
 8004cd8:	6884      	ldr	r4, [r0, #8]
 8004cda:	b90b      	cbnz	r3, 8004ce0 <_puts_r+0x10>
 8004cdc:	f7ff ffb0 	bl	8004c40 <__sinit>
 8004ce0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ce2:	07db      	lsls	r3, r3, #31
 8004ce4:	d405      	bmi.n	8004cf2 <_puts_r+0x22>
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	0598      	lsls	r0, r3, #22
 8004cea:	d402      	bmi.n	8004cf2 <_puts_r+0x22>
 8004cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cee:	f000 f9a2 	bl	8005036 <__retarget_lock_acquire_recursive>
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	0719      	lsls	r1, r3, #28
 8004cf6:	d502      	bpl.n	8004cfe <_puts_r+0x2e>
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d135      	bne.n	8004d6a <_puts_r+0x9a>
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 f8c5 	bl	8004e90 <__swsetup_r>
 8004d06:	b380      	cbz	r0, 8004d6a <_puts_r+0x9a>
 8004d08:	f04f 35ff 	mov.w	r5, #4294967295
 8004d0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d0e:	07da      	lsls	r2, r3, #31
 8004d10:	d405      	bmi.n	8004d1e <_puts_r+0x4e>
 8004d12:	89a3      	ldrh	r3, [r4, #12]
 8004d14:	059b      	lsls	r3, r3, #22
 8004d16:	d402      	bmi.n	8004d1e <_puts_r+0x4e>
 8004d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d1a:	f000 f98d 	bl	8005038 <__retarget_lock_release_recursive>
 8004d1e:	4628      	mov	r0, r5
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	da04      	bge.n	8004d30 <_puts_r+0x60>
 8004d26:	69a2      	ldr	r2, [r4, #24]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	dc17      	bgt.n	8004d5c <_puts_r+0x8c>
 8004d2c:	290a      	cmp	r1, #10
 8004d2e:	d015      	beq.n	8004d5c <_puts_r+0x8c>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	6022      	str	r2, [r4, #0]
 8004d36:	7019      	strb	r1, [r3, #0]
 8004d38:	68a3      	ldr	r3, [r4, #8]
 8004d3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	60a3      	str	r3, [r4, #8]
 8004d42:	2900      	cmp	r1, #0
 8004d44:	d1ed      	bne.n	8004d22 <_puts_r+0x52>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	da11      	bge.n	8004d6e <_puts_r+0x9e>
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	210a      	movs	r1, #10
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 f85f 	bl	8004e12 <__swbuf_r>
 8004d54:	3001      	adds	r0, #1
 8004d56:	d0d7      	beq.n	8004d08 <_puts_r+0x38>
 8004d58:	250a      	movs	r5, #10
 8004d5a:	e7d7      	b.n	8004d0c <_puts_r+0x3c>
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 f857 	bl	8004e12 <__swbuf_r>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d1e7      	bne.n	8004d38 <_puts_r+0x68>
 8004d68:	e7ce      	b.n	8004d08 <_puts_r+0x38>
 8004d6a:	3e01      	subs	r6, #1
 8004d6c:	e7e4      	b.n	8004d38 <_puts_r+0x68>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	6022      	str	r2, [r4, #0]
 8004d74:	220a      	movs	r2, #10
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e7ee      	b.n	8004d58 <_puts_r+0x88>
	...

08004d7c <puts>:
 8004d7c:	4b02      	ldr	r3, [pc, #8]	@ (8004d88 <puts+0xc>)
 8004d7e:	4601      	mov	r1, r0
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	f7ff bfa5 	b.w	8004cd0 <_puts_r>
 8004d86:	bf00      	nop
 8004d88:	20000018 	.word	0x20000018

08004d8c <__sread>:
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	460c      	mov	r4, r1
 8004d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d94:	f000 f900 	bl	8004f98 <_read_r>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	bfab      	itete	ge
 8004d9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004da0:	181b      	addge	r3, r3, r0
 8004da2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004da6:	bfac      	ite	ge
 8004da8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004daa:	81a3      	strhlt	r3, [r4, #12]
 8004dac:	bd10      	pop	{r4, pc}

08004dae <__swrite>:
 8004dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db2:	461f      	mov	r7, r3
 8004db4:	898b      	ldrh	r3, [r1, #12]
 8004db6:	4605      	mov	r5, r0
 8004db8:	05db      	lsls	r3, r3, #23
 8004dba:	460c      	mov	r4, r1
 8004dbc:	4616      	mov	r6, r2
 8004dbe:	d505      	bpl.n	8004dcc <__swrite+0x1e>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc8:	f000 f8d4 	bl	8004f74 <_lseek_r>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	4632      	mov	r2, r6
 8004dd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dd4:	81a3      	strh	r3, [r4, #12]
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	463b      	mov	r3, r7
 8004dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004de2:	f000 b8eb 	b.w	8004fbc <_write_r>

08004de6 <__sseek>:
 8004de6:	b510      	push	{r4, lr}
 8004de8:	460c      	mov	r4, r1
 8004dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dee:	f000 f8c1 	bl	8004f74 <_lseek_r>
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	bf15      	itete	ne
 8004df8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e02:	81a3      	strheq	r3, [r4, #12]
 8004e04:	bf18      	it	ne
 8004e06:	81a3      	strhne	r3, [r4, #12]
 8004e08:	bd10      	pop	{r4, pc}

08004e0a <__sclose>:
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 b8a1 	b.w	8004f54 <_close_r>

08004e12 <__swbuf_r>:
 8004e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e14:	460e      	mov	r6, r1
 8004e16:	4614      	mov	r4, r2
 8004e18:	4605      	mov	r5, r0
 8004e1a:	b118      	cbz	r0, 8004e24 <__swbuf_r+0x12>
 8004e1c:	6a03      	ldr	r3, [r0, #32]
 8004e1e:	b90b      	cbnz	r3, 8004e24 <__swbuf_r+0x12>
 8004e20:	f7ff ff0e 	bl	8004c40 <__sinit>
 8004e24:	69a3      	ldr	r3, [r4, #24]
 8004e26:	60a3      	str	r3, [r4, #8]
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	071a      	lsls	r2, r3, #28
 8004e2c:	d501      	bpl.n	8004e32 <__swbuf_r+0x20>
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	b943      	cbnz	r3, 8004e44 <__swbuf_r+0x32>
 8004e32:	4621      	mov	r1, r4
 8004e34:	4628      	mov	r0, r5
 8004e36:	f000 f82b 	bl	8004e90 <__swsetup_r>
 8004e3a:	b118      	cbz	r0, 8004e44 <__swbuf_r+0x32>
 8004e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e40:	4638      	mov	r0, r7
 8004e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	6922      	ldr	r2, [r4, #16]
 8004e48:	b2f6      	uxtb	r6, r6
 8004e4a:	1a98      	subs	r0, r3, r2
 8004e4c:	6963      	ldr	r3, [r4, #20]
 8004e4e:	4637      	mov	r7, r6
 8004e50:	4283      	cmp	r3, r0
 8004e52:	dc05      	bgt.n	8004e60 <__swbuf_r+0x4e>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4628      	mov	r0, r5
 8004e58:	f001 fd92 	bl	8006980 <_fflush_r>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d1ed      	bne.n	8004e3c <__swbuf_r+0x2a>
 8004e60:	68a3      	ldr	r3, [r4, #8]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	60a3      	str	r3, [r4, #8]
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	6022      	str	r2, [r4, #0]
 8004e6c:	701e      	strb	r6, [r3, #0]
 8004e6e:	6962      	ldr	r2, [r4, #20]
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d004      	beq.n	8004e80 <__swbuf_r+0x6e>
 8004e76:	89a3      	ldrh	r3, [r4, #12]
 8004e78:	07db      	lsls	r3, r3, #31
 8004e7a:	d5e1      	bpl.n	8004e40 <__swbuf_r+0x2e>
 8004e7c:	2e0a      	cmp	r6, #10
 8004e7e:	d1df      	bne.n	8004e40 <__swbuf_r+0x2e>
 8004e80:	4621      	mov	r1, r4
 8004e82:	4628      	mov	r0, r5
 8004e84:	f001 fd7c 	bl	8006980 <_fflush_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d0d9      	beq.n	8004e40 <__swbuf_r+0x2e>
 8004e8c:	e7d6      	b.n	8004e3c <__swbuf_r+0x2a>
	...

08004e90 <__swsetup_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4b29      	ldr	r3, [pc, #164]	@ (8004f38 <__swsetup_r+0xa8>)
 8004e94:	4605      	mov	r5, r0
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	460c      	mov	r4, r1
 8004e9a:	b118      	cbz	r0, 8004ea4 <__swsetup_r+0x14>
 8004e9c:	6a03      	ldr	r3, [r0, #32]
 8004e9e:	b90b      	cbnz	r3, 8004ea4 <__swsetup_r+0x14>
 8004ea0:	f7ff fece 	bl	8004c40 <__sinit>
 8004ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ea8:	0719      	lsls	r1, r3, #28
 8004eaa:	d422      	bmi.n	8004ef2 <__swsetup_r+0x62>
 8004eac:	06da      	lsls	r2, r3, #27
 8004eae:	d407      	bmi.n	8004ec0 <__swsetup_r+0x30>
 8004eb0:	2209      	movs	r2, #9
 8004eb2:	602a      	str	r2, [r5, #0]
 8004eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	e033      	b.n	8004f28 <__swsetup_r+0x98>
 8004ec0:	0758      	lsls	r0, r3, #29
 8004ec2:	d512      	bpl.n	8004eea <__swsetup_r+0x5a>
 8004ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ec6:	b141      	cbz	r1, 8004eda <__swsetup_r+0x4a>
 8004ec8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ecc:	4299      	cmp	r1, r3
 8004ece:	d002      	beq.n	8004ed6 <__swsetup_r+0x46>
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 ff1d 	bl	8005d10 <_free_r>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ee0:	81a3      	strh	r3, [r4, #12]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	6923      	ldr	r3, [r4, #16]
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	f043 0308 	orr.w	r3, r3, #8
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	b94b      	cbnz	r3, 8004f0a <__swsetup_r+0x7a>
 8004ef6:	89a3      	ldrh	r3, [r4, #12]
 8004ef8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f00:	d003      	beq.n	8004f0a <__swsetup_r+0x7a>
 8004f02:	4621      	mov	r1, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f001 fd88 	bl	8006a1a <__smakebuf_r>
 8004f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f0e:	f013 0201 	ands.w	r2, r3, #1
 8004f12:	d00a      	beq.n	8004f2a <__swsetup_r+0x9a>
 8004f14:	2200      	movs	r2, #0
 8004f16:	60a2      	str	r2, [r4, #8]
 8004f18:	6962      	ldr	r2, [r4, #20]
 8004f1a:	4252      	negs	r2, r2
 8004f1c:	61a2      	str	r2, [r4, #24]
 8004f1e:	6922      	ldr	r2, [r4, #16]
 8004f20:	b942      	cbnz	r2, 8004f34 <__swsetup_r+0xa4>
 8004f22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f26:	d1c5      	bne.n	8004eb4 <__swsetup_r+0x24>
 8004f28:	bd38      	pop	{r3, r4, r5, pc}
 8004f2a:	0799      	lsls	r1, r3, #30
 8004f2c:	bf58      	it	pl
 8004f2e:	6962      	ldrpl	r2, [r4, #20]
 8004f30:	60a2      	str	r2, [r4, #8]
 8004f32:	e7f4      	b.n	8004f1e <__swsetup_r+0x8e>
 8004f34:	2000      	movs	r0, #0
 8004f36:	e7f7      	b.n	8004f28 <__swsetup_r+0x98>
 8004f38:	20000018 	.word	0x20000018

08004f3c <memset>:
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	4402      	add	r2, r0
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d100      	bne.n	8004f46 <memset+0xa>
 8004f44:	4770      	bx	lr
 8004f46:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4a:	e7f9      	b.n	8004f40 <memset+0x4>

08004f4c <_localeconv_r>:
 8004f4c:	4800      	ldr	r0, [pc, #0]	@ (8004f50 <_localeconv_r+0x4>)
 8004f4e:	4770      	bx	lr
 8004f50:	20000158 	.word	0x20000158

08004f54 <_close_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	2300      	movs	r3, #0
 8004f58:	4d05      	ldr	r5, [pc, #20]	@ (8004f70 <_close_r+0x1c>)
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	602b      	str	r3, [r5, #0]
 8004f60:	f7fc fc33 	bl	80017ca <_close>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_close_r+0x1a>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_close_r+0x1a>
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	20000504 	.word	0x20000504

08004f74 <_lseek_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4d05      	ldr	r5, [pc, #20]	@ (8004f94 <_lseek_r+0x20>)
 8004f80:	602a      	str	r2, [r5, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7fc fc45 	bl	8001812 <_lseek>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_lseek_r+0x1e>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_lseek_r+0x1e>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	20000504 	.word	0x20000504

08004f98 <_read_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4d05      	ldr	r5, [pc, #20]	@ (8004fb8 <_read_r+0x20>)
 8004fa4:	602a      	str	r2, [r5, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f7fc fbf2 	bl	8001790 <_read>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_read_r+0x1e>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_read_r+0x1e>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	20000504 	.word	0x20000504

08004fbc <_write_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4d05      	ldr	r5, [pc, #20]	@ (8004fdc <_write_r+0x20>)
 8004fc8:	602a      	str	r2, [r5, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f7fc f912 	bl	80011f4 <_write>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_write_r+0x1e>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_write_r+0x1e>
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	20000504 	.word	0x20000504

08004fe0 <__errno>:
 8004fe0:	4b01      	ldr	r3, [pc, #4]	@ (8004fe8 <__errno+0x8>)
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20000018 	.word	0x20000018

08004fec <__libc_init_array>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	2600      	movs	r6, #0
 8004ff0:	4d0c      	ldr	r5, [pc, #48]	@ (8005024 <__libc_init_array+0x38>)
 8004ff2:	4c0d      	ldr	r4, [pc, #52]	@ (8005028 <__libc_init_array+0x3c>)
 8004ff4:	1b64      	subs	r4, r4, r5
 8004ff6:	10a4      	asrs	r4, r4, #2
 8004ff8:	42a6      	cmp	r6, r4
 8004ffa:	d109      	bne.n	8005010 <__libc_init_array+0x24>
 8004ffc:	f001 fec4 	bl	8006d88 <_init>
 8005000:	2600      	movs	r6, #0
 8005002:	4d0a      	ldr	r5, [pc, #40]	@ (800502c <__libc_init_array+0x40>)
 8005004:	4c0a      	ldr	r4, [pc, #40]	@ (8005030 <__libc_init_array+0x44>)
 8005006:	1b64      	subs	r4, r4, r5
 8005008:	10a4      	asrs	r4, r4, #2
 800500a:	42a6      	cmp	r6, r4
 800500c:	d105      	bne.n	800501a <__libc_init_array+0x2e>
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f855 3b04 	ldr.w	r3, [r5], #4
 8005014:	4798      	blx	r3
 8005016:	3601      	adds	r6, #1
 8005018:	e7ee      	b.n	8004ff8 <__libc_init_array+0xc>
 800501a:	f855 3b04 	ldr.w	r3, [r5], #4
 800501e:	4798      	blx	r3
 8005020:	3601      	adds	r6, #1
 8005022:	e7f2      	b.n	800500a <__libc_init_array+0x1e>
 8005024:	08007534 	.word	0x08007534
 8005028:	08007534 	.word	0x08007534
 800502c:	08007534 	.word	0x08007534
 8005030:	08007538 	.word	0x08007538

08005034 <__retarget_lock_init_recursive>:
 8005034:	4770      	bx	lr

08005036 <__retarget_lock_acquire_recursive>:
 8005036:	4770      	bx	lr

08005038 <__retarget_lock_release_recursive>:
 8005038:	4770      	bx	lr

0800503a <memchr>:
 800503a:	4603      	mov	r3, r0
 800503c:	b510      	push	{r4, lr}
 800503e:	b2c9      	uxtb	r1, r1
 8005040:	4402      	add	r2, r0
 8005042:	4293      	cmp	r3, r2
 8005044:	4618      	mov	r0, r3
 8005046:	d101      	bne.n	800504c <memchr+0x12>
 8005048:	2000      	movs	r0, #0
 800504a:	e003      	b.n	8005054 <memchr+0x1a>
 800504c:	7804      	ldrb	r4, [r0, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	428c      	cmp	r4, r1
 8005052:	d1f6      	bne.n	8005042 <memchr+0x8>
 8005054:	bd10      	pop	{r4, pc}

08005056 <quorem>:
 8005056:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505a:	6903      	ldr	r3, [r0, #16]
 800505c:	690c      	ldr	r4, [r1, #16]
 800505e:	4607      	mov	r7, r0
 8005060:	42a3      	cmp	r3, r4
 8005062:	db7e      	blt.n	8005162 <quorem+0x10c>
 8005064:	3c01      	subs	r4, #1
 8005066:	00a3      	lsls	r3, r4, #2
 8005068:	f100 0514 	add.w	r5, r0, #20
 800506c:	f101 0814 	add.w	r8, r1, #20
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800507c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005080:	3301      	adds	r3, #1
 8005082:	429a      	cmp	r2, r3
 8005084:	fbb2 f6f3 	udiv	r6, r2, r3
 8005088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800508c:	d32e      	bcc.n	80050ec <quorem+0x96>
 800508e:	f04f 0a00 	mov.w	sl, #0
 8005092:	46c4      	mov	ip, r8
 8005094:	46ae      	mov	lr, r5
 8005096:	46d3      	mov	fp, sl
 8005098:	f85c 3b04 	ldr.w	r3, [ip], #4
 800509c:	b298      	uxth	r0, r3
 800509e:	fb06 a000 	mla	r0, r6, r0, sl
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	0c02      	lsrs	r2, r0, #16
 80050a6:	fb06 2303 	mla	r3, r6, r3, r2
 80050aa:	f8de 2000 	ldr.w	r2, [lr]
 80050ae:	b280      	uxth	r0, r0
 80050b0:	b292      	uxth	r2, r2
 80050b2:	1a12      	subs	r2, r2, r0
 80050b4:	445a      	add	r2, fp
 80050b6:	f8de 0000 	ldr.w	r0, [lr]
 80050ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050be:	b29b      	uxth	r3, r3
 80050c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80050c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80050c8:	b292      	uxth	r2, r2
 80050ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80050ce:	45e1      	cmp	r9, ip
 80050d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80050d4:	f84e 2b04 	str.w	r2, [lr], #4
 80050d8:	d2de      	bcs.n	8005098 <quorem+0x42>
 80050da:	9b00      	ldr	r3, [sp, #0]
 80050dc:	58eb      	ldr	r3, [r5, r3]
 80050de:	b92b      	cbnz	r3, 80050ec <quorem+0x96>
 80050e0:	9b01      	ldr	r3, [sp, #4]
 80050e2:	3b04      	subs	r3, #4
 80050e4:	429d      	cmp	r5, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	d32f      	bcc.n	800514a <quorem+0xf4>
 80050ea:	613c      	str	r4, [r7, #16]
 80050ec:	4638      	mov	r0, r7
 80050ee:	f001 f97f 	bl	80063f0 <__mcmp>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	db25      	blt.n	8005142 <quorem+0xec>
 80050f6:	4629      	mov	r1, r5
 80050f8:	2000      	movs	r0, #0
 80050fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80050fe:	f8d1 c000 	ldr.w	ip, [r1]
 8005102:	fa1f fe82 	uxth.w	lr, r2
 8005106:	fa1f f38c 	uxth.w	r3, ip
 800510a:	eba3 030e 	sub.w	r3, r3, lr
 800510e:	4403      	add	r3, r0
 8005110:	0c12      	lsrs	r2, r2, #16
 8005112:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005116:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800511a:	b29b      	uxth	r3, r3
 800511c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005120:	45c1      	cmp	r9, r8
 8005122:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005126:	f841 3b04 	str.w	r3, [r1], #4
 800512a:	d2e6      	bcs.n	80050fa <quorem+0xa4>
 800512c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005130:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005134:	b922      	cbnz	r2, 8005140 <quorem+0xea>
 8005136:	3b04      	subs	r3, #4
 8005138:	429d      	cmp	r5, r3
 800513a:	461a      	mov	r2, r3
 800513c:	d30b      	bcc.n	8005156 <quorem+0x100>
 800513e:	613c      	str	r4, [r7, #16]
 8005140:	3601      	adds	r6, #1
 8005142:	4630      	mov	r0, r6
 8005144:	b003      	add	sp, #12
 8005146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	3b04      	subs	r3, #4
 800514e:	2a00      	cmp	r2, #0
 8005150:	d1cb      	bne.n	80050ea <quorem+0x94>
 8005152:	3c01      	subs	r4, #1
 8005154:	e7c6      	b.n	80050e4 <quorem+0x8e>
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	3b04      	subs	r3, #4
 800515a:	2a00      	cmp	r2, #0
 800515c:	d1ef      	bne.n	800513e <quorem+0xe8>
 800515e:	3c01      	subs	r4, #1
 8005160:	e7ea      	b.n	8005138 <quorem+0xe2>
 8005162:	2000      	movs	r0, #0
 8005164:	e7ee      	b.n	8005144 <quorem+0xee>
	...

08005168 <_dtoa_r>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	4614      	mov	r4, r2
 800516e:	461d      	mov	r5, r3
 8005170:	69c7      	ldr	r7, [r0, #28]
 8005172:	b097      	sub	sp, #92	@ 0x5c
 8005174:	4681      	mov	r9, r0
 8005176:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800517a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800517c:	b97f      	cbnz	r7, 800519e <_dtoa_r+0x36>
 800517e:	2010      	movs	r0, #16
 8005180:	f000 fe0e 	bl	8005da0 <malloc>
 8005184:	4602      	mov	r2, r0
 8005186:	f8c9 001c 	str.w	r0, [r9, #28]
 800518a:	b920      	cbnz	r0, 8005196 <_dtoa_r+0x2e>
 800518c:	21ef      	movs	r1, #239	@ 0xef
 800518e:	4bac      	ldr	r3, [pc, #688]	@ (8005440 <_dtoa_r+0x2d8>)
 8005190:	48ac      	ldr	r0, [pc, #688]	@ (8005444 <_dtoa_r+0x2dc>)
 8005192:	f001 fcbf 	bl	8006b14 <__assert_func>
 8005196:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800519a:	6007      	str	r7, [r0, #0]
 800519c:	60c7      	str	r7, [r0, #12]
 800519e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	b159      	cbz	r1, 80051be <_dtoa_r+0x56>
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	2301      	movs	r3, #1
 80051aa:	4093      	lsls	r3, r2
 80051ac:	604a      	str	r2, [r1, #4]
 80051ae:	608b      	str	r3, [r1, #8]
 80051b0:	4648      	mov	r0, r9
 80051b2:	f000 feeb 	bl	8005f8c <_Bfree>
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	1e2b      	subs	r3, r5, #0
 80051c0:	bfaf      	iteee	ge
 80051c2:	2300      	movge	r3, #0
 80051c4:	2201      	movlt	r2, #1
 80051c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80051ca:	9307      	strlt	r3, [sp, #28]
 80051cc:	bfa8      	it	ge
 80051ce:	6033      	strge	r3, [r6, #0]
 80051d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80051d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005448 <_dtoa_r+0x2e0>)
 80051d6:	bfb8      	it	lt
 80051d8:	6032      	strlt	r2, [r6, #0]
 80051da:	ea33 0308 	bics.w	r3, r3, r8
 80051de:	d112      	bne.n	8005206 <_dtoa_r+0x9e>
 80051e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80051e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80051ec:	4323      	orrs	r3, r4
 80051ee:	f000 855e 	beq.w	8005cae <_dtoa_r+0xb46>
 80051f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800544c <_dtoa_r+0x2e4>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8560 	beq.w	8005cbe <_dtoa_r+0xb56>
 80051fe:	f10a 0303 	add.w	r3, sl, #3
 8005202:	f000 bd5a 	b.w	8005cba <_dtoa_r+0xb52>
 8005206:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800520a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800520e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005212:	2200      	movs	r2, #0
 8005214:	2300      	movs	r3, #0
 8005216:	f7fb fbc7 	bl	80009a8 <__aeabi_dcmpeq>
 800521a:	4607      	mov	r7, r0
 800521c:	b158      	cbz	r0, 8005236 <_dtoa_r+0xce>
 800521e:	2301      	movs	r3, #1
 8005220:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005226:	b113      	cbz	r3, 800522e <_dtoa_r+0xc6>
 8005228:	4b89      	ldr	r3, [pc, #548]	@ (8005450 <_dtoa_r+0x2e8>)
 800522a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005454 <_dtoa_r+0x2ec>
 8005232:	f000 bd44 	b.w	8005cbe <_dtoa_r+0xb56>
 8005236:	ab14      	add	r3, sp, #80	@ 0x50
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	ab15      	add	r3, sp, #84	@ 0x54
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	4648      	mov	r0, r9
 8005240:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005244:	f001 f984 	bl	8006550 <__d2b>
 8005248:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800524c:	9003      	str	r0, [sp, #12]
 800524e:	2e00      	cmp	r6, #0
 8005250:	d078      	beq.n	8005344 <_dtoa_r+0x1dc>
 8005252:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005258:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800525c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005260:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005264:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005268:	9712      	str	r7, [sp, #72]	@ 0x48
 800526a:	4619      	mov	r1, r3
 800526c:	2200      	movs	r2, #0
 800526e:	4b7a      	ldr	r3, [pc, #488]	@ (8005458 <_dtoa_r+0x2f0>)
 8005270:	f7fa ff7a 	bl	8000168 <__aeabi_dsub>
 8005274:	a36c      	add	r3, pc, #432	@ (adr r3, 8005428 <_dtoa_r+0x2c0>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fb f92d 	bl	80004d8 <__aeabi_dmul>
 800527e:	a36c      	add	r3, pc, #432	@ (adr r3, 8005430 <_dtoa_r+0x2c8>)
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f7fa ff72 	bl	800016c <__adddf3>
 8005288:	4604      	mov	r4, r0
 800528a:	4630      	mov	r0, r6
 800528c:	460d      	mov	r5, r1
 800528e:	f7fb f8b9 	bl	8000404 <__aeabi_i2d>
 8005292:	a369      	add	r3, pc, #420	@ (adr r3, 8005438 <_dtoa_r+0x2d0>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f7fb f91e 	bl	80004d8 <__aeabi_dmul>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4620      	mov	r0, r4
 80052a2:	4629      	mov	r1, r5
 80052a4:	f7fa ff62 	bl	800016c <__adddf3>
 80052a8:	4604      	mov	r4, r0
 80052aa:	460d      	mov	r5, r1
 80052ac:	f7fb fbc4 	bl	8000a38 <__aeabi_d2iz>
 80052b0:	2200      	movs	r2, #0
 80052b2:	4607      	mov	r7, r0
 80052b4:	2300      	movs	r3, #0
 80052b6:	4620      	mov	r0, r4
 80052b8:	4629      	mov	r1, r5
 80052ba:	f7fb fb7f 	bl	80009bc <__aeabi_dcmplt>
 80052be:	b140      	cbz	r0, 80052d2 <_dtoa_r+0x16a>
 80052c0:	4638      	mov	r0, r7
 80052c2:	f7fb f89f 	bl	8000404 <__aeabi_i2d>
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	f7fb fb6d 	bl	80009a8 <__aeabi_dcmpeq>
 80052ce:	b900      	cbnz	r0, 80052d2 <_dtoa_r+0x16a>
 80052d0:	3f01      	subs	r7, #1
 80052d2:	2f16      	cmp	r7, #22
 80052d4:	d854      	bhi.n	8005380 <_dtoa_r+0x218>
 80052d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052da:	4b60      	ldr	r3, [pc, #384]	@ (800545c <_dtoa_r+0x2f4>)
 80052dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f7fb fb6a 	bl	80009bc <__aeabi_dcmplt>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d04b      	beq.n	8005384 <_dtoa_r+0x21c>
 80052ec:	2300      	movs	r3, #0
 80052ee:	3f01      	subs	r7, #1
 80052f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80052f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80052f4:	1b9b      	subs	r3, r3, r6
 80052f6:	1e5a      	subs	r2, r3, #1
 80052f8:	bf49      	itett	mi
 80052fa:	f1c3 0301 	rsbmi	r3, r3, #1
 80052fe:	2300      	movpl	r3, #0
 8005300:	9304      	strmi	r3, [sp, #16]
 8005302:	2300      	movmi	r3, #0
 8005304:	9209      	str	r2, [sp, #36]	@ 0x24
 8005306:	bf54      	ite	pl
 8005308:	9304      	strpl	r3, [sp, #16]
 800530a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800530c:	2f00      	cmp	r7, #0
 800530e:	db3b      	blt.n	8005388 <_dtoa_r+0x220>
 8005310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005312:	970e      	str	r7, [sp, #56]	@ 0x38
 8005314:	443b      	add	r3, r7
 8005316:	9309      	str	r3, [sp, #36]	@ 0x24
 8005318:	2300      	movs	r3, #0
 800531a:	930a      	str	r3, [sp, #40]	@ 0x28
 800531c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800531e:	2b09      	cmp	r3, #9
 8005320:	d865      	bhi.n	80053ee <_dtoa_r+0x286>
 8005322:	2b05      	cmp	r3, #5
 8005324:	bfc4      	itt	gt
 8005326:	3b04      	subgt	r3, #4
 8005328:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800532a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800532c:	bfc8      	it	gt
 800532e:	2400      	movgt	r4, #0
 8005330:	f1a3 0302 	sub.w	r3, r3, #2
 8005334:	bfd8      	it	le
 8005336:	2401      	movle	r4, #1
 8005338:	2b03      	cmp	r3, #3
 800533a:	d864      	bhi.n	8005406 <_dtoa_r+0x29e>
 800533c:	e8df f003 	tbb	[pc, r3]
 8005340:	2c385553 	.word	0x2c385553
 8005344:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005348:	441e      	add	r6, r3
 800534a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800534e:	2b20      	cmp	r3, #32
 8005350:	bfc1      	itttt	gt
 8005352:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005356:	fa08 f803 	lslgt.w	r8, r8, r3
 800535a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800535e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005362:	bfd6      	itet	le
 8005364:	f1c3 0320 	rsble	r3, r3, #32
 8005368:	ea48 0003 	orrgt.w	r0, r8, r3
 800536c:	fa04 f003 	lslle.w	r0, r4, r3
 8005370:	f7fb f838 	bl	80003e4 <__aeabi_ui2d>
 8005374:	2201      	movs	r2, #1
 8005376:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800537a:	3e01      	subs	r6, #1
 800537c:	9212      	str	r2, [sp, #72]	@ 0x48
 800537e:	e774      	b.n	800526a <_dtoa_r+0x102>
 8005380:	2301      	movs	r3, #1
 8005382:	e7b5      	b.n	80052f0 <_dtoa_r+0x188>
 8005384:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005386:	e7b4      	b.n	80052f2 <_dtoa_r+0x18a>
 8005388:	9b04      	ldr	r3, [sp, #16]
 800538a:	1bdb      	subs	r3, r3, r7
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	427b      	negs	r3, r7
 8005390:	930a      	str	r3, [sp, #40]	@ 0x28
 8005392:	2300      	movs	r3, #0
 8005394:	930e      	str	r3, [sp, #56]	@ 0x38
 8005396:	e7c1      	b.n	800531c <_dtoa_r+0x1b4>
 8005398:	2301      	movs	r3, #1
 800539a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800539c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800539e:	eb07 0b03 	add.w	fp, r7, r3
 80053a2:	f10b 0301 	add.w	r3, fp, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	9308      	str	r3, [sp, #32]
 80053aa:	bfb8      	it	lt
 80053ac:	2301      	movlt	r3, #1
 80053ae:	e006      	b.n	80053be <_dtoa_r+0x256>
 80053b0:	2301      	movs	r3, #1
 80053b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	dd28      	ble.n	800540c <_dtoa_r+0x2a4>
 80053ba:	469b      	mov	fp, r3
 80053bc:	9308      	str	r3, [sp, #32]
 80053be:	2100      	movs	r1, #0
 80053c0:	2204      	movs	r2, #4
 80053c2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80053c6:	f102 0514 	add.w	r5, r2, #20
 80053ca:	429d      	cmp	r5, r3
 80053cc:	d926      	bls.n	800541c <_dtoa_r+0x2b4>
 80053ce:	6041      	str	r1, [r0, #4]
 80053d0:	4648      	mov	r0, r9
 80053d2:	f000 fd9b 	bl	8005f0c <_Balloc>
 80053d6:	4682      	mov	sl, r0
 80053d8:	2800      	cmp	r0, #0
 80053da:	d143      	bne.n	8005464 <_dtoa_r+0x2fc>
 80053dc:	4602      	mov	r2, r0
 80053de:	f240 11af 	movw	r1, #431	@ 0x1af
 80053e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005460 <_dtoa_r+0x2f8>)
 80053e4:	e6d4      	b.n	8005190 <_dtoa_r+0x28>
 80053e6:	2300      	movs	r3, #0
 80053e8:	e7e3      	b.n	80053b2 <_dtoa_r+0x24a>
 80053ea:	2300      	movs	r3, #0
 80053ec:	e7d5      	b.n	800539a <_dtoa_r+0x232>
 80053ee:	2401      	movs	r4, #1
 80053f0:	2300      	movs	r3, #0
 80053f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80053f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80053f6:	f04f 3bff 	mov.w	fp, #4294967295
 80053fa:	2200      	movs	r2, #0
 80053fc:	2312      	movs	r3, #18
 80053fe:	f8cd b020 	str.w	fp, [sp, #32]
 8005402:	9221      	str	r2, [sp, #132]	@ 0x84
 8005404:	e7db      	b.n	80053be <_dtoa_r+0x256>
 8005406:	2301      	movs	r3, #1
 8005408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800540a:	e7f4      	b.n	80053f6 <_dtoa_r+0x28e>
 800540c:	f04f 0b01 	mov.w	fp, #1
 8005410:	465b      	mov	r3, fp
 8005412:	f8cd b020 	str.w	fp, [sp, #32]
 8005416:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800541a:	e7d0      	b.n	80053be <_dtoa_r+0x256>
 800541c:	3101      	adds	r1, #1
 800541e:	0052      	lsls	r2, r2, #1
 8005420:	e7d1      	b.n	80053c6 <_dtoa_r+0x25e>
 8005422:	bf00      	nop
 8005424:	f3af 8000 	nop.w
 8005428:	636f4361 	.word	0x636f4361
 800542c:	3fd287a7 	.word	0x3fd287a7
 8005430:	8b60c8b3 	.word	0x8b60c8b3
 8005434:	3fc68a28 	.word	0x3fc68a28
 8005438:	509f79fb 	.word	0x509f79fb
 800543c:	3fd34413 	.word	0x3fd34413
 8005440:	080071f3 	.word	0x080071f3
 8005444:	0800720a 	.word	0x0800720a
 8005448:	7ff00000 	.word	0x7ff00000
 800544c:	080071ef 	.word	0x080071ef
 8005450:	080071c3 	.word	0x080071c3
 8005454:	080071c2 	.word	0x080071c2
 8005458:	3ff80000 	.word	0x3ff80000
 800545c:	08007358 	.word	0x08007358
 8005460:	08007262 	.word	0x08007262
 8005464:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005468:	6018      	str	r0, [r3, #0]
 800546a:	9b08      	ldr	r3, [sp, #32]
 800546c:	2b0e      	cmp	r3, #14
 800546e:	f200 80a1 	bhi.w	80055b4 <_dtoa_r+0x44c>
 8005472:	2c00      	cmp	r4, #0
 8005474:	f000 809e 	beq.w	80055b4 <_dtoa_r+0x44c>
 8005478:	2f00      	cmp	r7, #0
 800547a:	dd33      	ble.n	80054e4 <_dtoa_r+0x37c>
 800547c:	4b9c      	ldr	r3, [pc, #624]	@ (80056f0 <_dtoa_r+0x588>)
 800547e:	f007 020f 	and.w	r2, r7, #15
 8005482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005486:	05f8      	lsls	r0, r7, #23
 8005488:	e9d3 3400 	ldrd	r3, r4, [r3]
 800548c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005490:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005494:	d516      	bpl.n	80054c4 <_dtoa_r+0x35c>
 8005496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800549a:	4b96      	ldr	r3, [pc, #600]	@ (80056f4 <_dtoa_r+0x58c>)
 800549c:	2603      	movs	r6, #3
 800549e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054a2:	f7fb f943 	bl	800072c <__aeabi_ddiv>
 80054a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054aa:	f004 040f 	and.w	r4, r4, #15
 80054ae:	4d91      	ldr	r5, [pc, #580]	@ (80056f4 <_dtoa_r+0x58c>)
 80054b0:	b954      	cbnz	r4, 80054c8 <_dtoa_r+0x360>
 80054b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ba:	f7fb f937 	bl	800072c <__aeabi_ddiv>
 80054be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054c2:	e028      	b.n	8005516 <_dtoa_r+0x3ae>
 80054c4:	2602      	movs	r6, #2
 80054c6:	e7f2      	b.n	80054ae <_dtoa_r+0x346>
 80054c8:	07e1      	lsls	r1, r4, #31
 80054ca:	d508      	bpl.n	80054de <_dtoa_r+0x376>
 80054cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80054d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054d4:	f7fb f800 	bl	80004d8 <__aeabi_dmul>
 80054d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054dc:	3601      	adds	r6, #1
 80054de:	1064      	asrs	r4, r4, #1
 80054e0:	3508      	adds	r5, #8
 80054e2:	e7e5      	b.n	80054b0 <_dtoa_r+0x348>
 80054e4:	f000 80af 	beq.w	8005646 <_dtoa_r+0x4de>
 80054e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054ec:	427c      	negs	r4, r7
 80054ee:	4b80      	ldr	r3, [pc, #512]	@ (80056f0 <_dtoa_r+0x588>)
 80054f0:	f004 020f 	and.w	r2, r4, #15
 80054f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	f7fa ffec 	bl	80004d8 <__aeabi_dmul>
 8005500:	2602      	movs	r6, #2
 8005502:	2300      	movs	r3, #0
 8005504:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005508:	4d7a      	ldr	r5, [pc, #488]	@ (80056f4 <_dtoa_r+0x58c>)
 800550a:	1124      	asrs	r4, r4, #4
 800550c:	2c00      	cmp	r4, #0
 800550e:	f040 808f 	bne.w	8005630 <_dtoa_r+0x4c8>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1d3      	bne.n	80054be <_dtoa_r+0x356>
 8005516:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800551a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8094 	beq.w	800564a <_dtoa_r+0x4e2>
 8005522:	2200      	movs	r2, #0
 8005524:	4620      	mov	r0, r4
 8005526:	4629      	mov	r1, r5
 8005528:	4b73      	ldr	r3, [pc, #460]	@ (80056f8 <_dtoa_r+0x590>)
 800552a:	f7fb fa47 	bl	80009bc <__aeabi_dcmplt>
 800552e:	2800      	cmp	r0, #0
 8005530:	f000 808b 	beq.w	800564a <_dtoa_r+0x4e2>
 8005534:	9b08      	ldr	r3, [sp, #32]
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8087 	beq.w	800564a <_dtoa_r+0x4e2>
 800553c:	f1bb 0f00 	cmp.w	fp, #0
 8005540:	dd34      	ble.n	80055ac <_dtoa_r+0x444>
 8005542:	4620      	mov	r0, r4
 8005544:	2200      	movs	r2, #0
 8005546:	4629      	mov	r1, r5
 8005548:	4b6c      	ldr	r3, [pc, #432]	@ (80056fc <_dtoa_r+0x594>)
 800554a:	f7fa ffc5 	bl	80004d8 <__aeabi_dmul>
 800554e:	465c      	mov	r4, fp
 8005550:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005554:	f107 38ff 	add.w	r8, r7, #4294967295
 8005558:	3601      	adds	r6, #1
 800555a:	4630      	mov	r0, r6
 800555c:	f7fa ff52 	bl	8000404 <__aeabi_i2d>
 8005560:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005564:	f7fa ffb8 	bl	80004d8 <__aeabi_dmul>
 8005568:	2200      	movs	r2, #0
 800556a:	4b65      	ldr	r3, [pc, #404]	@ (8005700 <_dtoa_r+0x598>)
 800556c:	f7fa fdfe 	bl	800016c <__adddf3>
 8005570:	4605      	mov	r5, r0
 8005572:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005576:	2c00      	cmp	r4, #0
 8005578:	d16a      	bne.n	8005650 <_dtoa_r+0x4e8>
 800557a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800557e:	2200      	movs	r2, #0
 8005580:	4b60      	ldr	r3, [pc, #384]	@ (8005704 <_dtoa_r+0x59c>)
 8005582:	f7fa fdf1 	bl	8000168 <__aeabi_dsub>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800558e:	462a      	mov	r2, r5
 8005590:	4633      	mov	r3, r6
 8005592:	f7fb fa31 	bl	80009f8 <__aeabi_dcmpgt>
 8005596:	2800      	cmp	r0, #0
 8005598:	f040 8298 	bne.w	8005acc <_dtoa_r+0x964>
 800559c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055a0:	462a      	mov	r2, r5
 80055a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80055a6:	f7fb fa09 	bl	80009bc <__aeabi_dcmplt>
 80055aa:	bb38      	cbnz	r0, 80055fc <_dtoa_r+0x494>
 80055ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80055b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80055b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f2c0 8157 	blt.w	800586a <_dtoa_r+0x702>
 80055bc:	2f0e      	cmp	r7, #14
 80055be:	f300 8154 	bgt.w	800586a <_dtoa_r+0x702>
 80055c2:	4b4b      	ldr	r3, [pc, #300]	@ (80056f0 <_dtoa_r+0x588>)
 80055c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f280 80e5 	bge.w	80057a2 <_dtoa_r+0x63a>
 80055d8:	9b08      	ldr	r3, [sp, #32]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f300 80e1 	bgt.w	80057a2 <_dtoa_r+0x63a>
 80055e0:	d10c      	bne.n	80055fc <_dtoa_r+0x494>
 80055e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055e6:	2200      	movs	r2, #0
 80055e8:	4b46      	ldr	r3, [pc, #280]	@ (8005704 <_dtoa_r+0x59c>)
 80055ea:	f7fa ff75 	bl	80004d8 <__aeabi_dmul>
 80055ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055f2:	f7fb f9f7 	bl	80009e4 <__aeabi_dcmpge>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	f000 8266 	beq.w	8005ac8 <_dtoa_r+0x960>
 80055fc:	2400      	movs	r4, #0
 80055fe:	4625      	mov	r5, r4
 8005600:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005602:	4656      	mov	r6, sl
 8005604:	ea6f 0803 	mvn.w	r8, r3
 8005608:	2700      	movs	r7, #0
 800560a:	4621      	mov	r1, r4
 800560c:	4648      	mov	r0, r9
 800560e:	f000 fcbd 	bl	8005f8c <_Bfree>
 8005612:	2d00      	cmp	r5, #0
 8005614:	f000 80bd 	beq.w	8005792 <_dtoa_r+0x62a>
 8005618:	b12f      	cbz	r7, 8005626 <_dtoa_r+0x4be>
 800561a:	42af      	cmp	r7, r5
 800561c:	d003      	beq.n	8005626 <_dtoa_r+0x4be>
 800561e:	4639      	mov	r1, r7
 8005620:	4648      	mov	r0, r9
 8005622:	f000 fcb3 	bl	8005f8c <_Bfree>
 8005626:	4629      	mov	r1, r5
 8005628:	4648      	mov	r0, r9
 800562a:	f000 fcaf 	bl	8005f8c <_Bfree>
 800562e:	e0b0      	b.n	8005792 <_dtoa_r+0x62a>
 8005630:	07e2      	lsls	r2, r4, #31
 8005632:	d505      	bpl.n	8005640 <_dtoa_r+0x4d8>
 8005634:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005638:	f7fa ff4e 	bl	80004d8 <__aeabi_dmul>
 800563c:	2301      	movs	r3, #1
 800563e:	3601      	adds	r6, #1
 8005640:	1064      	asrs	r4, r4, #1
 8005642:	3508      	adds	r5, #8
 8005644:	e762      	b.n	800550c <_dtoa_r+0x3a4>
 8005646:	2602      	movs	r6, #2
 8005648:	e765      	b.n	8005516 <_dtoa_r+0x3ae>
 800564a:	46b8      	mov	r8, r7
 800564c:	9c08      	ldr	r4, [sp, #32]
 800564e:	e784      	b.n	800555a <_dtoa_r+0x3f2>
 8005650:	4b27      	ldr	r3, [pc, #156]	@ (80056f0 <_dtoa_r+0x588>)
 8005652:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005654:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005658:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800565c:	4454      	add	r4, sl
 800565e:	2900      	cmp	r1, #0
 8005660:	d054      	beq.n	800570c <_dtoa_r+0x5a4>
 8005662:	2000      	movs	r0, #0
 8005664:	4928      	ldr	r1, [pc, #160]	@ (8005708 <_dtoa_r+0x5a0>)
 8005666:	f7fb f861 	bl	800072c <__aeabi_ddiv>
 800566a:	4633      	mov	r3, r6
 800566c:	462a      	mov	r2, r5
 800566e:	f7fa fd7b 	bl	8000168 <__aeabi_dsub>
 8005672:	4656      	mov	r6, sl
 8005674:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800567c:	f7fb f9dc 	bl	8000a38 <__aeabi_d2iz>
 8005680:	4605      	mov	r5, r0
 8005682:	f7fa febf 	bl	8000404 <__aeabi_i2d>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800568e:	f7fa fd6b 	bl	8000168 <__aeabi_dsub>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	3530      	adds	r5, #48	@ 0x30
 8005698:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800569c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056a0:	f806 5b01 	strb.w	r5, [r6], #1
 80056a4:	f7fb f98a 	bl	80009bc <__aeabi_dcmplt>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d172      	bne.n	8005792 <_dtoa_r+0x62a>
 80056ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056b0:	2000      	movs	r0, #0
 80056b2:	4911      	ldr	r1, [pc, #68]	@ (80056f8 <_dtoa_r+0x590>)
 80056b4:	f7fa fd58 	bl	8000168 <__aeabi_dsub>
 80056b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056bc:	f7fb f97e 	bl	80009bc <__aeabi_dcmplt>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	f040 80b4 	bne.w	800582e <_dtoa_r+0x6c6>
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	f43f af70 	beq.w	80055ac <_dtoa_r+0x444>
 80056cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056d0:	2200      	movs	r2, #0
 80056d2:	4b0a      	ldr	r3, [pc, #40]	@ (80056fc <_dtoa_r+0x594>)
 80056d4:	f7fa ff00 	bl	80004d8 <__aeabi_dmul>
 80056d8:	2200      	movs	r2, #0
 80056da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e2:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <_dtoa_r+0x594>)
 80056e4:	f7fa fef8 	bl	80004d8 <__aeabi_dmul>
 80056e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056ec:	e7c4      	b.n	8005678 <_dtoa_r+0x510>
 80056ee:	bf00      	nop
 80056f0:	08007358 	.word	0x08007358
 80056f4:	08007330 	.word	0x08007330
 80056f8:	3ff00000 	.word	0x3ff00000
 80056fc:	40240000 	.word	0x40240000
 8005700:	401c0000 	.word	0x401c0000
 8005704:	40140000 	.word	0x40140000
 8005708:	3fe00000 	.word	0x3fe00000
 800570c:	4631      	mov	r1, r6
 800570e:	4628      	mov	r0, r5
 8005710:	f7fa fee2 	bl	80004d8 <__aeabi_dmul>
 8005714:	4656      	mov	r6, sl
 8005716:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800571a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800571c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005720:	f7fb f98a 	bl	8000a38 <__aeabi_d2iz>
 8005724:	4605      	mov	r5, r0
 8005726:	f7fa fe6d 	bl	8000404 <__aeabi_i2d>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005732:	f7fa fd19 	bl	8000168 <__aeabi_dsub>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	3530      	adds	r5, #48	@ 0x30
 800573c:	f806 5b01 	strb.w	r5, [r6], #1
 8005740:	42a6      	cmp	r6, r4
 8005742:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	d124      	bne.n	8005796 <_dtoa_r+0x62e>
 800574c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005750:	4bae      	ldr	r3, [pc, #696]	@ (8005a0c <_dtoa_r+0x8a4>)
 8005752:	f7fa fd0b 	bl	800016c <__adddf3>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800575e:	f7fb f94b 	bl	80009f8 <__aeabi_dcmpgt>
 8005762:	2800      	cmp	r0, #0
 8005764:	d163      	bne.n	800582e <_dtoa_r+0x6c6>
 8005766:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800576a:	2000      	movs	r0, #0
 800576c:	49a7      	ldr	r1, [pc, #668]	@ (8005a0c <_dtoa_r+0x8a4>)
 800576e:	f7fa fcfb 	bl	8000168 <__aeabi_dsub>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800577a:	f7fb f91f 	bl	80009bc <__aeabi_dcmplt>
 800577e:	2800      	cmp	r0, #0
 8005780:	f43f af14 	beq.w	80055ac <_dtoa_r+0x444>
 8005784:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005786:	1e73      	subs	r3, r6, #1
 8005788:	9313      	str	r3, [sp, #76]	@ 0x4c
 800578a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800578e:	2b30      	cmp	r3, #48	@ 0x30
 8005790:	d0f8      	beq.n	8005784 <_dtoa_r+0x61c>
 8005792:	4647      	mov	r7, r8
 8005794:	e03b      	b.n	800580e <_dtoa_r+0x6a6>
 8005796:	4b9e      	ldr	r3, [pc, #632]	@ (8005a10 <_dtoa_r+0x8a8>)
 8005798:	f7fa fe9e 	bl	80004d8 <__aeabi_dmul>
 800579c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057a0:	e7bc      	b.n	800571c <_dtoa_r+0x5b4>
 80057a2:	4656      	mov	r6, sl
 80057a4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80057a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ac:	4620      	mov	r0, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fa ffbc 	bl	800072c <__aeabi_ddiv>
 80057b4:	f7fb f940 	bl	8000a38 <__aeabi_d2iz>
 80057b8:	4680      	mov	r8, r0
 80057ba:	f7fa fe23 	bl	8000404 <__aeabi_i2d>
 80057be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057c2:	f7fa fe89 	bl	80004d8 <__aeabi_dmul>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	f7fa fccb 	bl	8000168 <__aeabi_dsub>
 80057d2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80057d6:	9d08      	ldr	r5, [sp, #32]
 80057d8:	f806 4b01 	strb.w	r4, [r6], #1
 80057dc:	eba6 040a 	sub.w	r4, r6, sl
 80057e0:	42a5      	cmp	r5, r4
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	d133      	bne.n	8005850 <_dtoa_r+0x6e8>
 80057e8:	f7fa fcc0 	bl	800016c <__adddf3>
 80057ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f0:	4604      	mov	r4, r0
 80057f2:	460d      	mov	r5, r1
 80057f4:	f7fb f900 	bl	80009f8 <__aeabi_dcmpgt>
 80057f8:	b9c0      	cbnz	r0, 800582c <_dtoa_r+0x6c4>
 80057fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057fe:	4620      	mov	r0, r4
 8005800:	4629      	mov	r1, r5
 8005802:	f7fb f8d1 	bl	80009a8 <__aeabi_dcmpeq>
 8005806:	b110      	cbz	r0, 800580e <_dtoa_r+0x6a6>
 8005808:	f018 0f01 	tst.w	r8, #1
 800580c:	d10e      	bne.n	800582c <_dtoa_r+0x6c4>
 800580e:	4648      	mov	r0, r9
 8005810:	9903      	ldr	r1, [sp, #12]
 8005812:	f000 fbbb 	bl	8005f8c <_Bfree>
 8005816:	2300      	movs	r3, #0
 8005818:	7033      	strb	r3, [r6, #0]
 800581a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800581c:	3701      	adds	r7, #1
 800581e:	601f      	str	r7, [r3, #0]
 8005820:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 824b 	beq.w	8005cbe <_dtoa_r+0xb56>
 8005828:	601e      	str	r6, [r3, #0]
 800582a:	e248      	b.n	8005cbe <_dtoa_r+0xb56>
 800582c:	46b8      	mov	r8, r7
 800582e:	4633      	mov	r3, r6
 8005830:	461e      	mov	r6, r3
 8005832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005836:	2a39      	cmp	r2, #57	@ 0x39
 8005838:	d106      	bne.n	8005848 <_dtoa_r+0x6e0>
 800583a:	459a      	cmp	sl, r3
 800583c:	d1f8      	bne.n	8005830 <_dtoa_r+0x6c8>
 800583e:	2230      	movs	r2, #48	@ 0x30
 8005840:	f108 0801 	add.w	r8, r8, #1
 8005844:	f88a 2000 	strb.w	r2, [sl]
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	3201      	adds	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	e7a0      	b.n	8005792 <_dtoa_r+0x62a>
 8005850:	2200      	movs	r2, #0
 8005852:	4b6f      	ldr	r3, [pc, #444]	@ (8005a10 <_dtoa_r+0x8a8>)
 8005854:	f7fa fe40 	bl	80004d8 <__aeabi_dmul>
 8005858:	2200      	movs	r2, #0
 800585a:	2300      	movs	r3, #0
 800585c:	4604      	mov	r4, r0
 800585e:	460d      	mov	r5, r1
 8005860:	f7fb f8a2 	bl	80009a8 <__aeabi_dcmpeq>
 8005864:	2800      	cmp	r0, #0
 8005866:	d09f      	beq.n	80057a8 <_dtoa_r+0x640>
 8005868:	e7d1      	b.n	800580e <_dtoa_r+0x6a6>
 800586a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800586c:	2a00      	cmp	r2, #0
 800586e:	f000 80ea 	beq.w	8005a46 <_dtoa_r+0x8de>
 8005872:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005874:	2a01      	cmp	r2, #1
 8005876:	f300 80cd 	bgt.w	8005a14 <_dtoa_r+0x8ac>
 800587a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800587c:	2a00      	cmp	r2, #0
 800587e:	f000 80c1 	beq.w	8005a04 <_dtoa_r+0x89c>
 8005882:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005886:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005888:	9e04      	ldr	r6, [sp, #16]
 800588a:	9a04      	ldr	r2, [sp, #16]
 800588c:	2101      	movs	r1, #1
 800588e:	441a      	add	r2, r3
 8005890:	9204      	str	r2, [sp, #16]
 8005892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005894:	4648      	mov	r0, r9
 8005896:	441a      	add	r2, r3
 8005898:	9209      	str	r2, [sp, #36]	@ 0x24
 800589a:	f000 fc2b 	bl	80060f4 <__i2b>
 800589e:	4605      	mov	r5, r0
 80058a0:	b166      	cbz	r6, 80058bc <_dtoa_r+0x754>
 80058a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dd09      	ble.n	80058bc <_dtoa_r+0x754>
 80058a8:	42b3      	cmp	r3, r6
 80058aa:	bfa8      	it	ge
 80058ac:	4633      	movge	r3, r6
 80058ae:	9a04      	ldr	r2, [sp, #16]
 80058b0:	1af6      	subs	r6, r6, r3
 80058b2:	1ad2      	subs	r2, r2, r3
 80058b4:	9204      	str	r2, [sp, #16]
 80058b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80058bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058be:	b30b      	cbz	r3, 8005904 <_dtoa_r+0x79c>
 80058c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80c6 	beq.w	8005a54 <_dtoa_r+0x8ec>
 80058c8:	2c00      	cmp	r4, #0
 80058ca:	f000 80c0 	beq.w	8005a4e <_dtoa_r+0x8e6>
 80058ce:	4629      	mov	r1, r5
 80058d0:	4622      	mov	r2, r4
 80058d2:	4648      	mov	r0, r9
 80058d4:	f000 fcc6 	bl	8006264 <__pow5mult>
 80058d8:	9a03      	ldr	r2, [sp, #12]
 80058da:	4601      	mov	r1, r0
 80058dc:	4605      	mov	r5, r0
 80058de:	4648      	mov	r0, r9
 80058e0:	f000 fc1e 	bl	8006120 <__multiply>
 80058e4:	9903      	ldr	r1, [sp, #12]
 80058e6:	4680      	mov	r8, r0
 80058e8:	4648      	mov	r0, r9
 80058ea:	f000 fb4f 	bl	8005f8c <_Bfree>
 80058ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058f0:	1b1b      	subs	r3, r3, r4
 80058f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80058f4:	f000 80b1 	beq.w	8005a5a <_dtoa_r+0x8f2>
 80058f8:	4641      	mov	r1, r8
 80058fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058fc:	4648      	mov	r0, r9
 80058fe:	f000 fcb1 	bl	8006264 <__pow5mult>
 8005902:	9003      	str	r0, [sp, #12]
 8005904:	2101      	movs	r1, #1
 8005906:	4648      	mov	r0, r9
 8005908:	f000 fbf4 	bl	80060f4 <__i2b>
 800590c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800590e:	4604      	mov	r4, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 81d8 	beq.w	8005cc6 <_dtoa_r+0xb5e>
 8005916:	461a      	mov	r2, r3
 8005918:	4601      	mov	r1, r0
 800591a:	4648      	mov	r0, r9
 800591c:	f000 fca2 	bl	8006264 <__pow5mult>
 8005920:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005922:	4604      	mov	r4, r0
 8005924:	2b01      	cmp	r3, #1
 8005926:	f300 809f 	bgt.w	8005a68 <_dtoa_r+0x900>
 800592a:	9b06      	ldr	r3, [sp, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 8097 	bne.w	8005a60 <_dtoa_r+0x8f8>
 8005932:	9b07      	ldr	r3, [sp, #28]
 8005934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005938:	2b00      	cmp	r3, #0
 800593a:	f040 8093 	bne.w	8005a64 <_dtoa_r+0x8fc>
 800593e:	9b07      	ldr	r3, [sp, #28]
 8005940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005944:	0d1b      	lsrs	r3, r3, #20
 8005946:	051b      	lsls	r3, r3, #20
 8005948:	b133      	cbz	r3, 8005958 <_dtoa_r+0x7f0>
 800594a:	9b04      	ldr	r3, [sp, #16]
 800594c:	3301      	adds	r3, #1
 800594e:	9304      	str	r3, [sp, #16]
 8005950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005952:	3301      	adds	r3, #1
 8005954:	9309      	str	r3, [sp, #36]	@ 0x24
 8005956:	2301      	movs	r3, #1
 8005958:	930a      	str	r3, [sp, #40]	@ 0x28
 800595a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 81b8 	beq.w	8005cd2 <_dtoa_r+0xb6a>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005968:	6918      	ldr	r0, [r3, #16]
 800596a:	f000 fb77 	bl	800605c <__hi0bits>
 800596e:	f1c0 0020 	rsb	r0, r0, #32
 8005972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005974:	4418      	add	r0, r3
 8005976:	f010 001f 	ands.w	r0, r0, #31
 800597a:	f000 8082 	beq.w	8005a82 <_dtoa_r+0x91a>
 800597e:	f1c0 0320 	rsb	r3, r0, #32
 8005982:	2b04      	cmp	r3, #4
 8005984:	dd73      	ble.n	8005a6e <_dtoa_r+0x906>
 8005986:	9b04      	ldr	r3, [sp, #16]
 8005988:	f1c0 001c 	rsb	r0, r0, #28
 800598c:	4403      	add	r3, r0
 800598e:	9304      	str	r3, [sp, #16]
 8005990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005992:	4406      	add	r6, r0
 8005994:	4403      	add	r3, r0
 8005996:	9309      	str	r3, [sp, #36]	@ 0x24
 8005998:	9b04      	ldr	r3, [sp, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	dd05      	ble.n	80059aa <_dtoa_r+0x842>
 800599e:	461a      	mov	r2, r3
 80059a0:	4648      	mov	r0, r9
 80059a2:	9903      	ldr	r1, [sp, #12]
 80059a4:	f000 fcb8 	bl	8006318 <__lshift>
 80059a8:	9003      	str	r0, [sp, #12]
 80059aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	dd05      	ble.n	80059bc <_dtoa_r+0x854>
 80059b0:	4621      	mov	r1, r4
 80059b2:	461a      	mov	r2, r3
 80059b4:	4648      	mov	r0, r9
 80059b6:	f000 fcaf 	bl	8006318 <__lshift>
 80059ba:	4604      	mov	r4, r0
 80059bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d061      	beq.n	8005a86 <_dtoa_r+0x91e>
 80059c2:	4621      	mov	r1, r4
 80059c4:	9803      	ldr	r0, [sp, #12]
 80059c6:	f000 fd13 	bl	80063f0 <__mcmp>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	da5b      	bge.n	8005a86 <_dtoa_r+0x91e>
 80059ce:	2300      	movs	r3, #0
 80059d0:	220a      	movs	r2, #10
 80059d2:	4648      	mov	r0, r9
 80059d4:	9903      	ldr	r1, [sp, #12]
 80059d6:	f000 fafb 	bl	8005fd0 <__multadd>
 80059da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059dc:	f107 38ff 	add.w	r8, r7, #4294967295
 80059e0:	9003      	str	r0, [sp, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 8177 	beq.w	8005cd6 <_dtoa_r+0xb6e>
 80059e8:	4629      	mov	r1, r5
 80059ea:	2300      	movs	r3, #0
 80059ec:	220a      	movs	r2, #10
 80059ee:	4648      	mov	r0, r9
 80059f0:	f000 faee 	bl	8005fd0 <__multadd>
 80059f4:	f1bb 0f00 	cmp.w	fp, #0
 80059f8:	4605      	mov	r5, r0
 80059fa:	dc6f      	bgt.n	8005adc <_dtoa_r+0x974>
 80059fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	dc49      	bgt.n	8005a96 <_dtoa_r+0x92e>
 8005a02:	e06b      	b.n	8005adc <_dtoa_r+0x974>
 8005a04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005a0a:	e73c      	b.n	8005886 <_dtoa_r+0x71e>
 8005a0c:	3fe00000 	.word	0x3fe00000
 8005a10:	40240000 	.word	0x40240000
 8005a14:	9b08      	ldr	r3, [sp, #32]
 8005a16:	1e5c      	subs	r4, r3, #1
 8005a18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a1a:	42a3      	cmp	r3, r4
 8005a1c:	db09      	blt.n	8005a32 <_dtoa_r+0x8ca>
 8005a1e:	1b1c      	subs	r4, r3, r4
 8005a20:	9b08      	ldr	r3, [sp, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f6bf af30 	bge.w	8005888 <_dtoa_r+0x720>
 8005a28:	9b04      	ldr	r3, [sp, #16]
 8005a2a:	9a08      	ldr	r2, [sp, #32]
 8005a2c:	1a9e      	subs	r6, r3, r2
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e72b      	b.n	800588a <_dtoa_r+0x722>
 8005a32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a36:	1ae3      	subs	r3, r4, r3
 8005a38:	441a      	add	r2, r3
 8005a3a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005a3c:	9e04      	ldr	r6, [sp, #16]
 8005a3e:	2400      	movs	r4, #0
 8005a40:	9b08      	ldr	r3, [sp, #32]
 8005a42:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a44:	e721      	b.n	800588a <_dtoa_r+0x722>
 8005a46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a48:	9e04      	ldr	r6, [sp, #16]
 8005a4a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005a4c:	e728      	b.n	80058a0 <_dtoa_r+0x738>
 8005a4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a52:	e751      	b.n	80058f8 <_dtoa_r+0x790>
 8005a54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a56:	9903      	ldr	r1, [sp, #12]
 8005a58:	e750      	b.n	80058fc <_dtoa_r+0x794>
 8005a5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a5e:	e751      	b.n	8005904 <_dtoa_r+0x79c>
 8005a60:	2300      	movs	r3, #0
 8005a62:	e779      	b.n	8005958 <_dtoa_r+0x7f0>
 8005a64:	9b06      	ldr	r3, [sp, #24]
 8005a66:	e777      	b.n	8005958 <_dtoa_r+0x7f0>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a6c:	e779      	b.n	8005962 <_dtoa_r+0x7fa>
 8005a6e:	d093      	beq.n	8005998 <_dtoa_r+0x830>
 8005a70:	9a04      	ldr	r2, [sp, #16]
 8005a72:	331c      	adds	r3, #28
 8005a74:	441a      	add	r2, r3
 8005a76:	9204      	str	r2, [sp, #16]
 8005a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a7a:	441e      	add	r6, r3
 8005a7c:	441a      	add	r2, r3
 8005a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a80:	e78a      	b.n	8005998 <_dtoa_r+0x830>
 8005a82:	4603      	mov	r3, r0
 8005a84:	e7f4      	b.n	8005a70 <_dtoa_r+0x908>
 8005a86:	9b08      	ldr	r3, [sp, #32]
 8005a88:	46b8      	mov	r8, r7
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dc20      	bgt.n	8005ad0 <_dtoa_r+0x968>
 8005a8e:	469b      	mov	fp, r3
 8005a90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	dd1e      	ble.n	8005ad4 <_dtoa_r+0x96c>
 8005a96:	f1bb 0f00 	cmp.w	fp, #0
 8005a9a:	f47f adb1 	bne.w	8005600 <_dtoa_r+0x498>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	465b      	mov	r3, fp
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	4648      	mov	r0, r9
 8005aa6:	f000 fa93 	bl	8005fd0 <__multadd>
 8005aaa:	4601      	mov	r1, r0
 8005aac:	4604      	mov	r4, r0
 8005aae:	9803      	ldr	r0, [sp, #12]
 8005ab0:	f000 fc9e 	bl	80063f0 <__mcmp>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f77f ada3 	ble.w	8005600 <_dtoa_r+0x498>
 8005aba:	4656      	mov	r6, sl
 8005abc:	2331      	movs	r3, #49	@ 0x31
 8005abe:	f108 0801 	add.w	r8, r8, #1
 8005ac2:	f806 3b01 	strb.w	r3, [r6], #1
 8005ac6:	e59f      	b.n	8005608 <_dtoa_r+0x4a0>
 8005ac8:	46b8      	mov	r8, r7
 8005aca:	9c08      	ldr	r4, [sp, #32]
 8005acc:	4625      	mov	r5, r4
 8005ace:	e7f4      	b.n	8005aba <_dtoa_r+0x952>
 8005ad0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005ad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 8101 	beq.w	8005cde <_dtoa_r+0xb76>
 8005adc:	2e00      	cmp	r6, #0
 8005ade:	dd05      	ble.n	8005aec <_dtoa_r+0x984>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4632      	mov	r2, r6
 8005ae4:	4648      	mov	r0, r9
 8005ae6:	f000 fc17 	bl	8006318 <__lshift>
 8005aea:	4605      	mov	r5, r0
 8005aec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d05c      	beq.n	8005bac <_dtoa_r+0xa44>
 8005af2:	4648      	mov	r0, r9
 8005af4:	6869      	ldr	r1, [r5, #4]
 8005af6:	f000 fa09 	bl	8005f0c <_Balloc>
 8005afa:	4606      	mov	r6, r0
 8005afc:	b928      	cbnz	r0, 8005b0a <_dtoa_r+0x9a2>
 8005afe:	4602      	mov	r2, r0
 8005b00:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005b04:	4b80      	ldr	r3, [pc, #512]	@ (8005d08 <_dtoa_r+0xba0>)
 8005b06:	f7ff bb43 	b.w	8005190 <_dtoa_r+0x28>
 8005b0a:	692a      	ldr	r2, [r5, #16]
 8005b0c:	f105 010c 	add.w	r1, r5, #12
 8005b10:	3202      	adds	r2, #2
 8005b12:	0092      	lsls	r2, r2, #2
 8005b14:	300c      	adds	r0, #12
 8005b16:	f000 ffef 	bl	8006af8 <memcpy>
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4648      	mov	r0, r9
 8005b20:	f000 fbfa 	bl	8006318 <__lshift>
 8005b24:	462f      	mov	r7, r5
 8005b26:	4605      	mov	r5, r0
 8005b28:	f10a 0301 	add.w	r3, sl, #1
 8005b2c:	9304      	str	r3, [sp, #16]
 8005b2e:	eb0a 030b 	add.w	r3, sl, fp
 8005b32:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b34:	9b06      	ldr	r3, [sp, #24]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b3c:	9b04      	ldr	r3, [sp, #16]
 8005b3e:	4621      	mov	r1, r4
 8005b40:	9803      	ldr	r0, [sp, #12]
 8005b42:	f103 3bff 	add.w	fp, r3, #4294967295
 8005b46:	f7ff fa86 	bl	8005056 <quorem>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	3330      	adds	r3, #48	@ 0x30
 8005b50:	9006      	str	r0, [sp, #24]
 8005b52:	9803      	ldr	r0, [sp, #12]
 8005b54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b56:	f000 fc4b 	bl	80063f0 <__mcmp>
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	9008      	str	r0, [sp, #32]
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4648      	mov	r0, r9
 8005b62:	f000 fc61 	bl	8006428 <__mdiff>
 8005b66:	68c2      	ldr	r2, [r0, #12]
 8005b68:	4606      	mov	r6, r0
 8005b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b6c:	bb02      	cbnz	r2, 8005bb0 <_dtoa_r+0xa48>
 8005b6e:	4601      	mov	r1, r0
 8005b70:	9803      	ldr	r0, [sp, #12]
 8005b72:	f000 fc3d 	bl	80063f0 <__mcmp>
 8005b76:	4602      	mov	r2, r0
 8005b78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4648      	mov	r0, r9
 8005b7e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005b82:	f000 fa03 	bl	8005f8c <_Bfree>
 8005b86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005b8a:	9e04      	ldr	r6, [sp, #16]
 8005b8c:	ea42 0103 	orr.w	r1, r2, r3
 8005b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b92:	4319      	orrs	r1, r3
 8005b94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b96:	d10d      	bne.n	8005bb4 <_dtoa_r+0xa4c>
 8005b98:	2b39      	cmp	r3, #57	@ 0x39
 8005b9a:	d027      	beq.n	8005bec <_dtoa_r+0xa84>
 8005b9c:	9a08      	ldr	r2, [sp, #32]
 8005b9e:	2a00      	cmp	r2, #0
 8005ba0:	dd01      	ble.n	8005ba6 <_dtoa_r+0xa3e>
 8005ba2:	9b06      	ldr	r3, [sp, #24]
 8005ba4:	3331      	adds	r3, #49	@ 0x31
 8005ba6:	f88b 3000 	strb.w	r3, [fp]
 8005baa:	e52e      	b.n	800560a <_dtoa_r+0x4a2>
 8005bac:	4628      	mov	r0, r5
 8005bae:	e7b9      	b.n	8005b24 <_dtoa_r+0x9bc>
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	e7e2      	b.n	8005b7a <_dtoa_r+0xa12>
 8005bb4:	9908      	ldr	r1, [sp, #32]
 8005bb6:	2900      	cmp	r1, #0
 8005bb8:	db04      	blt.n	8005bc4 <_dtoa_r+0xa5c>
 8005bba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005bbc:	4301      	orrs	r1, r0
 8005bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bc0:	4301      	orrs	r1, r0
 8005bc2:	d120      	bne.n	8005c06 <_dtoa_r+0xa9e>
 8005bc4:	2a00      	cmp	r2, #0
 8005bc6:	ddee      	ble.n	8005ba6 <_dtoa_r+0xa3e>
 8005bc8:	2201      	movs	r2, #1
 8005bca:	9903      	ldr	r1, [sp, #12]
 8005bcc:	4648      	mov	r0, r9
 8005bce:	9304      	str	r3, [sp, #16]
 8005bd0:	f000 fba2 	bl	8006318 <__lshift>
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	9003      	str	r0, [sp, #12]
 8005bd8:	f000 fc0a 	bl	80063f0 <__mcmp>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	dc02      	bgt.n	8005be8 <_dtoa_r+0xa80>
 8005be2:	d1e0      	bne.n	8005ba6 <_dtoa_r+0xa3e>
 8005be4:	07da      	lsls	r2, r3, #31
 8005be6:	d5de      	bpl.n	8005ba6 <_dtoa_r+0xa3e>
 8005be8:	2b39      	cmp	r3, #57	@ 0x39
 8005bea:	d1da      	bne.n	8005ba2 <_dtoa_r+0xa3a>
 8005bec:	2339      	movs	r3, #57	@ 0x39
 8005bee:	f88b 3000 	strb.w	r3, [fp]
 8005bf2:	4633      	mov	r3, r6
 8005bf4:	461e      	mov	r6, r3
 8005bf6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	2a39      	cmp	r2, #57	@ 0x39
 8005bfe:	d04e      	beq.n	8005c9e <_dtoa_r+0xb36>
 8005c00:	3201      	adds	r2, #1
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e501      	b.n	800560a <_dtoa_r+0x4a2>
 8005c06:	2a00      	cmp	r2, #0
 8005c08:	dd03      	ble.n	8005c12 <_dtoa_r+0xaaa>
 8005c0a:	2b39      	cmp	r3, #57	@ 0x39
 8005c0c:	d0ee      	beq.n	8005bec <_dtoa_r+0xa84>
 8005c0e:	3301      	adds	r3, #1
 8005c10:	e7c9      	b.n	8005ba6 <_dtoa_r+0xa3e>
 8005c12:	9a04      	ldr	r2, [sp, #16]
 8005c14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005c16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c1a:	428a      	cmp	r2, r1
 8005c1c:	d028      	beq.n	8005c70 <_dtoa_r+0xb08>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	220a      	movs	r2, #10
 8005c22:	9903      	ldr	r1, [sp, #12]
 8005c24:	4648      	mov	r0, r9
 8005c26:	f000 f9d3 	bl	8005fd0 <__multadd>
 8005c2a:	42af      	cmp	r7, r5
 8005c2c:	9003      	str	r0, [sp, #12]
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	f04f 020a 	mov.w	r2, #10
 8005c36:	4639      	mov	r1, r7
 8005c38:	4648      	mov	r0, r9
 8005c3a:	d107      	bne.n	8005c4c <_dtoa_r+0xae4>
 8005c3c:	f000 f9c8 	bl	8005fd0 <__multadd>
 8005c40:	4607      	mov	r7, r0
 8005c42:	4605      	mov	r5, r0
 8005c44:	9b04      	ldr	r3, [sp, #16]
 8005c46:	3301      	adds	r3, #1
 8005c48:	9304      	str	r3, [sp, #16]
 8005c4a:	e777      	b.n	8005b3c <_dtoa_r+0x9d4>
 8005c4c:	f000 f9c0 	bl	8005fd0 <__multadd>
 8005c50:	4629      	mov	r1, r5
 8005c52:	4607      	mov	r7, r0
 8005c54:	2300      	movs	r3, #0
 8005c56:	220a      	movs	r2, #10
 8005c58:	4648      	mov	r0, r9
 8005c5a:	f000 f9b9 	bl	8005fd0 <__multadd>
 8005c5e:	4605      	mov	r5, r0
 8005c60:	e7f0      	b.n	8005c44 <_dtoa_r+0xadc>
 8005c62:	f1bb 0f00 	cmp.w	fp, #0
 8005c66:	bfcc      	ite	gt
 8005c68:	465e      	movgt	r6, fp
 8005c6a:	2601      	movle	r6, #1
 8005c6c:	2700      	movs	r7, #0
 8005c6e:	4456      	add	r6, sl
 8005c70:	2201      	movs	r2, #1
 8005c72:	9903      	ldr	r1, [sp, #12]
 8005c74:	4648      	mov	r0, r9
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	f000 fb4e 	bl	8006318 <__lshift>
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	9003      	str	r0, [sp, #12]
 8005c80:	f000 fbb6 	bl	80063f0 <__mcmp>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	dcb4      	bgt.n	8005bf2 <_dtoa_r+0xa8a>
 8005c88:	d102      	bne.n	8005c90 <_dtoa_r+0xb28>
 8005c8a:	9b04      	ldr	r3, [sp, #16]
 8005c8c:	07db      	lsls	r3, r3, #31
 8005c8e:	d4b0      	bmi.n	8005bf2 <_dtoa_r+0xa8a>
 8005c90:	4633      	mov	r3, r6
 8005c92:	461e      	mov	r6, r3
 8005c94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c98:	2a30      	cmp	r2, #48	@ 0x30
 8005c9a:	d0fa      	beq.n	8005c92 <_dtoa_r+0xb2a>
 8005c9c:	e4b5      	b.n	800560a <_dtoa_r+0x4a2>
 8005c9e:	459a      	cmp	sl, r3
 8005ca0:	d1a8      	bne.n	8005bf4 <_dtoa_r+0xa8c>
 8005ca2:	2331      	movs	r3, #49	@ 0x31
 8005ca4:	f108 0801 	add.w	r8, r8, #1
 8005ca8:	f88a 3000 	strb.w	r3, [sl]
 8005cac:	e4ad      	b.n	800560a <_dtoa_r+0x4a2>
 8005cae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005d0c <_dtoa_r+0xba4>
 8005cb4:	b11b      	cbz	r3, 8005cbe <_dtoa_r+0xb56>
 8005cb6:	f10a 0308 	add.w	r3, sl, #8
 8005cba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4650      	mov	r0, sl
 8005cc0:	b017      	add	sp, #92	@ 0x5c
 8005cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	f77f ae2e 	ble.w	800592a <_dtoa_r+0x7c2>
 8005cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	e64d      	b.n	8005972 <_dtoa_r+0x80a>
 8005cd6:	f1bb 0f00 	cmp.w	fp, #0
 8005cda:	f77f aed9 	ble.w	8005a90 <_dtoa_r+0x928>
 8005cde:	4656      	mov	r6, sl
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	9803      	ldr	r0, [sp, #12]
 8005ce4:	f7ff f9b7 	bl	8005056 <quorem>
 8005ce8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005cec:	f806 3b01 	strb.w	r3, [r6], #1
 8005cf0:	eba6 020a 	sub.w	r2, r6, sl
 8005cf4:	4593      	cmp	fp, r2
 8005cf6:	ddb4      	ble.n	8005c62 <_dtoa_r+0xafa>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	220a      	movs	r2, #10
 8005cfc:	4648      	mov	r0, r9
 8005cfe:	9903      	ldr	r1, [sp, #12]
 8005d00:	f000 f966 	bl	8005fd0 <__multadd>
 8005d04:	9003      	str	r0, [sp, #12]
 8005d06:	e7eb      	b.n	8005ce0 <_dtoa_r+0xb78>
 8005d08:	08007262 	.word	0x08007262
 8005d0c:	080071e6 	.word	0x080071e6

08005d10 <_free_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4605      	mov	r5, r0
 8005d14:	2900      	cmp	r1, #0
 8005d16:	d040      	beq.n	8005d9a <_free_r+0x8a>
 8005d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d1c:	1f0c      	subs	r4, r1, #4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bfb8      	it	lt
 8005d22:	18e4      	addlt	r4, r4, r3
 8005d24:	f000 f8e6 	bl	8005ef4 <__malloc_lock>
 8005d28:	4a1c      	ldr	r2, [pc, #112]	@ (8005d9c <_free_r+0x8c>)
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	b933      	cbnz	r3, 8005d3c <_free_r+0x2c>
 8005d2e:	6063      	str	r3, [r4, #4]
 8005d30:	6014      	str	r4, [r2, #0]
 8005d32:	4628      	mov	r0, r5
 8005d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d38:	f000 b8e2 	b.w	8005f00 <__malloc_unlock>
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d908      	bls.n	8005d52 <_free_r+0x42>
 8005d40:	6820      	ldr	r0, [r4, #0]
 8005d42:	1821      	adds	r1, r4, r0
 8005d44:	428b      	cmp	r3, r1
 8005d46:	bf01      	itttt	eq
 8005d48:	6819      	ldreq	r1, [r3, #0]
 8005d4a:	685b      	ldreq	r3, [r3, #4]
 8005d4c:	1809      	addeq	r1, r1, r0
 8005d4e:	6021      	streq	r1, [r4, #0]
 8005d50:	e7ed      	b.n	8005d2e <_free_r+0x1e>
 8005d52:	461a      	mov	r2, r3
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	b10b      	cbz	r3, 8005d5c <_free_r+0x4c>
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	d9fa      	bls.n	8005d52 <_free_r+0x42>
 8005d5c:	6811      	ldr	r1, [r2, #0]
 8005d5e:	1850      	adds	r0, r2, r1
 8005d60:	42a0      	cmp	r0, r4
 8005d62:	d10b      	bne.n	8005d7c <_free_r+0x6c>
 8005d64:	6820      	ldr	r0, [r4, #0]
 8005d66:	4401      	add	r1, r0
 8005d68:	1850      	adds	r0, r2, r1
 8005d6a:	4283      	cmp	r3, r0
 8005d6c:	6011      	str	r1, [r2, #0]
 8005d6e:	d1e0      	bne.n	8005d32 <_free_r+0x22>
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4408      	add	r0, r1
 8005d76:	6010      	str	r0, [r2, #0]
 8005d78:	6053      	str	r3, [r2, #4]
 8005d7a:	e7da      	b.n	8005d32 <_free_r+0x22>
 8005d7c:	d902      	bls.n	8005d84 <_free_r+0x74>
 8005d7e:	230c      	movs	r3, #12
 8005d80:	602b      	str	r3, [r5, #0]
 8005d82:	e7d6      	b.n	8005d32 <_free_r+0x22>
 8005d84:	6820      	ldr	r0, [r4, #0]
 8005d86:	1821      	adds	r1, r4, r0
 8005d88:	428b      	cmp	r3, r1
 8005d8a:	bf01      	itttt	eq
 8005d8c:	6819      	ldreq	r1, [r3, #0]
 8005d8e:	685b      	ldreq	r3, [r3, #4]
 8005d90:	1809      	addeq	r1, r1, r0
 8005d92:	6021      	streq	r1, [r4, #0]
 8005d94:	6063      	str	r3, [r4, #4]
 8005d96:	6054      	str	r4, [r2, #4]
 8005d98:	e7cb      	b.n	8005d32 <_free_r+0x22>
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	20000510 	.word	0x20000510

08005da0 <malloc>:
 8005da0:	4b02      	ldr	r3, [pc, #8]	@ (8005dac <malloc+0xc>)
 8005da2:	4601      	mov	r1, r0
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	f000 b825 	b.w	8005df4 <_malloc_r>
 8005daa:	bf00      	nop
 8005dac:	20000018 	.word	0x20000018

08005db0 <sbrk_aligned>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	4e0f      	ldr	r6, [pc, #60]	@ (8005df0 <sbrk_aligned+0x40>)
 8005db4:	460c      	mov	r4, r1
 8005db6:	6831      	ldr	r1, [r6, #0]
 8005db8:	4605      	mov	r5, r0
 8005dba:	b911      	cbnz	r1, 8005dc2 <sbrk_aligned+0x12>
 8005dbc:	f000 fe8c 	bl	8006ad8 <_sbrk_r>
 8005dc0:	6030      	str	r0, [r6, #0]
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f000 fe87 	bl	8006ad8 <_sbrk_r>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	d103      	bne.n	8005dd6 <sbrk_aligned+0x26>
 8005dce:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	bd70      	pop	{r4, r5, r6, pc}
 8005dd6:	1cc4      	adds	r4, r0, #3
 8005dd8:	f024 0403 	bic.w	r4, r4, #3
 8005ddc:	42a0      	cmp	r0, r4
 8005dde:	d0f8      	beq.n	8005dd2 <sbrk_aligned+0x22>
 8005de0:	1a21      	subs	r1, r4, r0
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 fe78 	bl	8006ad8 <_sbrk_r>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d1f2      	bne.n	8005dd2 <sbrk_aligned+0x22>
 8005dec:	e7ef      	b.n	8005dce <sbrk_aligned+0x1e>
 8005dee:	bf00      	nop
 8005df0:	2000050c 	.word	0x2000050c

08005df4 <_malloc_r>:
 8005df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df8:	1ccd      	adds	r5, r1, #3
 8005dfa:	f025 0503 	bic.w	r5, r5, #3
 8005dfe:	3508      	adds	r5, #8
 8005e00:	2d0c      	cmp	r5, #12
 8005e02:	bf38      	it	cc
 8005e04:	250c      	movcc	r5, #12
 8005e06:	2d00      	cmp	r5, #0
 8005e08:	4606      	mov	r6, r0
 8005e0a:	db01      	blt.n	8005e10 <_malloc_r+0x1c>
 8005e0c:	42a9      	cmp	r1, r5
 8005e0e:	d904      	bls.n	8005e1a <_malloc_r+0x26>
 8005e10:	230c      	movs	r3, #12
 8005e12:	6033      	str	r3, [r6, #0]
 8005e14:	2000      	movs	r0, #0
 8005e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ef0 <_malloc_r+0xfc>
 8005e1e:	f000 f869 	bl	8005ef4 <__malloc_lock>
 8005e22:	f8d8 3000 	ldr.w	r3, [r8]
 8005e26:	461c      	mov	r4, r3
 8005e28:	bb44      	cbnz	r4, 8005e7c <_malloc_r+0x88>
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f7ff ffbf 	bl	8005db0 <sbrk_aligned>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	4604      	mov	r4, r0
 8005e36:	d158      	bne.n	8005eea <_malloc_r+0xf6>
 8005e38:	f8d8 4000 	ldr.w	r4, [r8]
 8005e3c:	4627      	mov	r7, r4
 8005e3e:	2f00      	cmp	r7, #0
 8005e40:	d143      	bne.n	8005eca <_malloc_r+0xd6>
 8005e42:	2c00      	cmp	r4, #0
 8005e44:	d04b      	beq.n	8005ede <_malloc_r+0xea>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	eb04 0903 	add.w	r9, r4, r3
 8005e50:	f000 fe42 	bl	8006ad8 <_sbrk_r>
 8005e54:	4581      	cmp	r9, r0
 8005e56:	d142      	bne.n	8005ede <_malloc_r+0xea>
 8005e58:	6821      	ldr	r1, [r4, #0]
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	1a6d      	subs	r5, r5, r1
 8005e5e:	4629      	mov	r1, r5
 8005e60:	f7ff ffa6 	bl	8005db0 <sbrk_aligned>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d03a      	beq.n	8005ede <_malloc_r+0xea>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	442b      	add	r3, r5
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	bb62      	cbnz	r2, 8005ed0 <_malloc_r+0xdc>
 8005e76:	f8c8 7000 	str.w	r7, [r8]
 8005e7a:	e00f      	b.n	8005e9c <_malloc_r+0xa8>
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	1b52      	subs	r2, r2, r5
 8005e80:	d420      	bmi.n	8005ec4 <_malloc_r+0xd0>
 8005e82:	2a0b      	cmp	r2, #11
 8005e84:	d917      	bls.n	8005eb6 <_malloc_r+0xc2>
 8005e86:	1961      	adds	r1, r4, r5
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	6025      	str	r5, [r4, #0]
 8005e8c:	bf18      	it	ne
 8005e8e:	6059      	strne	r1, [r3, #4]
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	bf08      	it	eq
 8005e94:	f8c8 1000 	streq.w	r1, [r8]
 8005e98:	5162      	str	r2, [r4, r5]
 8005e9a:	604b      	str	r3, [r1, #4]
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f000 f82f 	bl	8005f00 <__malloc_unlock>
 8005ea2:	f104 000b 	add.w	r0, r4, #11
 8005ea6:	1d23      	adds	r3, r4, #4
 8005ea8:	f020 0007 	bic.w	r0, r0, #7
 8005eac:	1ac2      	subs	r2, r0, r3
 8005eae:	bf1c      	itt	ne
 8005eb0:	1a1b      	subne	r3, r3, r0
 8005eb2:	50a3      	strne	r3, [r4, r2]
 8005eb4:	e7af      	b.n	8005e16 <_malloc_r+0x22>
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	bf0c      	ite	eq
 8005ebc:	f8c8 2000 	streq.w	r2, [r8]
 8005ec0:	605a      	strne	r2, [r3, #4]
 8005ec2:	e7eb      	b.n	8005e9c <_malloc_r+0xa8>
 8005ec4:	4623      	mov	r3, r4
 8005ec6:	6864      	ldr	r4, [r4, #4]
 8005ec8:	e7ae      	b.n	8005e28 <_malloc_r+0x34>
 8005eca:	463c      	mov	r4, r7
 8005ecc:	687f      	ldr	r7, [r7, #4]
 8005ece:	e7b6      	b.n	8005e3e <_malloc_r+0x4a>
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d1fb      	bne.n	8005ed0 <_malloc_r+0xdc>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6053      	str	r3, [r2, #4]
 8005edc:	e7de      	b.n	8005e9c <_malloc_r+0xa8>
 8005ede:	230c      	movs	r3, #12
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	6033      	str	r3, [r6, #0]
 8005ee4:	f000 f80c 	bl	8005f00 <__malloc_unlock>
 8005ee8:	e794      	b.n	8005e14 <_malloc_r+0x20>
 8005eea:	6005      	str	r5, [r0, #0]
 8005eec:	e7d6      	b.n	8005e9c <_malloc_r+0xa8>
 8005eee:	bf00      	nop
 8005ef0:	20000510 	.word	0x20000510

08005ef4 <__malloc_lock>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	@ (8005efc <__malloc_lock+0x8>)
 8005ef6:	f7ff b89e 	b.w	8005036 <__retarget_lock_acquire_recursive>
 8005efa:	bf00      	nop
 8005efc:	20000508 	.word	0x20000508

08005f00 <__malloc_unlock>:
 8005f00:	4801      	ldr	r0, [pc, #4]	@ (8005f08 <__malloc_unlock+0x8>)
 8005f02:	f7ff b899 	b.w	8005038 <__retarget_lock_release_recursive>
 8005f06:	bf00      	nop
 8005f08:	20000508 	.word	0x20000508

08005f0c <_Balloc>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	69c6      	ldr	r6, [r0, #28]
 8005f10:	4604      	mov	r4, r0
 8005f12:	460d      	mov	r5, r1
 8005f14:	b976      	cbnz	r6, 8005f34 <_Balloc+0x28>
 8005f16:	2010      	movs	r0, #16
 8005f18:	f7ff ff42 	bl	8005da0 <malloc>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	61e0      	str	r0, [r4, #28]
 8005f20:	b920      	cbnz	r0, 8005f2c <_Balloc+0x20>
 8005f22:	216b      	movs	r1, #107	@ 0x6b
 8005f24:	4b17      	ldr	r3, [pc, #92]	@ (8005f84 <_Balloc+0x78>)
 8005f26:	4818      	ldr	r0, [pc, #96]	@ (8005f88 <_Balloc+0x7c>)
 8005f28:	f000 fdf4 	bl	8006b14 <__assert_func>
 8005f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f30:	6006      	str	r6, [r0, #0]
 8005f32:	60c6      	str	r6, [r0, #12]
 8005f34:	69e6      	ldr	r6, [r4, #28]
 8005f36:	68f3      	ldr	r3, [r6, #12]
 8005f38:	b183      	cbz	r3, 8005f5c <_Balloc+0x50>
 8005f3a:	69e3      	ldr	r3, [r4, #28]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f42:	b9b8      	cbnz	r0, 8005f74 <_Balloc+0x68>
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f605 	lsl.w	r6, r1, r5
 8005f4a:	1d72      	adds	r2, r6, #5
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	0092      	lsls	r2, r2, #2
 8005f50:	f000 fdfe 	bl	8006b50 <_calloc_r>
 8005f54:	b160      	cbz	r0, 8005f70 <_Balloc+0x64>
 8005f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f5a:	e00e      	b.n	8005f7a <_Balloc+0x6e>
 8005f5c:	2221      	movs	r2, #33	@ 0x21
 8005f5e:	2104      	movs	r1, #4
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 fdf5 	bl	8006b50 <_calloc_r>
 8005f66:	69e3      	ldr	r3, [r4, #28]
 8005f68:	60f0      	str	r0, [r6, #12]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e4      	bne.n	8005f3a <_Balloc+0x2e>
 8005f70:	2000      	movs	r0, #0
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	6802      	ldr	r2, [r0, #0]
 8005f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f80:	e7f7      	b.n	8005f72 <_Balloc+0x66>
 8005f82:	bf00      	nop
 8005f84:	080071f3 	.word	0x080071f3
 8005f88:	08007273 	.word	0x08007273

08005f8c <_Bfree>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	69c6      	ldr	r6, [r0, #28]
 8005f90:	4605      	mov	r5, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	b976      	cbnz	r6, 8005fb4 <_Bfree+0x28>
 8005f96:	2010      	movs	r0, #16
 8005f98:	f7ff ff02 	bl	8005da0 <malloc>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	61e8      	str	r0, [r5, #28]
 8005fa0:	b920      	cbnz	r0, 8005fac <_Bfree+0x20>
 8005fa2:	218f      	movs	r1, #143	@ 0x8f
 8005fa4:	4b08      	ldr	r3, [pc, #32]	@ (8005fc8 <_Bfree+0x3c>)
 8005fa6:	4809      	ldr	r0, [pc, #36]	@ (8005fcc <_Bfree+0x40>)
 8005fa8:	f000 fdb4 	bl	8006b14 <__assert_func>
 8005fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fb0:	6006      	str	r6, [r0, #0]
 8005fb2:	60c6      	str	r6, [r0, #12]
 8005fb4:	b13c      	cbz	r4, 8005fc6 <_Bfree+0x3a>
 8005fb6:	69eb      	ldr	r3, [r5, #28]
 8005fb8:	6862      	ldr	r2, [r4, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fc0:	6021      	str	r1, [r4, #0]
 8005fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
 8005fc8:	080071f3 	.word	0x080071f3
 8005fcc:	08007273 	.word	0x08007273

08005fd0 <__multadd>:
 8005fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	461e      	mov	r6, r3
 8005fda:	2000      	movs	r0, #0
 8005fdc:	690d      	ldr	r5, [r1, #16]
 8005fde:	f101 0c14 	add.w	ip, r1, #20
 8005fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	b299      	uxth	r1, r3
 8005fea:	fb02 6101 	mla	r1, r2, r1, r6
 8005fee:	0c1e      	lsrs	r6, r3, #16
 8005ff0:	0c0b      	lsrs	r3, r1, #16
 8005ff2:	fb02 3306 	mla	r3, r2, r6, r3
 8005ff6:	b289      	uxth	r1, r1
 8005ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ffc:	4285      	cmp	r5, r0
 8005ffe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006002:	f84c 1b04 	str.w	r1, [ip], #4
 8006006:	dcec      	bgt.n	8005fe2 <__multadd+0x12>
 8006008:	b30e      	cbz	r6, 800604e <__multadd+0x7e>
 800600a:	68a3      	ldr	r3, [r4, #8]
 800600c:	42ab      	cmp	r3, r5
 800600e:	dc19      	bgt.n	8006044 <__multadd+0x74>
 8006010:	6861      	ldr	r1, [r4, #4]
 8006012:	4638      	mov	r0, r7
 8006014:	3101      	adds	r1, #1
 8006016:	f7ff ff79 	bl	8005f0c <_Balloc>
 800601a:	4680      	mov	r8, r0
 800601c:	b928      	cbnz	r0, 800602a <__multadd+0x5a>
 800601e:	4602      	mov	r2, r0
 8006020:	21ba      	movs	r1, #186	@ 0xba
 8006022:	4b0c      	ldr	r3, [pc, #48]	@ (8006054 <__multadd+0x84>)
 8006024:	480c      	ldr	r0, [pc, #48]	@ (8006058 <__multadd+0x88>)
 8006026:	f000 fd75 	bl	8006b14 <__assert_func>
 800602a:	6922      	ldr	r2, [r4, #16]
 800602c:	f104 010c 	add.w	r1, r4, #12
 8006030:	3202      	adds	r2, #2
 8006032:	0092      	lsls	r2, r2, #2
 8006034:	300c      	adds	r0, #12
 8006036:	f000 fd5f 	bl	8006af8 <memcpy>
 800603a:	4621      	mov	r1, r4
 800603c:	4638      	mov	r0, r7
 800603e:	f7ff ffa5 	bl	8005f8c <_Bfree>
 8006042:	4644      	mov	r4, r8
 8006044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006048:	3501      	adds	r5, #1
 800604a:	615e      	str	r6, [r3, #20]
 800604c:	6125      	str	r5, [r4, #16]
 800604e:	4620      	mov	r0, r4
 8006050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006054:	08007262 	.word	0x08007262
 8006058:	08007273 	.word	0x08007273

0800605c <__hi0bits>:
 800605c:	4603      	mov	r3, r0
 800605e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006062:	bf3a      	itte	cc
 8006064:	0403      	lslcc	r3, r0, #16
 8006066:	2010      	movcc	r0, #16
 8006068:	2000      	movcs	r0, #0
 800606a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800606e:	bf3c      	itt	cc
 8006070:	021b      	lslcc	r3, r3, #8
 8006072:	3008      	addcc	r0, #8
 8006074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006078:	bf3c      	itt	cc
 800607a:	011b      	lslcc	r3, r3, #4
 800607c:	3004      	addcc	r0, #4
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006082:	bf3c      	itt	cc
 8006084:	009b      	lslcc	r3, r3, #2
 8006086:	3002      	addcc	r0, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	db05      	blt.n	8006098 <__hi0bits+0x3c>
 800608c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006090:	f100 0001 	add.w	r0, r0, #1
 8006094:	bf08      	it	eq
 8006096:	2020      	moveq	r0, #32
 8006098:	4770      	bx	lr

0800609a <__lo0bits>:
 800609a:	6803      	ldr	r3, [r0, #0]
 800609c:	4602      	mov	r2, r0
 800609e:	f013 0007 	ands.w	r0, r3, #7
 80060a2:	d00b      	beq.n	80060bc <__lo0bits+0x22>
 80060a4:	07d9      	lsls	r1, r3, #31
 80060a6:	d421      	bmi.n	80060ec <__lo0bits+0x52>
 80060a8:	0798      	lsls	r0, r3, #30
 80060aa:	bf49      	itett	mi
 80060ac:	085b      	lsrmi	r3, r3, #1
 80060ae:	089b      	lsrpl	r3, r3, #2
 80060b0:	2001      	movmi	r0, #1
 80060b2:	6013      	strmi	r3, [r2, #0]
 80060b4:	bf5c      	itt	pl
 80060b6:	2002      	movpl	r0, #2
 80060b8:	6013      	strpl	r3, [r2, #0]
 80060ba:	4770      	bx	lr
 80060bc:	b299      	uxth	r1, r3
 80060be:	b909      	cbnz	r1, 80060c4 <__lo0bits+0x2a>
 80060c0:	2010      	movs	r0, #16
 80060c2:	0c1b      	lsrs	r3, r3, #16
 80060c4:	b2d9      	uxtb	r1, r3
 80060c6:	b909      	cbnz	r1, 80060cc <__lo0bits+0x32>
 80060c8:	3008      	adds	r0, #8
 80060ca:	0a1b      	lsrs	r3, r3, #8
 80060cc:	0719      	lsls	r1, r3, #28
 80060ce:	bf04      	itt	eq
 80060d0:	091b      	lsreq	r3, r3, #4
 80060d2:	3004      	addeq	r0, #4
 80060d4:	0799      	lsls	r1, r3, #30
 80060d6:	bf04      	itt	eq
 80060d8:	089b      	lsreq	r3, r3, #2
 80060da:	3002      	addeq	r0, #2
 80060dc:	07d9      	lsls	r1, r3, #31
 80060de:	d403      	bmi.n	80060e8 <__lo0bits+0x4e>
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	f100 0001 	add.w	r0, r0, #1
 80060e6:	d003      	beq.n	80060f0 <__lo0bits+0x56>
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	4770      	bx	lr
 80060ec:	2000      	movs	r0, #0
 80060ee:	4770      	bx	lr
 80060f0:	2020      	movs	r0, #32
 80060f2:	4770      	bx	lr

080060f4 <__i2b>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	460c      	mov	r4, r1
 80060f8:	2101      	movs	r1, #1
 80060fa:	f7ff ff07 	bl	8005f0c <_Balloc>
 80060fe:	4602      	mov	r2, r0
 8006100:	b928      	cbnz	r0, 800610e <__i2b+0x1a>
 8006102:	f240 1145 	movw	r1, #325	@ 0x145
 8006106:	4b04      	ldr	r3, [pc, #16]	@ (8006118 <__i2b+0x24>)
 8006108:	4804      	ldr	r0, [pc, #16]	@ (800611c <__i2b+0x28>)
 800610a:	f000 fd03 	bl	8006b14 <__assert_func>
 800610e:	2301      	movs	r3, #1
 8006110:	6144      	str	r4, [r0, #20]
 8006112:	6103      	str	r3, [r0, #16]
 8006114:	bd10      	pop	{r4, pc}
 8006116:	bf00      	nop
 8006118:	08007262 	.word	0x08007262
 800611c:	08007273 	.word	0x08007273

08006120 <__multiply>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	4617      	mov	r7, r2
 8006126:	690a      	ldr	r2, [r1, #16]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4689      	mov	r9, r1
 800612c:	429a      	cmp	r2, r3
 800612e:	bfa2      	ittt	ge
 8006130:	463b      	movge	r3, r7
 8006132:	460f      	movge	r7, r1
 8006134:	4699      	movge	r9, r3
 8006136:	693d      	ldr	r5, [r7, #16]
 8006138:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	eb05 060a 	add.w	r6, r5, sl
 8006144:	42b3      	cmp	r3, r6
 8006146:	b085      	sub	sp, #20
 8006148:	bfb8      	it	lt
 800614a:	3101      	addlt	r1, #1
 800614c:	f7ff fede 	bl	8005f0c <_Balloc>
 8006150:	b930      	cbnz	r0, 8006160 <__multiply+0x40>
 8006152:	4602      	mov	r2, r0
 8006154:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006158:	4b40      	ldr	r3, [pc, #256]	@ (800625c <__multiply+0x13c>)
 800615a:	4841      	ldr	r0, [pc, #260]	@ (8006260 <__multiply+0x140>)
 800615c:	f000 fcda 	bl	8006b14 <__assert_func>
 8006160:	f100 0414 	add.w	r4, r0, #20
 8006164:	4623      	mov	r3, r4
 8006166:	2200      	movs	r2, #0
 8006168:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800616c:	4573      	cmp	r3, lr
 800616e:	d320      	bcc.n	80061b2 <__multiply+0x92>
 8006170:	f107 0814 	add.w	r8, r7, #20
 8006174:	f109 0114 	add.w	r1, r9, #20
 8006178:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800617c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006180:	9302      	str	r3, [sp, #8]
 8006182:	1beb      	subs	r3, r5, r7
 8006184:	3b15      	subs	r3, #21
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	3304      	adds	r3, #4
 800618c:	3715      	adds	r7, #21
 800618e:	42bd      	cmp	r5, r7
 8006190:	bf38      	it	cc
 8006192:	2304      	movcc	r3, #4
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	9b02      	ldr	r3, [sp, #8]
 8006198:	9103      	str	r1, [sp, #12]
 800619a:	428b      	cmp	r3, r1
 800619c:	d80c      	bhi.n	80061b8 <__multiply+0x98>
 800619e:	2e00      	cmp	r6, #0
 80061a0:	dd03      	ble.n	80061aa <__multiply+0x8a>
 80061a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d055      	beq.n	8006256 <__multiply+0x136>
 80061aa:	6106      	str	r6, [r0, #16]
 80061ac:	b005      	add	sp, #20
 80061ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b2:	f843 2b04 	str.w	r2, [r3], #4
 80061b6:	e7d9      	b.n	800616c <__multiply+0x4c>
 80061b8:	f8b1 a000 	ldrh.w	sl, [r1]
 80061bc:	f1ba 0f00 	cmp.w	sl, #0
 80061c0:	d01f      	beq.n	8006202 <__multiply+0xe2>
 80061c2:	46c4      	mov	ip, r8
 80061c4:	46a1      	mov	r9, r4
 80061c6:	2700      	movs	r7, #0
 80061c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061cc:	f8d9 3000 	ldr.w	r3, [r9]
 80061d0:	fa1f fb82 	uxth.w	fp, r2
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80061da:	443b      	add	r3, r7
 80061dc:	f8d9 7000 	ldr.w	r7, [r9]
 80061e0:	0c12      	lsrs	r2, r2, #16
 80061e2:	0c3f      	lsrs	r7, r7, #16
 80061e4:	fb0a 7202 	mla	r2, sl, r2, r7
 80061e8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061f2:	4565      	cmp	r5, ip
 80061f4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80061f8:	f849 3b04 	str.w	r3, [r9], #4
 80061fc:	d8e4      	bhi.n	80061c8 <__multiply+0xa8>
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	50e7      	str	r7, [r4, r3]
 8006202:	9b03      	ldr	r3, [sp, #12]
 8006204:	3104      	adds	r1, #4
 8006206:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800620a:	f1b9 0f00 	cmp.w	r9, #0
 800620e:	d020      	beq.n	8006252 <__multiply+0x132>
 8006210:	4647      	mov	r7, r8
 8006212:	46a4      	mov	ip, r4
 8006214:	f04f 0a00 	mov.w	sl, #0
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	f8b7 b000 	ldrh.w	fp, [r7]
 800621e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006222:	b29b      	uxth	r3, r3
 8006224:	fb09 220b 	mla	r2, r9, fp, r2
 8006228:	4452      	add	r2, sl
 800622a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800622e:	f84c 3b04 	str.w	r3, [ip], #4
 8006232:	f857 3b04 	ldr.w	r3, [r7], #4
 8006236:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800623a:	f8bc 3000 	ldrh.w	r3, [ip]
 800623e:	42bd      	cmp	r5, r7
 8006240:	fb09 330a 	mla	r3, r9, sl, r3
 8006244:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006248:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800624c:	d8e5      	bhi.n	800621a <__multiply+0xfa>
 800624e:	9a01      	ldr	r2, [sp, #4]
 8006250:	50a3      	str	r3, [r4, r2]
 8006252:	3404      	adds	r4, #4
 8006254:	e79f      	b.n	8006196 <__multiply+0x76>
 8006256:	3e01      	subs	r6, #1
 8006258:	e7a1      	b.n	800619e <__multiply+0x7e>
 800625a:	bf00      	nop
 800625c:	08007262 	.word	0x08007262
 8006260:	08007273 	.word	0x08007273

08006264 <__pow5mult>:
 8006264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006268:	4615      	mov	r5, r2
 800626a:	f012 0203 	ands.w	r2, r2, #3
 800626e:	4607      	mov	r7, r0
 8006270:	460e      	mov	r6, r1
 8006272:	d007      	beq.n	8006284 <__pow5mult+0x20>
 8006274:	4c25      	ldr	r4, [pc, #148]	@ (800630c <__pow5mult+0xa8>)
 8006276:	3a01      	subs	r2, #1
 8006278:	2300      	movs	r3, #0
 800627a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800627e:	f7ff fea7 	bl	8005fd0 <__multadd>
 8006282:	4606      	mov	r6, r0
 8006284:	10ad      	asrs	r5, r5, #2
 8006286:	d03d      	beq.n	8006304 <__pow5mult+0xa0>
 8006288:	69fc      	ldr	r4, [r7, #28]
 800628a:	b97c      	cbnz	r4, 80062ac <__pow5mult+0x48>
 800628c:	2010      	movs	r0, #16
 800628e:	f7ff fd87 	bl	8005da0 <malloc>
 8006292:	4602      	mov	r2, r0
 8006294:	61f8      	str	r0, [r7, #28]
 8006296:	b928      	cbnz	r0, 80062a4 <__pow5mult+0x40>
 8006298:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800629c:	4b1c      	ldr	r3, [pc, #112]	@ (8006310 <__pow5mult+0xac>)
 800629e:	481d      	ldr	r0, [pc, #116]	@ (8006314 <__pow5mult+0xb0>)
 80062a0:	f000 fc38 	bl	8006b14 <__assert_func>
 80062a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062a8:	6004      	str	r4, [r0, #0]
 80062aa:	60c4      	str	r4, [r0, #12]
 80062ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80062b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062b4:	b94c      	cbnz	r4, 80062ca <__pow5mult+0x66>
 80062b6:	f240 2171 	movw	r1, #625	@ 0x271
 80062ba:	4638      	mov	r0, r7
 80062bc:	f7ff ff1a 	bl	80060f4 <__i2b>
 80062c0:	2300      	movs	r3, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80062c8:	6003      	str	r3, [r0, #0]
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	07eb      	lsls	r3, r5, #31
 80062d0:	d50a      	bpl.n	80062e8 <__pow5mult+0x84>
 80062d2:	4631      	mov	r1, r6
 80062d4:	4622      	mov	r2, r4
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7ff ff22 	bl	8006120 <__multiply>
 80062dc:	4680      	mov	r8, r0
 80062de:	4631      	mov	r1, r6
 80062e0:	4638      	mov	r0, r7
 80062e2:	f7ff fe53 	bl	8005f8c <_Bfree>
 80062e6:	4646      	mov	r6, r8
 80062e8:	106d      	asrs	r5, r5, #1
 80062ea:	d00b      	beq.n	8006304 <__pow5mult+0xa0>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	b938      	cbnz	r0, 8006300 <__pow5mult+0x9c>
 80062f0:	4622      	mov	r2, r4
 80062f2:	4621      	mov	r1, r4
 80062f4:	4638      	mov	r0, r7
 80062f6:	f7ff ff13 	bl	8006120 <__multiply>
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	f8c0 9000 	str.w	r9, [r0]
 8006300:	4604      	mov	r4, r0
 8006302:	e7e4      	b.n	80062ce <__pow5mult+0x6a>
 8006304:	4630      	mov	r0, r6
 8006306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630a:	bf00      	nop
 800630c:	08007324 	.word	0x08007324
 8006310:	080071f3 	.word	0x080071f3
 8006314:	08007273 	.word	0x08007273

08006318 <__lshift>:
 8006318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	460c      	mov	r4, r1
 800631e:	4607      	mov	r7, r0
 8006320:	4691      	mov	r9, r2
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	6849      	ldr	r1, [r1, #4]
 8006326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800632a:	68a3      	ldr	r3, [r4, #8]
 800632c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006330:	f108 0601 	add.w	r6, r8, #1
 8006334:	42b3      	cmp	r3, r6
 8006336:	db0b      	blt.n	8006350 <__lshift+0x38>
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff fde7 	bl	8005f0c <_Balloc>
 800633e:	4605      	mov	r5, r0
 8006340:	b948      	cbnz	r0, 8006356 <__lshift+0x3e>
 8006342:	4602      	mov	r2, r0
 8006344:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006348:	4b27      	ldr	r3, [pc, #156]	@ (80063e8 <__lshift+0xd0>)
 800634a:	4828      	ldr	r0, [pc, #160]	@ (80063ec <__lshift+0xd4>)
 800634c:	f000 fbe2 	bl	8006b14 <__assert_func>
 8006350:	3101      	adds	r1, #1
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	e7ee      	b.n	8006334 <__lshift+0x1c>
 8006356:	2300      	movs	r3, #0
 8006358:	f100 0114 	add.w	r1, r0, #20
 800635c:	f100 0210 	add.w	r2, r0, #16
 8006360:	4618      	mov	r0, r3
 8006362:	4553      	cmp	r3, sl
 8006364:	db33      	blt.n	80063ce <__lshift+0xb6>
 8006366:	6920      	ldr	r0, [r4, #16]
 8006368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800636c:	f104 0314 	add.w	r3, r4, #20
 8006370:	f019 091f 	ands.w	r9, r9, #31
 8006374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800637c:	d02b      	beq.n	80063d6 <__lshift+0xbe>
 800637e:	468a      	mov	sl, r1
 8006380:	2200      	movs	r2, #0
 8006382:	f1c9 0e20 	rsb	lr, r9, #32
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	fa00 f009 	lsl.w	r0, r0, r9
 800638c:	4310      	orrs	r0, r2
 800638e:	f84a 0b04 	str.w	r0, [sl], #4
 8006392:	f853 2b04 	ldr.w	r2, [r3], #4
 8006396:	459c      	cmp	ip, r3
 8006398:	fa22 f20e 	lsr.w	r2, r2, lr
 800639c:	d8f3      	bhi.n	8006386 <__lshift+0x6e>
 800639e:	ebac 0304 	sub.w	r3, ip, r4
 80063a2:	3b15      	subs	r3, #21
 80063a4:	f023 0303 	bic.w	r3, r3, #3
 80063a8:	3304      	adds	r3, #4
 80063aa:	f104 0015 	add.w	r0, r4, #21
 80063ae:	4560      	cmp	r0, ip
 80063b0:	bf88      	it	hi
 80063b2:	2304      	movhi	r3, #4
 80063b4:	50ca      	str	r2, [r1, r3]
 80063b6:	b10a      	cbz	r2, 80063bc <__lshift+0xa4>
 80063b8:	f108 0602 	add.w	r6, r8, #2
 80063bc:	3e01      	subs	r6, #1
 80063be:	4638      	mov	r0, r7
 80063c0:	4621      	mov	r1, r4
 80063c2:	612e      	str	r6, [r5, #16]
 80063c4:	f7ff fde2 	bl	8005f8c <_Bfree>
 80063c8:	4628      	mov	r0, r5
 80063ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80063d2:	3301      	adds	r3, #1
 80063d4:	e7c5      	b.n	8006362 <__lshift+0x4a>
 80063d6:	3904      	subs	r1, #4
 80063d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063dc:	459c      	cmp	ip, r3
 80063de:	f841 2f04 	str.w	r2, [r1, #4]!
 80063e2:	d8f9      	bhi.n	80063d8 <__lshift+0xc0>
 80063e4:	e7ea      	b.n	80063bc <__lshift+0xa4>
 80063e6:	bf00      	nop
 80063e8:	08007262 	.word	0x08007262
 80063ec:	08007273 	.word	0x08007273

080063f0 <__mcmp>:
 80063f0:	4603      	mov	r3, r0
 80063f2:	690a      	ldr	r2, [r1, #16]
 80063f4:	6900      	ldr	r0, [r0, #16]
 80063f6:	b530      	push	{r4, r5, lr}
 80063f8:	1a80      	subs	r0, r0, r2
 80063fa:	d10e      	bne.n	800641a <__mcmp+0x2a>
 80063fc:	3314      	adds	r3, #20
 80063fe:	3114      	adds	r1, #20
 8006400:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006404:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006408:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800640c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006410:	4295      	cmp	r5, r2
 8006412:	d003      	beq.n	800641c <__mcmp+0x2c>
 8006414:	d205      	bcs.n	8006422 <__mcmp+0x32>
 8006416:	f04f 30ff 	mov.w	r0, #4294967295
 800641a:	bd30      	pop	{r4, r5, pc}
 800641c:	42a3      	cmp	r3, r4
 800641e:	d3f3      	bcc.n	8006408 <__mcmp+0x18>
 8006420:	e7fb      	b.n	800641a <__mcmp+0x2a>
 8006422:	2001      	movs	r0, #1
 8006424:	e7f9      	b.n	800641a <__mcmp+0x2a>
	...

08006428 <__mdiff>:
 8006428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	4689      	mov	r9, r1
 800642e:	4606      	mov	r6, r0
 8006430:	4611      	mov	r1, r2
 8006432:	4648      	mov	r0, r9
 8006434:	4614      	mov	r4, r2
 8006436:	f7ff ffdb 	bl	80063f0 <__mcmp>
 800643a:	1e05      	subs	r5, r0, #0
 800643c:	d112      	bne.n	8006464 <__mdiff+0x3c>
 800643e:	4629      	mov	r1, r5
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff fd63 	bl	8005f0c <_Balloc>
 8006446:	4602      	mov	r2, r0
 8006448:	b928      	cbnz	r0, 8006456 <__mdiff+0x2e>
 800644a:	f240 2137 	movw	r1, #567	@ 0x237
 800644e:	4b3e      	ldr	r3, [pc, #248]	@ (8006548 <__mdiff+0x120>)
 8006450:	483e      	ldr	r0, [pc, #248]	@ (800654c <__mdiff+0x124>)
 8006452:	f000 fb5f 	bl	8006b14 <__assert_func>
 8006456:	2301      	movs	r3, #1
 8006458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800645c:	4610      	mov	r0, r2
 800645e:	b003      	add	sp, #12
 8006460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006464:	bfbc      	itt	lt
 8006466:	464b      	movlt	r3, r9
 8006468:	46a1      	movlt	r9, r4
 800646a:	4630      	mov	r0, r6
 800646c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006470:	bfba      	itte	lt
 8006472:	461c      	movlt	r4, r3
 8006474:	2501      	movlt	r5, #1
 8006476:	2500      	movge	r5, #0
 8006478:	f7ff fd48 	bl	8005f0c <_Balloc>
 800647c:	4602      	mov	r2, r0
 800647e:	b918      	cbnz	r0, 8006488 <__mdiff+0x60>
 8006480:	f240 2145 	movw	r1, #581	@ 0x245
 8006484:	4b30      	ldr	r3, [pc, #192]	@ (8006548 <__mdiff+0x120>)
 8006486:	e7e3      	b.n	8006450 <__mdiff+0x28>
 8006488:	f100 0b14 	add.w	fp, r0, #20
 800648c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006490:	f109 0310 	add.w	r3, r9, #16
 8006494:	60c5      	str	r5, [r0, #12]
 8006496:	f04f 0c00 	mov.w	ip, #0
 800649a:	f109 0514 	add.w	r5, r9, #20
 800649e:	46d9      	mov	r9, fp
 80064a0:	6926      	ldr	r6, [r4, #16]
 80064a2:	f104 0e14 	add.w	lr, r4, #20
 80064a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80064aa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80064b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80064ba:	b281      	uxth	r1, r0
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	fa1f f38a 	uxth.w	r3, sl
 80064c2:	1a5b      	subs	r3, r3, r1
 80064c4:	0c00      	lsrs	r0, r0, #16
 80064c6:	4463      	add	r3, ip
 80064c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80064cc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80064d6:	4576      	cmp	r6, lr
 80064d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80064dc:	f849 3b04 	str.w	r3, [r9], #4
 80064e0:	d8e6      	bhi.n	80064b0 <__mdiff+0x88>
 80064e2:	1b33      	subs	r3, r6, r4
 80064e4:	3b15      	subs	r3, #21
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	3415      	adds	r4, #21
 80064ec:	3304      	adds	r3, #4
 80064ee:	42a6      	cmp	r6, r4
 80064f0:	bf38      	it	cc
 80064f2:	2304      	movcc	r3, #4
 80064f4:	441d      	add	r5, r3
 80064f6:	445b      	add	r3, fp
 80064f8:	461e      	mov	r6, r3
 80064fa:	462c      	mov	r4, r5
 80064fc:	4544      	cmp	r4, r8
 80064fe:	d30e      	bcc.n	800651e <__mdiff+0xf6>
 8006500:	f108 0103 	add.w	r1, r8, #3
 8006504:	1b49      	subs	r1, r1, r5
 8006506:	f021 0103 	bic.w	r1, r1, #3
 800650a:	3d03      	subs	r5, #3
 800650c:	45a8      	cmp	r8, r5
 800650e:	bf38      	it	cc
 8006510:	2100      	movcc	r1, #0
 8006512:	440b      	add	r3, r1
 8006514:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006518:	b199      	cbz	r1, 8006542 <__mdiff+0x11a>
 800651a:	6117      	str	r7, [r2, #16]
 800651c:	e79e      	b.n	800645c <__mdiff+0x34>
 800651e:	46e6      	mov	lr, ip
 8006520:	f854 1b04 	ldr.w	r1, [r4], #4
 8006524:	fa1f fc81 	uxth.w	ip, r1
 8006528:	44f4      	add	ip, lr
 800652a:	0c08      	lsrs	r0, r1, #16
 800652c:	4471      	add	r1, lr
 800652e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006532:	b289      	uxth	r1, r1
 8006534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006538:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800653c:	f846 1b04 	str.w	r1, [r6], #4
 8006540:	e7dc      	b.n	80064fc <__mdiff+0xd4>
 8006542:	3f01      	subs	r7, #1
 8006544:	e7e6      	b.n	8006514 <__mdiff+0xec>
 8006546:	bf00      	nop
 8006548:	08007262 	.word	0x08007262
 800654c:	08007273 	.word	0x08007273

08006550 <__d2b>:
 8006550:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006554:	2101      	movs	r1, #1
 8006556:	4690      	mov	r8, r2
 8006558:	4699      	mov	r9, r3
 800655a:	9e08      	ldr	r6, [sp, #32]
 800655c:	f7ff fcd6 	bl	8005f0c <_Balloc>
 8006560:	4604      	mov	r4, r0
 8006562:	b930      	cbnz	r0, 8006572 <__d2b+0x22>
 8006564:	4602      	mov	r2, r0
 8006566:	f240 310f 	movw	r1, #783	@ 0x30f
 800656a:	4b23      	ldr	r3, [pc, #140]	@ (80065f8 <__d2b+0xa8>)
 800656c:	4823      	ldr	r0, [pc, #140]	@ (80065fc <__d2b+0xac>)
 800656e:	f000 fad1 	bl	8006b14 <__assert_func>
 8006572:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006576:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800657a:	b10d      	cbz	r5, 8006580 <__d2b+0x30>
 800657c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	f1b8 0300 	subs.w	r3, r8, #0
 8006586:	d024      	beq.n	80065d2 <__d2b+0x82>
 8006588:	4668      	mov	r0, sp
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	f7ff fd85 	bl	800609a <__lo0bits>
 8006590:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006594:	b1d8      	cbz	r0, 80065ce <__d2b+0x7e>
 8006596:	f1c0 0320 	rsb	r3, r0, #32
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	430b      	orrs	r3, r1
 80065a0:	40c2      	lsrs	r2, r0
 80065a2:	6163      	str	r3, [r4, #20]
 80065a4:	9201      	str	r2, [sp, #4]
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bf0c      	ite	eq
 80065ac:	2201      	moveq	r2, #1
 80065ae:	2202      	movne	r2, #2
 80065b0:	61a3      	str	r3, [r4, #24]
 80065b2:	6122      	str	r2, [r4, #16]
 80065b4:	b1ad      	cbz	r5, 80065e2 <__d2b+0x92>
 80065b6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80065ba:	4405      	add	r5, r0
 80065bc:	6035      	str	r5, [r6, #0]
 80065be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80065c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c4:	6018      	str	r0, [r3, #0]
 80065c6:	4620      	mov	r0, r4
 80065c8:	b002      	add	sp, #8
 80065ca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80065ce:	6161      	str	r1, [r4, #20]
 80065d0:	e7e9      	b.n	80065a6 <__d2b+0x56>
 80065d2:	a801      	add	r0, sp, #4
 80065d4:	f7ff fd61 	bl	800609a <__lo0bits>
 80065d8:	9b01      	ldr	r3, [sp, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	6163      	str	r3, [r4, #20]
 80065de:	3020      	adds	r0, #32
 80065e0:	e7e7      	b.n	80065b2 <__d2b+0x62>
 80065e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80065e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065ea:	6030      	str	r0, [r6, #0]
 80065ec:	6918      	ldr	r0, [r3, #16]
 80065ee:	f7ff fd35 	bl	800605c <__hi0bits>
 80065f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065f6:	e7e4      	b.n	80065c2 <__d2b+0x72>
 80065f8:	08007262 	.word	0x08007262
 80065fc:	08007273 	.word	0x08007273

08006600 <__sfputc_r>:
 8006600:	6893      	ldr	r3, [r2, #8]
 8006602:	b410      	push	{r4}
 8006604:	3b01      	subs	r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	6093      	str	r3, [r2, #8]
 800660a:	da07      	bge.n	800661c <__sfputc_r+0x1c>
 800660c:	6994      	ldr	r4, [r2, #24]
 800660e:	42a3      	cmp	r3, r4
 8006610:	db01      	blt.n	8006616 <__sfputc_r+0x16>
 8006612:	290a      	cmp	r1, #10
 8006614:	d102      	bne.n	800661c <__sfputc_r+0x1c>
 8006616:	bc10      	pop	{r4}
 8006618:	f7fe bbfb 	b.w	8004e12 <__swbuf_r>
 800661c:	6813      	ldr	r3, [r2, #0]
 800661e:	1c58      	adds	r0, r3, #1
 8006620:	6010      	str	r0, [r2, #0]
 8006622:	7019      	strb	r1, [r3, #0]
 8006624:	4608      	mov	r0, r1
 8006626:	bc10      	pop	{r4}
 8006628:	4770      	bx	lr

0800662a <__sfputs_r>:
 800662a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	4614      	mov	r4, r2
 8006632:	18d5      	adds	r5, r2, r3
 8006634:	42ac      	cmp	r4, r5
 8006636:	d101      	bne.n	800663c <__sfputs_r+0x12>
 8006638:	2000      	movs	r0, #0
 800663a:	e007      	b.n	800664c <__sfputs_r+0x22>
 800663c:	463a      	mov	r2, r7
 800663e:	4630      	mov	r0, r6
 8006640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006644:	f7ff ffdc 	bl	8006600 <__sfputc_r>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d1f3      	bne.n	8006634 <__sfputs_r+0xa>
 800664c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006650 <_vfiprintf_r>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	460d      	mov	r5, r1
 8006656:	4614      	mov	r4, r2
 8006658:	4698      	mov	r8, r3
 800665a:	4606      	mov	r6, r0
 800665c:	b09d      	sub	sp, #116	@ 0x74
 800665e:	b118      	cbz	r0, 8006668 <_vfiprintf_r+0x18>
 8006660:	6a03      	ldr	r3, [r0, #32]
 8006662:	b90b      	cbnz	r3, 8006668 <_vfiprintf_r+0x18>
 8006664:	f7fe faec 	bl	8004c40 <__sinit>
 8006668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800666a:	07d9      	lsls	r1, r3, #31
 800666c:	d405      	bmi.n	800667a <_vfiprintf_r+0x2a>
 800666e:	89ab      	ldrh	r3, [r5, #12]
 8006670:	059a      	lsls	r2, r3, #22
 8006672:	d402      	bmi.n	800667a <_vfiprintf_r+0x2a>
 8006674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006676:	f7fe fcde 	bl	8005036 <__retarget_lock_acquire_recursive>
 800667a:	89ab      	ldrh	r3, [r5, #12]
 800667c:	071b      	lsls	r3, r3, #28
 800667e:	d501      	bpl.n	8006684 <_vfiprintf_r+0x34>
 8006680:	692b      	ldr	r3, [r5, #16]
 8006682:	b99b      	cbnz	r3, 80066ac <_vfiprintf_r+0x5c>
 8006684:	4629      	mov	r1, r5
 8006686:	4630      	mov	r0, r6
 8006688:	f7fe fc02 	bl	8004e90 <__swsetup_r>
 800668c:	b170      	cbz	r0, 80066ac <_vfiprintf_r+0x5c>
 800668e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006690:	07dc      	lsls	r4, r3, #31
 8006692:	d504      	bpl.n	800669e <_vfiprintf_r+0x4e>
 8006694:	f04f 30ff 	mov.w	r0, #4294967295
 8006698:	b01d      	add	sp, #116	@ 0x74
 800669a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	0598      	lsls	r0, r3, #22
 80066a2:	d4f7      	bmi.n	8006694 <_vfiprintf_r+0x44>
 80066a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066a6:	f7fe fcc7 	bl	8005038 <__retarget_lock_release_recursive>
 80066aa:	e7f3      	b.n	8006694 <_vfiprintf_r+0x44>
 80066ac:	2300      	movs	r3, #0
 80066ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80066b0:	2320      	movs	r3, #32
 80066b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066b6:	2330      	movs	r3, #48	@ 0x30
 80066b8:	f04f 0901 	mov.w	r9, #1
 80066bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80066c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800686c <_vfiprintf_r+0x21c>
 80066c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066c8:	4623      	mov	r3, r4
 80066ca:	469a      	mov	sl, r3
 80066cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d0:	b10a      	cbz	r2, 80066d6 <_vfiprintf_r+0x86>
 80066d2:	2a25      	cmp	r2, #37	@ 0x25
 80066d4:	d1f9      	bne.n	80066ca <_vfiprintf_r+0x7a>
 80066d6:	ebba 0b04 	subs.w	fp, sl, r4
 80066da:	d00b      	beq.n	80066f4 <_vfiprintf_r+0xa4>
 80066dc:	465b      	mov	r3, fp
 80066de:	4622      	mov	r2, r4
 80066e0:	4629      	mov	r1, r5
 80066e2:	4630      	mov	r0, r6
 80066e4:	f7ff ffa1 	bl	800662a <__sfputs_r>
 80066e8:	3001      	adds	r0, #1
 80066ea:	f000 80a7 	beq.w	800683c <_vfiprintf_r+0x1ec>
 80066ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066f0:	445a      	add	r2, fp
 80066f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80066f4:	f89a 3000 	ldrb.w	r3, [sl]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 809f 	beq.w	800683c <_vfiprintf_r+0x1ec>
 80066fe:	2300      	movs	r3, #0
 8006700:	f04f 32ff 	mov.w	r2, #4294967295
 8006704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006708:	f10a 0a01 	add.w	sl, sl, #1
 800670c:	9304      	str	r3, [sp, #16]
 800670e:	9307      	str	r3, [sp, #28]
 8006710:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006714:	931a      	str	r3, [sp, #104]	@ 0x68
 8006716:	4654      	mov	r4, sl
 8006718:	2205      	movs	r2, #5
 800671a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671e:	4853      	ldr	r0, [pc, #332]	@ (800686c <_vfiprintf_r+0x21c>)
 8006720:	f7fe fc8b 	bl	800503a <memchr>
 8006724:	9a04      	ldr	r2, [sp, #16]
 8006726:	b9d8      	cbnz	r0, 8006760 <_vfiprintf_r+0x110>
 8006728:	06d1      	lsls	r1, r2, #27
 800672a:	bf44      	itt	mi
 800672c:	2320      	movmi	r3, #32
 800672e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006732:	0713      	lsls	r3, r2, #28
 8006734:	bf44      	itt	mi
 8006736:	232b      	movmi	r3, #43	@ 0x2b
 8006738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800673c:	f89a 3000 	ldrb.w	r3, [sl]
 8006740:	2b2a      	cmp	r3, #42	@ 0x2a
 8006742:	d015      	beq.n	8006770 <_vfiprintf_r+0x120>
 8006744:	4654      	mov	r4, sl
 8006746:	2000      	movs	r0, #0
 8006748:	f04f 0c0a 	mov.w	ip, #10
 800674c:	9a07      	ldr	r2, [sp, #28]
 800674e:	4621      	mov	r1, r4
 8006750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006754:	3b30      	subs	r3, #48	@ 0x30
 8006756:	2b09      	cmp	r3, #9
 8006758:	d94b      	bls.n	80067f2 <_vfiprintf_r+0x1a2>
 800675a:	b1b0      	cbz	r0, 800678a <_vfiprintf_r+0x13a>
 800675c:	9207      	str	r2, [sp, #28]
 800675e:	e014      	b.n	800678a <_vfiprintf_r+0x13a>
 8006760:	eba0 0308 	sub.w	r3, r0, r8
 8006764:	fa09 f303 	lsl.w	r3, r9, r3
 8006768:	4313      	orrs	r3, r2
 800676a:	46a2      	mov	sl, r4
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	e7d2      	b.n	8006716 <_vfiprintf_r+0xc6>
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	1d19      	adds	r1, r3, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	9103      	str	r1, [sp, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	bfbb      	ittet	lt
 800677c:	425b      	neglt	r3, r3
 800677e:	f042 0202 	orrlt.w	r2, r2, #2
 8006782:	9307      	strge	r3, [sp, #28]
 8006784:	9307      	strlt	r3, [sp, #28]
 8006786:	bfb8      	it	lt
 8006788:	9204      	strlt	r2, [sp, #16]
 800678a:	7823      	ldrb	r3, [r4, #0]
 800678c:	2b2e      	cmp	r3, #46	@ 0x2e
 800678e:	d10a      	bne.n	80067a6 <_vfiprintf_r+0x156>
 8006790:	7863      	ldrb	r3, [r4, #1]
 8006792:	2b2a      	cmp	r3, #42	@ 0x2a
 8006794:	d132      	bne.n	80067fc <_vfiprintf_r+0x1ac>
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	3402      	adds	r4, #2
 800679a:	1d1a      	adds	r2, r3, #4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	9203      	str	r2, [sp, #12]
 80067a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067a4:	9305      	str	r3, [sp, #20]
 80067a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006870 <_vfiprintf_r+0x220>
 80067aa:	2203      	movs	r2, #3
 80067ac:	4650      	mov	r0, sl
 80067ae:	7821      	ldrb	r1, [r4, #0]
 80067b0:	f7fe fc43 	bl	800503a <memchr>
 80067b4:	b138      	cbz	r0, 80067c6 <_vfiprintf_r+0x176>
 80067b6:	2240      	movs	r2, #64	@ 0x40
 80067b8:	9b04      	ldr	r3, [sp, #16]
 80067ba:	eba0 000a 	sub.w	r0, r0, sl
 80067be:	4082      	lsls	r2, r0
 80067c0:	4313      	orrs	r3, r2
 80067c2:	3401      	adds	r4, #1
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ca:	2206      	movs	r2, #6
 80067cc:	4829      	ldr	r0, [pc, #164]	@ (8006874 <_vfiprintf_r+0x224>)
 80067ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067d2:	f7fe fc32 	bl	800503a <memchr>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d03f      	beq.n	800685a <_vfiprintf_r+0x20a>
 80067da:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <_vfiprintf_r+0x228>)
 80067dc:	bb1b      	cbnz	r3, 8006826 <_vfiprintf_r+0x1d6>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	3307      	adds	r3, #7
 80067e2:	f023 0307 	bic.w	r3, r3, #7
 80067e6:	3308      	adds	r3, #8
 80067e8:	9303      	str	r3, [sp, #12]
 80067ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ec:	443b      	add	r3, r7
 80067ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f0:	e76a      	b.n	80066c8 <_vfiprintf_r+0x78>
 80067f2:	460c      	mov	r4, r1
 80067f4:	2001      	movs	r0, #1
 80067f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067fa:	e7a8      	b.n	800674e <_vfiprintf_r+0xfe>
 80067fc:	2300      	movs	r3, #0
 80067fe:	f04f 0c0a 	mov.w	ip, #10
 8006802:	4619      	mov	r1, r3
 8006804:	3401      	adds	r4, #1
 8006806:	9305      	str	r3, [sp, #20]
 8006808:	4620      	mov	r0, r4
 800680a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800680e:	3a30      	subs	r2, #48	@ 0x30
 8006810:	2a09      	cmp	r2, #9
 8006812:	d903      	bls.n	800681c <_vfiprintf_r+0x1cc>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0c6      	beq.n	80067a6 <_vfiprintf_r+0x156>
 8006818:	9105      	str	r1, [sp, #20]
 800681a:	e7c4      	b.n	80067a6 <_vfiprintf_r+0x156>
 800681c:	4604      	mov	r4, r0
 800681e:	2301      	movs	r3, #1
 8006820:	fb0c 2101 	mla	r1, ip, r1, r2
 8006824:	e7f0      	b.n	8006808 <_vfiprintf_r+0x1b8>
 8006826:	ab03      	add	r3, sp, #12
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	462a      	mov	r2, r5
 800682c:	4630      	mov	r0, r6
 800682e:	4b13      	ldr	r3, [pc, #76]	@ (800687c <_vfiprintf_r+0x22c>)
 8006830:	a904      	add	r1, sp, #16
 8006832:	f7fd fdbd 	bl	80043b0 <_printf_float>
 8006836:	4607      	mov	r7, r0
 8006838:	1c78      	adds	r0, r7, #1
 800683a:	d1d6      	bne.n	80067ea <_vfiprintf_r+0x19a>
 800683c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800683e:	07d9      	lsls	r1, r3, #31
 8006840:	d405      	bmi.n	800684e <_vfiprintf_r+0x1fe>
 8006842:	89ab      	ldrh	r3, [r5, #12]
 8006844:	059a      	lsls	r2, r3, #22
 8006846:	d402      	bmi.n	800684e <_vfiprintf_r+0x1fe>
 8006848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800684a:	f7fe fbf5 	bl	8005038 <__retarget_lock_release_recursive>
 800684e:	89ab      	ldrh	r3, [r5, #12]
 8006850:	065b      	lsls	r3, r3, #25
 8006852:	f53f af1f 	bmi.w	8006694 <_vfiprintf_r+0x44>
 8006856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006858:	e71e      	b.n	8006698 <_vfiprintf_r+0x48>
 800685a:	ab03      	add	r3, sp, #12
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	462a      	mov	r2, r5
 8006860:	4630      	mov	r0, r6
 8006862:	4b06      	ldr	r3, [pc, #24]	@ (800687c <_vfiprintf_r+0x22c>)
 8006864:	a904      	add	r1, sp, #16
 8006866:	f7fe f841 	bl	80048ec <_printf_i>
 800686a:	e7e4      	b.n	8006836 <_vfiprintf_r+0x1e6>
 800686c:	080072cc 	.word	0x080072cc
 8006870:	080072d2 	.word	0x080072d2
 8006874:	080072d6 	.word	0x080072d6
 8006878:	080043b1 	.word	0x080043b1
 800687c:	0800662b 	.word	0x0800662b

08006880 <__sflush_r>:
 8006880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	0716      	lsls	r6, r2, #28
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	d454      	bmi.n	8006938 <__sflush_r+0xb8>
 800688e:	684b      	ldr	r3, [r1, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	dc02      	bgt.n	800689a <__sflush_r+0x1a>
 8006894:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	dd48      	ble.n	800692c <__sflush_r+0xac>
 800689a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800689c:	2e00      	cmp	r6, #0
 800689e:	d045      	beq.n	800692c <__sflush_r+0xac>
 80068a0:	2300      	movs	r3, #0
 80068a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068a6:	682f      	ldr	r7, [r5, #0]
 80068a8:	6a21      	ldr	r1, [r4, #32]
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	d030      	beq.n	8006910 <__sflush_r+0x90>
 80068ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	0759      	lsls	r1, r3, #29
 80068b4:	d505      	bpl.n	80068c2 <__sflush_r+0x42>
 80068b6:	6863      	ldr	r3, [r4, #4]
 80068b8:	1ad2      	subs	r2, r2, r3
 80068ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068bc:	b10b      	cbz	r3, 80068c2 <__sflush_r+0x42>
 80068be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068c0:	1ad2      	subs	r2, r2, r3
 80068c2:	2300      	movs	r3, #0
 80068c4:	4628      	mov	r0, r5
 80068c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068c8:	6a21      	ldr	r1, [r4, #32]
 80068ca:	47b0      	blx	r6
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	d106      	bne.n	80068e0 <__sflush_r+0x60>
 80068d2:	6829      	ldr	r1, [r5, #0]
 80068d4:	291d      	cmp	r1, #29
 80068d6:	d82b      	bhi.n	8006930 <__sflush_r+0xb0>
 80068d8:	4a28      	ldr	r2, [pc, #160]	@ (800697c <__sflush_r+0xfc>)
 80068da:	40ca      	lsrs	r2, r1
 80068dc:	07d6      	lsls	r6, r2, #31
 80068de:	d527      	bpl.n	8006930 <__sflush_r+0xb0>
 80068e0:	2200      	movs	r2, #0
 80068e2:	6062      	str	r2, [r4, #4]
 80068e4:	6922      	ldr	r2, [r4, #16]
 80068e6:	04d9      	lsls	r1, r3, #19
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	d504      	bpl.n	80068f6 <__sflush_r+0x76>
 80068ec:	1c42      	adds	r2, r0, #1
 80068ee:	d101      	bne.n	80068f4 <__sflush_r+0x74>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b903      	cbnz	r3, 80068f6 <__sflush_r+0x76>
 80068f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80068f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068f8:	602f      	str	r7, [r5, #0]
 80068fa:	b1b9      	cbz	r1, 800692c <__sflush_r+0xac>
 80068fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006900:	4299      	cmp	r1, r3
 8006902:	d002      	beq.n	800690a <__sflush_r+0x8a>
 8006904:	4628      	mov	r0, r5
 8006906:	f7ff fa03 	bl	8005d10 <_free_r>
 800690a:	2300      	movs	r3, #0
 800690c:	6363      	str	r3, [r4, #52]	@ 0x34
 800690e:	e00d      	b.n	800692c <__sflush_r+0xac>
 8006910:	2301      	movs	r3, #1
 8006912:	4628      	mov	r0, r5
 8006914:	47b0      	blx	r6
 8006916:	4602      	mov	r2, r0
 8006918:	1c50      	adds	r0, r2, #1
 800691a:	d1c9      	bne.n	80068b0 <__sflush_r+0x30>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0c6      	beq.n	80068b0 <__sflush_r+0x30>
 8006922:	2b1d      	cmp	r3, #29
 8006924:	d001      	beq.n	800692a <__sflush_r+0xaa>
 8006926:	2b16      	cmp	r3, #22
 8006928:	d11d      	bne.n	8006966 <__sflush_r+0xe6>
 800692a:	602f      	str	r7, [r5, #0]
 800692c:	2000      	movs	r0, #0
 800692e:	e021      	b.n	8006974 <__sflush_r+0xf4>
 8006930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006934:	b21b      	sxth	r3, r3
 8006936:	e01a      	b.n	800696e <__sflush_r+0xee>
 8006938:	690f      	ldr	r7, [r1, #16]
 800693a:	2f00      	cmp	r7, #0
 800693c:	d0f6      	beq.n	800692c <__sflush_r+0xac>
 800693e:	0793      	lsls	r3, r2, #30
 8006940:	bf18      	it	ne
 8006942:	2300      	movne	r3, #0
 8006944:	680e      	ldr	r6, [r1, #0]
 8006946:	bf08      	it	eq
 8006948:	694b      	ldreq	r3, [r1, #20]
 800694a:	1bf6      	subs	r6, r6, r7
 800694c:	600f      	str	r7, [r1, #0]
 800694e:	608b      	str	r3, [r1, #8]
 8006950:	2e00      	cmp	r6, #0
 8006952:	ddeb      	ble.n	800692c <__sflush_r+0xac>
 8006954:	4633      	mov	r3, r6
 8006956:	463a      	mov	r2, r7
 8006958:	4628      	mov	r0, r5
 800695a:	6a21      	ldr	r1, [r4, #32]
 800695c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006960:	47e0      	blx	ip
 8006962:	2800      	cmp	r0, #0
 8006964:	dc07      	bgt.n	8006976 <__sflush_r+0xf6>
 8006966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800696a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800696e:	f04f 30ff 	mov.w	r0, #4294967295
 8006972:	81a3      	strh	r3, [r4, #12]
 8006974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006976:	4407      	add	r7, r0
 8006978:	1a36      	subs	r6, r6, r0
 800697a:	e7e9      	b.n	8006950 <__sflush_r+0xd0>
 800697c:	20400001 	.word	0x20400001

08006980 <_fflush_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	690b      	ldr	r3, [r1, #16]
 8006984:	4605      	mov	r5, r0
 8006986:	460c      	mov	r4, r1
 8006988:	b913      	cbnz	r3, 8006990 <_fflush_r+0x10>
 800698a:	2500      	movs	r5, #0
 800698c:	4628      	mov	r0, r5
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	b118      	cbz	r0, 800699a <_fflush_r+0x1a>
 8006992:	6a03      	ldr	r3, [r0, #32]
 8006994:	b90b      	cbnz	r3, 800699a <_fflush_r+0x1a>
 8006996:	f7fe f953 	bl	8004c40 <__sinit>
 800699a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0f3      	beq.n	800698a <_fflush_r+0xa>
 80069a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069a4:	07d0      	lsls	r0, r2, #31
 80069a6:	d404      	bmi.n	80069b2 <_fflush_r+0x32>
 80069a8:	0599      	lsls	r1, r3, #22
 80069aa:	d402      	bmi.n	80069b2 <_fflush_r+0x32>
 80069ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ae:	f7fe fb42 	bl	8005036 <__retarget_lock_acquire_recursive>
 80069b2:	4628      	mov	r0, r5
 80069b4:	4621      	mov	r1, r4
 80069b6:	f7ff ff63 	bl	8006880 <__sflush_r>
 80069ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069bc:	4605      	mov	r5, r0
 80069be:	07da      	lsls	r2, r3, #31
 80069c0:	d4e4      	bmi.n	800698c <_fflush_r+0xc>
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	059b      	lsls	r3, r3, #22
 80069c6:	d4e1      	bmi.n	800698c <_fflush_r+0xc>
 80069c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ca:	f7fe fb35 	bl	8005038 <__retarget_lock_release_recursive>
 80069ce:	e7dd      	b.n	800698c <_fflush_r+0xc>

080069d0 <__swhatbuf_r>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	460c      	mov	r4, r1
 80069d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d8:	4615      	mov	r5, r2
 80069da:	2900      	cmp	r1, #0
 80069dc:	461e      	mov	r6, r3
 80069de:	b096      	sub	sp, #88	@ 0x58
 80069e0:	da0c      	bge.n	80069fc <__swhatbuf_r+0x2c>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	2100      	movs	r1, #0
 80069e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069ea:	bf14      	ite	ne
 80069ec:	2340      	movne	r3, #64	@ 0x40
 80069ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069f2:	2000      	movs	r0, #0
 80069f4:	6031      	str	r1, [r6, #0]
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	b016      	add	sp, #88	@ 0x58
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	466a      	mov	r2, sp
 80069fe:	f000 f849 	bl	8006a94 <_fstat_r>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	dbed      	blt.n	80069e2 <__swhatbuf_r+0x12>
 8006a06:	9901      	ldr	r1, [sp, #4]
 8006a08:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a0c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a10:	4259      	negs	r1, r3
 8006a12:	4159      	adcs	r1, r3
 8006a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a18:	e7eb      	b.n	80069f2 <__swhatbuf_r+0x22>

08006a1a <__smakebuf_r>:
 8006a1a:	898b      	ldrh	r3, [r1, #12]
 8006a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a1e:	079d      	lsls	r5, r3, #30
 8006a20:	4606      	mov	r6, r0
 8006a22:	460c      	mov	r4, r1
 8006a24:	d507      	bpl.n	8006a36 <__smakebuf_r+0x1c>
 8006a26:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	2301      	movs	r3, #1
 8006a30:	6163      	str	r3, [r4, #20]
 8006a32:	b003      	add	sp, #12
 8006a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a36:	466a      	mov	r2, sp
 8006a38:	ab01      	add	r3, sp, #4
 8006a3a:	f7ff ffc9 	bl	80069d0 <__swhatbuf_r>
 8006a3e:	9f00      	ldr	r7, [sp, #0]
 8006a40:	4605      	mov	r5, r0
 8006a42:	4639      	mov	r1, r7
 8006a44:	4630      	mov	r0, r6
 8006a46:	f7ff f9d5 	bl	8005df4 <_malloc_r>
 8006a4a:	b948      	cbnz	r0, 8006a60 <__smakebuf_r+0x46>
 8006a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a50:	059a      	lsls	r2, r3, #22
 8006a52:	d4ee      	bmi.n	8006a32 <__smakebuf_r+0x18>
 8006a54:	f023 0303 	bic.w	r3, r3, #3
 8006a58:	f043 0302 	orr.w	r3, r3, #2
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	e7e2      	b.n	8006a26 <__smakebuf_r+0xc>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	9b01      	ldr	r3, [sp, #4]
 8006a6e:	6020      	str	r0, [r4, #0]
 8006a70:	b15b      	cbz	r3, 8006a8a <__smakebuf_r+0x70>
 8006a72:	4630      	mov	r0, r6
 8006a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a78:	f000 f81e 	bl	8006ab8 <_isatty_r>
 8006a7c:	b128      	cbz	r0, 8006a8a <__smakebuf_r+0x70>
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f023 0303 	bic.w	r3, r3, #3
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	431d      	orrs	r5, r3
 8006a8e:	81a5      	strh	r5, [r4, #12]
 8006a90:	e7cf      	b.n	8006a32 <__smakebuf_r+0x18>
	...

08006a94 <_fstat_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	2300      	movs	r3, #0
 8006a98:	4d06      	ldr	r5, [pc, #24]	@ (8006ab4 <_fstat_r+0x20>)
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	f7fa fe9d 	bl	80017e0 <_fstat>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d102      	bne.n	8006ab0 <_fstat_r+0x1c>
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	b103      	cbz	r3, 8006ab0 <_fstat_r+0x1c>
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000504 	.word	0x20000504

08006ab8 <_isatty_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	2300      	movs	r3, #0
 8006abc:	4d05      	ldr	r5, [pc, #20]	@ (8006ad4 <_isatty_r+0x1c>)
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fa fe9b 	bl	80017fe <_isatty>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_isatty_r+0x1a>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_isatty_r+0x1a>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	20000504 	.word	0x20000504

08006ad8 <_sbrk_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	2300      	movs	r3, #0
 8006adc:	4d05      	ldr	r5, [pc, #20]	@ (8006af4 <_sbrk_r+0x1c>)
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	f7fa fea2 	bl	800182c <_sbrk>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d102      	bne.n	8006af2 <_sbrk_r+0x1a>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b103      	cbz	r3, 8006af2 <_sbrk_r+0x1a>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	20000504 	.word	0x20000504

08006af8 <memcpy>:
 8006af8:	440a      	add	r2, r1
 8006afa:	4291      	cmp	r1, r2
 8006afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b00:	d100      	bne.n	8006b04 <memcpy+0xc>
 8006b02:	4770      	bx	lr
 8006b04:	b510      	push	{r4, lr}
 8006b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b0a:	4291      	cmp	r1, r2
 8006b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b10:	d1f9      	bne.n	8006b06 <memcpy+0xe>
 8006b12:	bd10      	pop	{r4, pc}

08006b14 <__assert_func>:
 8006b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b16:	4614      	mov	r4, r2
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <__assert_func+0x2c>)
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68d8      	ldr	r0, [r3, #12]
 8006b22:	b14c      	cbz	r4, 8006b38 <__assert_func+0x24>
 8006b24:	4b07      	ldr	r3, [pc, #28]	@ (8006b44 <__assert_func+0x30>)
 8006b26:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b2a:	9100      	str	r1, [sp, #0]
 8006b2c:	462b      	mov	r3, r5
 8006b2e:	4906      	ldr	r1, [pc, #24]	@ (8006b48 <__assert_func+0x34>)
 8006b30:	f000 f842 	bl	8006bb8 <fiprintf>
 8006b34:	f000 f852 	bl	8006bdc <abort>
 8006b38:	4b04      	ldr	r3, [pc, #16]	@ (8006b4c <__assert_func+0x38>)
 8006b3a:	461c      	mov	r4, r3
 8006b3c:	e7f3      	b.n	8006b26 <__assert_func+0x12>
 8006b3e:	bf00      	nop
 8006b40:	20000018 	.word	0x20000018
 8006b44:	080072e7 	.word	0x080072e7
 8006b48:	080072f4 	.word	0x080072f4
 8006b4c:	08007322 	.word	0x08007322

08006b50 <_calloc_r>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	fba1 5402 	umull	r5, r4, r1, r2
 8006b56:	b934      	cbnz	r4, 8006b66 <_calloc_r+0x16>
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f7ff f94b 	bl	8005df4 <_malloc_r>
 8006b5e:	4606      	mov	r6, r0
 8006b60:	b928      	cbnz	r0, 8006b6e <_calloc_r+0x1e>
 8006b62:	4630      	mov	r0, r6
 8006b64:	bd70      	pop	{r4, r5, r6, pc}
 8006b66:	220c      	movs	r2, #12
 8006b68:	2600      	movs	r6, #0
 8006b6a:	6002      	str	r2, [r0, #0]
 8006b6c:	e7f9      	b.n	8006b62 <_calloc_r+0x12>
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4621      	mov	r1, r4
 8006b72:	f7fe f9e3 	bl	8004f3c <memset>
 8006b76:	e7f4      	b.n	8006b62 <_calloc_r+0x12>

08006b78 <__ascii_mbtowc>:
 8006b78:	b082      	sub	sp, #8
 8006b7a:	b901      	cbnz	r1, 8006b7e <__ascii_mbtowc+0x6>
 8006b7c:	a901      	add	r1, sp, #4
 8006b7e:	b142      	cbz	r2, 8006b92 <__ascii_mbtowc+0x1a>
 8006b80:	b14b      	cbz	r3, 8006b96 <__ascii_mbtowc+0x1e>
 8006b82:	7813      	ldrb	r3, [r2, #0]
 8006b84:	600b      	str	r3, [r1, #0]
 8006b86:	7812      	ldrb	r2, [r2, #0]
 8006b88:	1e10      	subs	r0, r2, #0
 8006b8a:	bf18      	it	ne
 8006b8c:	2001      	movne	r0, #1
 8006b8e:	b002      	add	sp, #8
 8006b90:	4770      	bx	lr
 8006b92:	4610      	mov	r0, r2
 8006b94:	e7fb      	b.n	8006b8e <__ascii_mbtowc+0x16>
 8006b96:	f06f 0001 	mvn.w	r0, #1
 8006b9a:	e7f8      	b.n	8006b8e <__ascii_mbtowc+0x16>

08006b9c <__ascii_wctomb>:
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	4608      	mov	r0, r1
 8006ba0:	b141      	cbz	r1, 8006bb4 <__ascii_wctomb+0x18>
 8006ba2:	2aff      	cmp	r2, #255	@ 0xff
 8006ba4:	d904      	bls.n	8006bb0 <__ascii_wctomb+0x14>
 8006ba6:	228a      	movs	r2, #138	@ 0x8a
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	4770      	bx	lr
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	700a      	strb	r2, [r1, #0]
 8006bb4:	4770      	bx	lr
	...

08006bb8 <fiprintf>:
 8006bb8:	b40e      	push	{r1, r2, r3}
 8006bba:	b503      	push	{r0, r1, lr}
 8006bbc:	4601      	mov	r1, r0
 8006bbe:	ab03      	add	r3, sp, #12
 8006bc0:	4805      	ldr	r0, [pc, #20]	@ (8006bd8 <fiprintf+0x20>)
 8006bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	f7ff fd41 	bl	8006650 <_vfiprintf_r>
 8006bce:	b002      	add	sp, #8
 8006bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bd4:	b003      	add	sp, #12
 8006bd6:	4770      	bx	lr
 8006bd8:	20000018 	.word	0x20000018

08006bdc <abort>:
 8006bdc:	2006      	movs	r0, #6
 8006bde:	b508      	push	{r3, lr}
 8006be0:	f000 f82c 	bl	8006c3c <raise>
 8006be4:	2001      	movs	r0, #1
 8006be6:	f7fa fdc8 	bl	800177a <_exit>

08006bea <_raise_r>:
 8006bea:	291f      	cmp	r1, #31
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4605      	mov	r5, r0
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	d904      	bls.n	8006bfe <_raise_r+0x14>
 8006bf4:	2316      	movs	r3, #22
 8006bf6:	6003      	str	r3, [r0, #0]
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	bd38      	pop	{r3, r4, r5, pc}
 8006bfe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006c00:	b112      	cbz	r2, 8006c08 <_raise_r+0x1e>
 8006c02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c06:	b94b      	cbnz	r3, 8006c1c <_raise_r+0x32>
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 f831 	bl	8006c70 <_getpid_r>
 8006c0e:	4622      	mov	r2, r4
 8006c10:	4601      	mov	r1, r0
 8006c12:	4628      	mov	r0, r5
 8006c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c18:	f000 b818 	b.w	8006c4c <_kill_r>
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d00a      	beq.n	8006c36 <_raise_r+0x4c>
 8006c20:	1c59      	adds	r1, r3, #1
 8006c22:	d103      	bne.n	8006c2c <_raise_r+0x42>
 8006c24:	2316      	movs	r3, #22
 8006c26:	6003      	str	r3, [r0, #0]
 8006c28:	2001      	movs	r0, #1
 8006c2a:	e7e7      	b.n	8006bfc <_raise_r+0x12>
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006c34:	4798      	blx	r3
 8006c36:	2000      	movs	r0, #0
 8006c38:	e7e0      	b.n	8006bfc <_raise_r+0x12>
	...

08006c3c <raise>:
 8006c3c:	4b02      	ldr	r3, [pc, #8]	@ (8006c48 <raise+0xc>)
 8006c3e:	4601      	mov	r1, r0
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	f7ff bfd2 	b.w	8006bea <_raise_r>
 8006c46:	bf00      	nop
 8006c48:	20000018 	.word	0x20000018

08006c4c <_kill_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4d06      	ldr	r5, [pc, #24]	@ (8006c6c <_kill_r+0x20>)
 8006c52:	4604      	mov	r4, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	4611      	mov	r1, r2
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	f7fa fd7e 	bl	800175a <_kill>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	d102      	bne.n	8006c68 <_kill_r+0x1c>
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	b103      	cbz	r3, 8006c68 <_kill_r+0x1c>
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	bd38      	pop	{r3, r4, r5, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000504 	.word	0x20000504

08006c70 <_getpid_r>:
 8006c70:	f7fa bd6c 	b.w	800174c <_getpid>

08006c74 <sqrtf>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4605      	mov	r5, r0
 8006c78:	f000 f816 	bl	8006ca8 <__ieee754_sqrtf>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4604      	mov	r4, r0
 8006c80:	4628      	mov	r0, r5
 8006c82:	f7fa f9d5 	bl	8001030 <__aeabi_fcmpun>
 8006c86:	b968      	cbnz	r0, 8006ca4 <sqrtf+0x30>
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f7fa f9a8 	bl	8000fe0 <__aeabi_fcmplt>
 8006c90:	b140      	cbz	r0, 8006ca4 <sqrtf+0x30>
 8006c92:	f7fe f9a5 	bl	8004fe0 <__errno>
 8006c96:	2321      	movs	r3, #33	@ 0x21
 8006c98:	2100      	movs	r1, #0
 8006c9a:	6003      	str	r3, [r0, #0]
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	f7fa f8b5 	bl	8000e0c <__aeabi_fdiv>
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}

08006ca8 <__ieee754_sqrtf>:
 8006ca8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8006cac:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	d30a      	bcc.n	8006cd0 <__ieee754_sqrtf+0x28>
 8006cba:	4601      	mov	r1, r0
 8006cbc:	f7f9 fff2 	bl	8000ca4 <__aeabi_fmul>
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f7f9 fee6 	bl	8000a94 <__addsf3>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	4620      	mov	r0, r4
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d0fa      	beq.n	8006cca <__ieee754_sqrtf+0x22>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	da06      	bge.n	8006ce6 <__ieee754_sqrtf+0x3e>
 8006cd8:	4601      	mov	r1, r0
 8006cda:	f7f9 fed9 	bl	8000a90 <__aeabi_fsub>
 8006cde:	4601      	mov	r1, r0
 8006ce0:	f7fa f894 	bl	8000e0c <__aeabi_fdiv>
 8006ce4:	e7f0      	b.n	8006cc8 <__ieee754_sqrtf+0x20>
 8006ce6:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8006cea:	d03c      	beq.n	8006d66 <__ieee754_sqrtf+0xbe>
 8006cec:	15c2      	asrs	r2, r0, #23
 8006cee:	2400      	movs	r4, #0
 8006cf0:	2019      	movs	r0, #25
 8006cf2:	4626      	mov	r6, r4
 8006cf4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006cf8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006cfc:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8006d00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006d04:	07d2      	lsls	r2, r2, #31
 8006d06:	bf58      	it	pl
 8006d08:	005b      	lslpl	r3, r3, #1
 8006d0a:	106d      	asrs	r5, r5, #1
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	1872      	adds	r2, r6, r1
 8006d10:	429a      	cmp	r2, r3
 8006d12:	bfcf      	iteee	gt
 8006d14:	461a      	movgt	r2, r3
 8006d16:	1856      	addle	r6, r2, r1
 8006d18:	1864      	addle	r4, r4, r1
 8006d1a:	1a9a      	suble	r2, r3, r2
 8006d1c:	3801      	subs	r0, #1
 8006d1e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8006d22:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006d26:	d1f2      	bne.n	8006d0e <__ieee754_sqrtf+0x66>
 8006d28:	b1ba      	cbz	r2, 8006d5a <__ieee754_sqrtf+0xb2>
 8006d2a:	4e15      	ldr	r6, [pc, #84]	@ (8006d80 <__ieee754_sqrtf+0xd8>)
 8006d2c:	4f15      	ldr	r7, [pc, #84]	@ (8006d84 <__ieee754_sqrtf+0xdc>)
 8006d2e:	6830      	ldr	r0, [r6, #0]
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	f7f9 fead 	bl	8000a90 <__aeabi_fsub>
 8006d36:	f8d6 8000 	ldr.w	r8, [r6]
 8006d3a:	4601      	mov	r1, r0
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	f7fa f959 	bl	8000ff4 <__aeabi_fcmple>
 8006d42:	b150      	cbz	r0, 8006d5a <__ieee754_sqrtf+0xb2>
 8006d44:	6830      	ldr	r0, [r6, #0]
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	f7f9 fea4 	bl	8000a94 <__addsf3>
 8006d4c:	6836      	ldr	r6, [r6, #0]
 8006d4e:	4601      	mov	r1, r0
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7fa f945 	bl	8000fe0 <__aeabi_fcmplt>
 8006d56:	b170      	cbz	r0, 8006d76 <__ieee754_sqrtf+0xce>
 8006d58:	3402      	adds	r4, #2
 8006d5a:	1064      	asrs	r4, r4, #1
 8006d5c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8006d60:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8006d64:	e7b1      	b.n	8006cca <__ieee754_sqrtf+0x22>
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	0218      	lsls	r0, r3, #8
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	f101 0101 	add.w	r1, r1, #1
 8006d70:	d5f9      	bpl.n	8006d66 <__ieee754_sqrtf+0xbe>
 8006d72:	4252      	negs	r2, r2
 8006d74:	e7bb      	b.n	8006cee <__ieee754_sqrtf+0x46>
 8006d76:	3401      	adds	r4, #1
 8006d78:	f024 0401 	bic.w	r4, r4, #1
 8006d7c:	e7ed      	b.n	8006d5a <__ieee754_sqrtf+0xb2>
 8006d7e:	bf00      	nop
 8006d80:	08007528 	.word	0x08007528
 8006d84:	08007524 	.word	0x08007524

08006d88 <_init>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr

08006d94 <_fini>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	bf00      	nop
 8006d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9a:	bc08      	pop	{r3}
 8006d9c:	469e      	mov	lr, r3
 8006d9e:	4770      	bx	lr
