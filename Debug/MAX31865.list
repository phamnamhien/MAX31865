
MAX31865.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  080058b8  080058b8  000068b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ffc  08005ffc  00006ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006004  08006004  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006004  08006004  00007004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006008  08006008  00007008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800600c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001d4  080061e0  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  080061e0  0000850c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd13  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251e  00000000  00000000  00014f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00017430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087c  00000000  00000000  00017d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185d4  00000000  00000000  000185dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea52  00000000  00000000  00030bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867e5  00000000  00000000  0003f602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5de7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a18  00000000  00000000  000c5e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00005483  00000000  00000000  000c8844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000cdcc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080058a0 	.word	0x080058a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080058a0 	.word	0x080058a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800105c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	2410      	movs	r4, #16
{
 8001062:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	4622      	mov	r2, r4
 8001066:	2100      	movs	r1, #0
 8001068:	eb0d 0004 	add.w	r0, sp, r4
 800106c:	f002 fce2 	bl	8003a34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001072:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80010fc <MX_GPIO_Init+0xa0>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX31865_CS_GPIO_Port, MAX31865_CS_Pin, GPIO_PIN_RESET);
 8001078:	4d21      	ldr	r5, [pc, #132]	@ (8001100 <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4322      	orrs	r2, r4
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001080:	4648      	mov	r0, r9
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4022      	ands	r2, r4
 8001084:	9201      	str	r2, [sp, #4]
 8001086:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001088:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800108a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	f042 0220 	orr.w	r2, r2, #32
 8001092:	619a      	str	r2, [r3, #24]
 8001094:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	f002 0220 	and.w	r2, r2, #32
 800109e:	9202      	str	r2, [sp, #8]
 80010a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	f042 0204 	orr.w	r2, r2, #4
 80010aa:	619a      	str	r2, [r3, #24]
 80010ac:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	9303      	str	r3, [sp, #12]
 80010b6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010b8:	f000 fc92 	bl	80019e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MAX31865_CS_GPIO_Port, MAX31865_CS_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	4621      	mov	r1, r4
 80010c0:	4628      	mov	r0, r5
 80010c2:	f000 fc8d 	bl	80019e0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010cc:	4648      	mov	r0, r9
 80010ce:	eb0d 0104 	add.w	r1, sp, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	e9cd 7606 	strd	r7, r6, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010da:	f000 fbad 	bl	8001838 <HAL_GPIO_Init>
  /*Configure GPIO pin : MAX31865_CS_Pin */
  GPIO_InitStruct.Pin = MAX31865_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MAX31865_CS_GPIO_Port, &GPIO_InitStruct);
 80010de:	4628      	mov	r0, r5
 80010e0:	eb0d 0104 	add.w	r1, sp, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	e9cd 4804 	strd	r4, r8, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	e9cd 7606 	strd	r7, r6, [sp, #24]
  HAL_GPIO_Init(MAX31865_CS_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f000 fba4 	bl	8001838 <HAL_GPIO_Init>

}
 80010f0:	b009      	add	sp, #36	@ 0x24
 80010f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40011000 	.word	0x40011000
 8001100:	40010800 	.word	0x40010800

08001104 <stm32_spi_write_read>:
 * @brief STM32 HAL SPI Write/Read function for MAX31865
 */
max31865_status_t stm32_spi_write_read(MAX31865_Handle_t *hmax, uint8_t *tx_data, uint8_t *rx_data, uint16_t size) {
    HAL_StatusTypeDef hal_status;

    if (size == 1) {
 8001104:	2b01      	cmp	r3, #1
max31865_status_t stm32_spi_write_read(MAX31865_Handle_t *hmax, uint8_t *tx_data, uint8_t *rx_data, uint16_t size) {
 8001106:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001108:	4615      	mov	r5, r2
 800110a:	461c      	mov	r4, r3
    if (size == 1) {
 800110c:	d113      	bne.n	8001136 <stm32_spi_write_read+0x32>
        // Write only (register address)
        hal_status = HAL_SPI_Transmit(&hspi1, tx_data, 1, HAL_MAX_DELAY);
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	4622      	mov	r2, r4
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <stm32_spi_write_read+0x44>)
 8001116:	f000 ffe7 	bl	80020e8 <HAL_SPI_Transmit>
        if (hal_status != HAL_OK) return MAX31865_TIMEOUT;
 800111a:	b998      	cbnz	r0, 8001144 <stm32_spi_write_read+0x40>

        // Read response
        hal_status = HAL_SPI_Receive(&hspi1, rx_data, 1, HAL_MAX_DELAY);
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	4622      	mov	r2, r4
 8001122:	4629      	mov	r1, r5
 8001124:	4808      	ldr	r0, [pc, #32]	@ (8001148 <stm32_spi_write_read+0x44>)
 8001126:	f001 f98b 	bl	8002440 <HAL_SPI_Receive>
        if (hal_status != HAL_OK) return MAX31865_TIMEOUT;
    } else {
        // TransmitReceive for multi-byte operations
        hal_status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, size, HAL_MAX_DELAY);
        if (hal_status != HAL_OK) return MAX31865_TIMEOUT;
 800112a:	3800      	subs	r0, #0
 800112c:	bf18      	it	ne
 800112e:	2001      	movne	r0, #1
 8001130:	0040      	lsls	r0, r0, #1
    }

    return MAX31865_OK;
}
 8001132:	b003      	add	sp, #12
 8001134:	bd30      	pop	{r4, r5, pc}
        hal_status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, size, HAL_MAX_DELAY);
 8001136:	f04f 30ff 	mov.w	r0, #4294967295
 800113a:	9000      	str	r0, [sp, #0]
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <stm32_spi_write_read+0x44>)
 800113e:	f001 f883 	bl	8002248 <HAL_SPI_TransmitReceive>
 8001142:	e7f2      	b.n	800112a <stm32_spi_write_read+0x26>
        if (hal_status != HAL_OK) return MAX31865_TIMEOUT;
 8001144:	2002      	movs	r0, #2
 8001146:	e7f4      	b.n	8001132 <stm32_spi_write_read+0x2e>
 8001148:	20000218 	.word	0x20000218

0800114c <stm32_cs_low>:

/**
 * @brief Set CS pin low
 */
void stm32_cs_low(void) {
    HAL_GPIO_WritePin(MAX31865_CS_GPIO_Port, MAX31865_CS_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2110      	movs	r1, #16
 8001150:	4801      	ldr	r0, [pc, #4]	@ (8001158 <stm32_cs_low+0xc>)
 8001152:	f000 bc45 	b.w	80019e0 <HAL_GPIO_WritePin>
 8001156:	bf00      	nop
 8001158:	40010800 	.word	0x40010800

0800115c <stm32_cs_high>:

/**
 * @brief Set CS pin high
 */
void stm32_cs_high(void) {
    HAL_GPIO_WritePin(MAX31865_CS_GPIO_Port, MAX31865_CS_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	4801      	ldr	r0, [pc, #4]	@ (8001168 <stm32_cs_high+0xc>)
 8001162:	f000 bc3d 	b.w	80019e0 <HAL_GPIO_WritePin>
 8001166:	bf00      	nop
 8001168:	40010800 	.word	0x40010800

0800116c <stm32_delay_ms>:

/**
 * @brief Delay function in milliseconds
 */
void stm32_delay_ms(uint32_t ms) {
    HAL_Delay(ms);
 800116c:	f000 bafc 	b.w	8001768 <HAL_Delay>

08001170 <_write>:
}

/**
 * @brief Redirect printf to UART
 */
int _write(int file, char *ptr, int len) {
 8001170:	b510      	push	{r4, lr}
 8001172:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	b292      	uxth	r2, r2
 800117a:	4802      	ldr	r0, [pc, #8]	@ (8001184 <_write+0x14>)
 800117c:	f001 facd 	bl	800271a <HAL_UART_Transmit>
    return len;
}
 8001180:	4620      	mov	r0, r4
 8001182:	bd10      	pop	{r4, pc}
 8001184:	20000274 	.word	0x20000274

08001188 <MAX31865_Test>:

/**
 * @brief Test MAX31865 functionality
 */
void MAX31865_Test(void) {
 8001188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t fault_status;

    printf("\r\n=== MAX31865 RTD Temperature Sensor Test ===\r\n");

    /* Initialize Platform Interface structure */
    max31865_platform_t platform = {
 800118c:	4d56      	ldr	r5, [pc, #344]	@ (80012e8 <MAX31865_Test+0x160>)
void MAX31865_Test(void) {
 800118e:	b08a      	sub	sp, #40	@ 0x28
    printf("\r\n=== MAX31865 RTD Temperature Sensor Test ===\r\n");
 8001190:	4856      	ldr	r0, [pc, #344]	@ (80012ec <MAX31865_Test+0x164>)
    max31865_platform_t platform = {
 8001192:	ac05      	add	r4, sp, #20
    printf("\r\n=== MAX31865 RTD Temperature Sensor Test ===\r\n");
 8001194:	f002 fb6e 	bl	8003874 <puts>
    max31865_platform_t platform = {
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	682b      	ldr	r3, [r5, #0]
        .delay_ms = stm32_delay_ms,
        .platform_data = NULL
    };

    /* Initialize MAX31865 */
    status = MAX31865_Init(&hmax31865,
 800119e:	2201      	movs	r2, #1
    max31865_platform_t platform = {
 80011a0:	6023      	str	r3, [r4, #0]
    status = MAX31865_Init(&hmax31865,
 80011a2:	4b53      	ldr	r3, [pc, #332]	@ (80012f0 <MAX31865_Test+0x168>)
 80011a4:	4853      	ldr	r0, [pc, #332]	@ (80012f4 <MAX31865_Test+0x16c>)
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	a905      	add	r1, sp, #20
 80011aa:	4b53      	ldr	r3, [pc, #332]	@ (80012f8 <MAX31865_Test+0x170>)
 80011ac:	f001 fc44 	bl	8002a38 <MAX31865_Init>
    					&platform,
                       	MAX31865_3WIRE,
						RREF_VALUE,
						RNOMINAL_VALUE);

    if (status != MAX31865_OK) {
 80011b0:	4604      	mov	r4, r0
 80011b2:	b130      	cbz	r0, 80011c2 <MAX31865_Test+0x3a>
        printf("ERROR: MAX31865 initialization failed! Status: %d\r\n", status);
 80011b4:	4601      	mov	r1, r0
 80011b6:	4851      	ldr	r0, [pc, #324]	@ (80012fc <MAX31865_Test+0x174>)
 80011b8:	f002 faf4 	bl	80037a4 <iprintf>
        printf("\r\n");
        HAL_Delay(2000); // Wait 2 seconds between measurements
    }

    printf("=== Test Complete ===\r\n\r\n");
}
 80011bc:	b00a      	add	sp, #40	@ 0x28
 80011be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    printf("MAX31865 initialized successfully!\r\n");
 80011c2:	484f      	ldr	r0, [pc, #316]	@ (8001300 <MAX31865_Test+0x178>)
 80011c4:	f002 fb56 	bl	8003874 <puts>
    printf("Configuration: 3-wire, RREF=%.1f ohm, RNOMINAL=%.1f ohm\r\n",
 80011c8:	2200      	movs	r2, #0
 80011ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001304 <MAX31865_Test+0x17c>)
 80011cc:	484e      	ldr	r0, [pc, #312]	@ (8001308 <MAX31865_Test+0x180>)
 80011ce:	e9cd 2300 	strd	r2, r3, [sp]
 80011d2:	a343      	add	r3, pc, #268	@ (adr r3, 80012e0 <MAX31865_Test+0x158>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f002 fae4 	bl	80037a4 <iprintf>
    MAX31865_SetFilter(&hmax31865, MAX31865_FILTER_60HZ);
 80011dc:	4621      	mov	r1, r4
 80011de:	4845      	ldr	r0, [pc, #276]	@ (80012f4 <MAX31865_Test+0x16c>)
 80011e0:	f001 fb8d 	bl	80028fe <MAX31865_SetFilter>
    printf("Filter set to 60Hz\r\n\r\n");
 80011e4:	4849      	ldr	r0, [pc, #292]	@ (800130c <MAX31865_Test+0x184>)
 80011e6:	f002 fb45 	bl	8003874 <puts>
        printf("--- Measurement %d ---\r\n", i + 1);
 80011ea:	4e49      	ldr	r6, [pc, #292]	@ (8001310 <MAX31865_Test+0x188>)
        status = MAX31865_ReadRTD(&hmax31865, &rtd_raw);
 80011ec:	4d41      	ldr	r5, [pc, #260]	@ (80012f4 <MAX31865_Test+0x16c>)
        printf("\r\n");
 80011ee:	4f49      	ldr	r7, [pc, #292]	@ (8001314 <MAX31865_Test+0x18c>)
        printf("--- Measurement %d ---\r\n", i + 1);
 80011f0:	3401      	adds	r4, #1
 80011f2:	4621      	mov	r1, r4
 80011f4:	4630      	mov	r0, r6
 80011f6:	f002 fad5 	bl	80037a4 <iprintf>
        status = MAX31865_ReadRTD(&hmax31865, &rtd_raw);
 80011fa:	f10d 010a 	add.w	r1, sp, #10
 80011fe:	4628      	mov	r0, r5
 8001200:	f001 fc6e 	bl	8002ae0 <MAX31865_ReadRTD>
        if (status == MAX31865_OK) {
 8001204:	4601      	mov	r1, r0
 8001206:	2800      	cmp	r0, #0
 8001208:	d144      	bne.n	8001294 <MAX31865_Test+0x10c>
            printf("RTD Raw Value: %u (0x%04X)\r\n", rtd_raw, rtd_raw);
 800120a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800120e:	4842      	ldr	r0, [pc, #264]	@ (8001318 <MAX31865_Test+0x190>)
 8001210:	4611      	mov	r1, r2
 8001212:	f002 fac7 	bl	80037a4 <iprintf>
        status = MAX31865_ReadResistance(&hmax31865, &resistance);
 8001216:	a904      	add	r1, sp, #16
 8001218:	4628      	mov	r0, r5
 800121a:	f001 fcb3 	bl	8002b84 <MAX31865_ReadResistance>
        if (status == MAX31865_OK) {
 800121e:	4601      	mov	r1, r0
 8001220:	2800      	cmp	r0, #0
 8001222:	d14c      	bne.n	80012be <MAX31865_Test+0x136>
            printf("Resistance: %.3f ohm\r\n", resistance);
 8001224:	9804      	ldr	r0, [sp, #16]
 8001226:	f7ff f8ff 	bl	8000428 <__aeabi_f2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	483b      	ldr	r0, [pc, #236]	@ (800131c <MAX31865_Test+0x194>)
 8001230:	f002 fab8 	bl	80037a4 <iprintf>
        status = MAX31865_ReadTemperature(&hmax31865, &temperature);
 8001234:	a903      	add	r1, sp, #12
 8001236:	4628      	mov	r0, r5
 8001238:	f001 fd36 	bl	8002ca8 <MAX31865_ReadTemperature>
        if (status == MAX31865_OK) {
 800123c:	4601      	mov	r1, r0
 800123e:	2800      	cmp	r0, #0
 8001240:	d141      	bne.n	80012c6 <MAX31865_Test+0x13e>
            printf("Temperature: %.2f C\r\n", temperature);
 8001242:	9803      	ldr	r0, [sp, #12]
 8001244:	f7ff f8f0 	bl	8000428 <__aeabi_f2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4834      	ldr	r0, [pc, #208]	@ (8001320 <MAX31865_Test+0x198>)
 800124e:	f002 faa9 	bl	80037a4 <iprintf>
        status = MAX31865_ReadFault(&hmax31865, &fault_status);
 8001252:	f10d 0109 	add.w	r1, sp, #9
 8001256:	4628      	mov	r0, r5
 8001258:	f001 fc3a 	bl	8002ad0 <MAX31865_ReadFault>
        if (status == MAX31865_OK) {
 800125c:	4601      	mov	r1, r0
 800125e:	2800      	cmp	r0, #0
 8001260:	d137      	bne.n	80012d2 <MAX31865_Test+0x14a>
            if (fault_status != 0) {
 8001262:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8001266:	f1b8 0f00 	cmp.w	r8, #0
 800126a:	d030      	beq.n	80012ce <MAX31865_Test+0x146>
                printf("FAULT STATUS: 0x%02X - %s\r\n",
 800126c:	4640      	mov	r0, r8
 800126e:	f001 fd3f 	bl	8002cf0 <MAX31865_GetFaultString>
 8001272:	4641      	mov	r1, r8
 8001274:	4602      	mov	r2, r0
 8001276:	482b      	ldr	r0, [pc, #172]	@ (8001324 <MAX31865_Test+0x19c>)
 8001278:	f002 fa94 	bl	80037a4 <iprintf>
                MAX31865_ClearFault(&hmax31865);
 800127c:	4628      	mov	r0, r5
 800127e:	f001 fb9c 	bl	80029ba <MAX31865_ClearFault>
                printf("Faults cleared.\r\n");
 8001282:	4829      	ldr	r0, [pc, #164]	@ (8001328 <MAX31865_Test+0x1a0>)
                printf("No faults detected.\r\n");
 8001284:	f002 faf6 	bl	8003874 <puts>
        printf("\r\n");
 8001288:	4638      	mov	r0, r7
 800128a:	f002 faf3 	bl	8003874 <puts>
        HAL_Delay(2000); // Wait 2 seconds between measurements
 800128e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001292:	e00c      	b.n	80012ae <MAX31865_Test+0x126>
        } else if (status == MAX31865_FAULT) {
 8001294:	2803      	cmp	r0, #3
 8001296:	d105      	bne.n	80012a4 <MAX31865_Test+0x11c>
            printf("RTD Fault detected! Raw: %u\r\n", rtd_raw);
 8001298:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800129c:	4823      	ldr	r0, [pc, #140]	@ (800132c <MAX31865_Test+0x1a4>)
 800129e:	f002 fa81 	bl	80037a4 <iprintf>
 80012a2:	e7b8      	b.n	8001216 <MAX31865_Test+0x8e>
            printf("ERROR: Failed to read RTD! Status: %d\r\n", status);
 80012a4:	4822      	ldr	r0, [pc, #136]	@ (8001330 <MAX31865_Test+0x1a8>)
 80012a6:	f002 fa7d 	bl	80037a4 <iprintf>
            HAL_Delay(1000);
 80012aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
        HAL_Delay(2000); // Wait 2 seconds between measurements
 80012ae:	f000 fa5b 	bl	8001768 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 80012b2:	2c0a      	cmp	r4, #10
 80012b4:	d19c      	bne.n	80011f0 <MAX31865_Test+0x68>
    printf("=== Test Complete ===\r\n\r\n");
 80012b6:	481f      	ldr	r0, [pc, #124]	@ (8001334 <MAX31865_Test+0x1ac>)
 80012b8:	f002 fadc 	bl	8003874 <puts>
 80012bc:	e77e      	b.n	80011bc <MAX31865_Test+0x34>
            printf("ERROR: Failed to read resistance! Status: %d\r\n", status);
 80012be:	481e      	ldr	r0, [pc, #120]	@ (8001338 <MAX31865_Test+0x1b0>)
 80012c0:	f002 fa70 	bl	80037a4 <iprintf>
 80012c4:	e7b6      	b.n	8001234 <MAX31865_Test+0xac>
            printf("ERROR: Failed to read temperature! Status: %d\r\n", status);
 80012c6:	481d      	ldr	r0, [pc, #116]	@ (800133c <MAX31865_Test+0x1b4>)
 80012c8:	f002 fa6c 	bl	80037a4 <iprintf>
 80012cc:	e7c1      	b.n	8001252 <MAX31865_Test+0xca>
                printf("No faults detected.\r\n");
 80012ce:	481c      	ldr	r0, [pc, #112]	@ (8001340 <MAX31865_Test+0x1b8>)
 80012d0:	e7d8      	b.n	8001284 <MAX31865_Test+0xfc>
            printf("ERROR: Failed to read fault status! Status: %d\r\n", status);
 80012d2:	481c      	ldr	r0, [pc, #112]	@ (8001344 <MAX31865_Test+0x1bc>)
 80012d4:	f002 fa66 	bl	80037a4 <iprintf>
 80012d8:	e7d6      	b.n	8001288 <MAX31865_Test+0x100>
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	00000000 	.word	0x00000000
 80012e4:	407ae000 	.word	0x407ae000
 80012e8:	080058b8 	.word	0x080058b8
 80012ec:	080058cc 	.word	0x080058cc
 80012f0:	42c80000 	.word	0x42c80000
 80012f4:	200001f0 	.word	0x200001f0
 80012f8:	43d70000 	.word	0x43d70000
 80012fc:	080058fc 	.word	0x080058fc
 8001300:	08005930 	.word	0x08005930
 8001304:	40590000 	.word	0x40590000
 8001308:	08005954 	.word	0x08005954
 800130c:	0800598e 	.word	0x0800598e
 8001310:	080059a4 	.word	0x080059a4
 8001314:	08005b20 	.word	0x08005b20
 8001318:	080059bd 	.word	0x080059bd
 800131c:	08005a20 	.word	0x08005a20
 8001320:	08005b93 	.word	0x08005b93
 8001324:	08005a96 	.word	0x08005a96
 8001328:	08005ab2 	.word	0x08005ab2
 800132c:	080059da 	.word	0x080059da
 8001330:	080059f8 	.word	0x080059f8
 8001334:	08005b09 	.word	0x08005b09
 8001338:	08005a37 	.word	0x08005a37
 800133c:	08005a66 	.word	0x08005a66
 8001340:	08005ac3 	.word	0x08005ac3
 8001344:	08005ad8 	.word	0x08005ad8

08001348 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001348:	2220      	movs	r2, #32
{
 800134a:	b510      	push	{r4, lr}
 800134c:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	2100      	movs	r1, #0
 8001350:	eb0d 0002 	add.w	r0, sp, r2
 8001354:	f002 fb6e 	bl	8003a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	2100      	movs	r1, #0
 800135a:	2214      	movs	r2, #20
 800135c:	a801      	add	r0, sp, #4
 800135e:	f002 fb69 	bl	8003a34 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001370:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	920a      	str	r2, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001376:	f000 fb39 	bl	80019ec <HAL_RCC_OscConfig>
 800137a:	4601      	mov	r1, r0
 800137c:	b108      	cbz	r0, 8001382 <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	e7fe      	b.n	8001380 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001384:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800138a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	e9cd 3401 	strd	r3, r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001390:	f000 fcee 	bl	8001d70 <HAL_RCC_ClockConfig>
 8001394:	b108      	cbz	r0, 800139a <SystemClock_Config+0x52>
 8001396:	b672      	cpsid	i
  while (1)
 8001398:	e7fe      	b.n	8001398 <SystemClock_Config+0x50>
}
 800139a:	b010      	add	sp, #64	@ 0x40
 800139c:	bd10      	pop	{r4, pc}
	...

080013a0 <main>:
{
 80013a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_Init();
 80013a2:	f000 f9bd 	bl	8001720 <HAL_Init>
  SystemClock_Config();
 80013a6:	f7ff ffcf 	bl	8001348 <SystemClock_Config>
  MX_GPIO_Init();
 80013aa:	f7ff fe57 	bl	800105c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013ae:	f000 f915 	bl	80015dc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80013b2:	f000 f83d 	bl	8001430 <MX_SPI1_Init>
  printf("\r\n\r\n=== STM32F103C8T6 MAX31865 Test ===\r\n");
 80013b6:	4815      	ldr	r0, [pc, #84]	@ (800140c <main+0x6c>)
 80013b8:	f002 fa5c 	bl	8003874 <puts>
  printf("System Clock: %lu Hz\r\n", HAL_RCC_GetHCLKFreq());
 80013bc:	f000 fd74 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 80013c0:	4601      	mov	r1, r0
 80013c2:	4813      	ldr	r0, [pc, #76]	@ (8001410 <main+0x70>)
 80013c4:	f002 f9ee 	bl	80037a4 <iprintf>
  printf("Compiled: %s %s\r\n\r\n", __DATE__, __TIME__);
 80013c8:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <main+0x74>)
 80013ca:	4913      	ldr	r1, [pc, #76]	@ (8001418 <main+0x78>)
 80013cc:	4813      	ldr	r0, [pc, #76]	@ (800141c <main+0x7c>)
 80013ce:	f002 f9e9 	bl	80037a4 <iprintf>
  MAX31865_Test();
 80013d2:	f7ff fed9 	bl	8001188 <MAX31865_Test>
	    status = MAX31865_ReadTemperature(&hmax31865, &temperature);
 80013d6:	4c12      	ldr	r4, [pc, #72]	@ (8001420 <main+0x80>)
	        printf("Temperature read error: %d\r\n", status);
 80013d8:	4d12      	ldr	r5, [pc, #72]	@ (8001424 <main+0x84>)
	        printf("Current Temperature: %.2f C\r\n", temperature);
 80013da:	4e13      	ldr	r6, [pc, #76]	@ (8001428 <main+0x88>)
	    status = MAX31865_ReadTemperature(&hmax31865, &temperature);
 80013dc:	a901      	add	r1, sp, #4
 80013de:	4620      	mov	r0, r4
 80013e0:	f001 fc62 	bl	8002ca8 <MAX31865_ReadTemperature>
	    if (status == MAX31865_OK) {
 80013e4:	4601      	mov	r1, r0
 80013e6:	b960      	cbnz	r0, 8001402 <main+0x62>
	        printf("Current Temperature: %.2f C\r\n", temperature);
 80013e8:	9801      	ldr	r0, [sp, #4]
 80013ea:	f7ff f81d 	bl	8000428 <__aeabi_f2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4630      	mov	r0, r6
 80013f4:	f002 f9d6 	bl	80037a4 <iprintf>
	    HAL_Delay(5000); // Update every 5 seconds
 80013f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80013fc:	f000 f9b4 	bl	8001768 <HAL_Delay>
  {
 8001400:	e7ec      	b.n	80013dc <main+0x3c>
	        printf("Temperature read error: %d\r\n", status);
 8001402:	4628      	mov	r0, r5
 8001404:	f002 f9ce 	bl	80037a4 <iprintf>
 8001408:	e7f6      	b.n	80013f8 <main+0x58>
 800140a:	bf00      	nop
 800140c:	08005b22 	.word	0x08005b22
 8001410:	08005b4b 	.word	0x08005b4b
 8001414:	08005b62 	.word	0x08005b62
 8001418:	08005b6b 	.word	0x08005b6b
 800141c:	08005b77 	.word	0x08005b77
 8001420:	200001f0 	.word	0x200001f0
 8001424:	08005ba9 	.word	0x08005ba9
 8001428:	08005b8b 	.word	0x08005b8b

0800142c <Error_Handler>:
 800142c:	b672      	cpsid	i
  while (1)
 800142e:	e7fe      	b.n	800142e <Error_Handler+0x2>

08001430 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001430:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001432:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8001436:	480e      	ldr	r0, [pc, #56]	@ (8001470 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001438:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <MX_SPI1_Init+0x44>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800143a:	2101      	movs	r1, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143c:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001440:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001444:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001446:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800144a:	2210      	movs	r2, #16
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001450:	e9c0 2307 	strd	r2, r3, [r0, #28]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001454:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001458:	6103      	str	r3, [r0, #16]
  hspi1.Init.CRCPolynomial = 10;
 800145a:	230a      	movs	r3, #10
 800145c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800145e:	f000 fdeb 	bl	8002038 <HAL_SPI_Init>
 8001462:	b118      	cbz	r0, 800146c <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001468:	f7ff bfe0 	b.w	800142c <Error_Handler>
}
 800146c:	bd08      	pop	{r3, pc}
 800146e:	bf00      	nop
 8001470:	20000218 	.word	0x20000218
 8001474:	40013000 	.word	0x40013000

08001478 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001478:	b510      	push	{r4, lr}
 800147a:	4604      	mov	r4, r0
 800147c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	2210      	movs	r2, #16
 8001480:	2100      	movs	r1, #0
 8001482:	a802      	add	r0, sp, #8
 8001484:	f002 fad6 	bl	8003a34 <memset>
  if(spiHandle->Instance==SPI1)
 8001488:	6822      	ldr	r2, [r4, #0]
 800148a:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <HAL_SPI_MspInit+0x6c>)
 800148c:	429a      	cmp	r2, r3
 800148e:	d126      	bne.n	80014de <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001490:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 8001494:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	4814      	ldr	r0, [pc, #80]	@ (80014e8 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001498:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800149c:	619a      	str	r2, [r3, #24]
 800149e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014a2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80014a6:	9200      	str	r2, [sp, #0]
 80014a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	699a      	ldr	r2, [r3, #24]
 80014ac:	f042 0204 	orr.w	r2, r2, #4
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f000 f9b6 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014cc:	2140      	movs	r1, #64	@ 0x40
 80014ce:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f000 f9ad 	bl	8001838 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014de:	b006      	add	sp, #24
 80014e0:	bd10      	pop	{r4, pc}
 80014e2:	bf00      	nop
 80014e4:	40013000 	.word	0x40013000
 80014e8:	40010800 	.word	0x40010800

080014ec <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_MspInit+0x3c>)
{
 80014ee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	619a      	str	r2, [r3, #24]
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	f002 0201 	and.w	r2, r2, #1
 80014fe:	9200      	str	r2, [sp, #0]
 8001500:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	69da      	ldr	r2, [r3, #28]
 8001504:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001508:	61da      	str	r2, [r3, #28]
 800150a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800150c:	4a07      	ldr	r2, [pc, #28]	@ (800152c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001516:	6853      	ldr	r3, [r2, #4]
 8001518:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800151c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	b002      	add	sp, #8
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	40010000 	.word	0x40010000

08001530 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler>

08001532 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler>

08001534 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler>

08001536 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler>

08001538 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler>

0800153a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001540:	f000 b900 	b.w	8001744 <HAL_IncTick>

08001544 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001544:	2001      	movs	r0, #1
 8001546:	4770      	bx	lr

08001548 <_kill>:

int _kill(int pid, int sig)
{
 8001548:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800154a:	f002 fad5 	bl	8003af8 <__errno>
 800154e:	2316      	movs	r3, #22
 8001550:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001552:	f04f 30ff 	mov.w	r0, #4294967295
 8001556:	bd08      	pop	{r3, pc}

08001558 <_exit>:

void _exit (int status)
{
 8001558:	b508      	push	{r3, lr}
  errno = EINVAL;
 800155a:	f002 facd 	bl	8003af8 <__errno>
 800155e:	2316      	movs	r3, #22
 8001560:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001562:	e7fe      	b.n	8001562 <_exit+0xa>

08001564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	460d      	mov	r5, r1
 8001568:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	460e      	mov	r6, r1
 800156c:	1b73      	subs	r3, r6, r5
 800156e:	429c      	cmp	r4, r3
 8001570:	dc01      	bgt.n	8001576 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001572:	4620      	mov	r0, r4
 8001574:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	e7f5      	b.n	800156c <_read+0x8>

08001580 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	4770      	bx	lr

08001586 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001586:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 800158a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800158c:	604b      	str	r3, [r1, #4]
}
 800158e:	4770      	bx	lr

08001590 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001590:	2001      	movs	r0, #1
 8001592:	4770      	bx	lr

08001594 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001594:	2000      	movs	r0, #0
 8001596:	4770      	bx	lr

08001598 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4a0b      	ldr	r2, [pc, #44]	@ (80015c8 <_sbrk+0x30>)
{
 800159a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800159c:	6811      	ldr	r1, [r2, #0]
{
 800159e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80015a0:	b909      	cbnz	r1, 80015a6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80015a2:	490a      	ldr	r1, [pc, #40]	@ (80015cc <_sbrk+0x34>)
 80015a4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	6810      	ldr	r0, [r2, #0]
 80015a8:	4909      	ldr	r1, [pc, #36]	@ (80015d0 <_sbrk+0x38>)
 80015aa:	4c0a      	ldr	r4, [pc, #40]	@ (80015d4 <_sbrk+0x3c>)
 80015ac:	4403      	add	r3, r0
 80015ae:	1b09      	subs	r1, r1, r4
 80015b0:	428b      	cmp	r3, r1
 80015b2:	d906      	bls.n	80015c2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80015b4:	f002 faa0 	bl	8003af8 <__errno>
 80015b8:	230c      	movs	r3, #12
 80015ba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80015c0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80015c2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80015c4:	e7fc      	b.n	80015c0 <_sbrk+0x28>
 80015c6:	bf00      	nop
 80015c8:	20000270 	.word	0x20000270
 80015cc:	20000510 	.word	0x20000510
 80015d0:	20005000 	.word	0x20005000
 80015d4:	00000400 	.word	0x00000400

080015d8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	4770      	bx	lr
	...

080015dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015dc:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80015de:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance = USART1;
 80015e2:	480a      	ldr	r0, [pc, #40]	@ (800160c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80015e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <MX_USART1_UART_Init+0x34>)
 80015e6:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ec:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ee:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f6:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015fa:	f001 f85f 	bl	80026bc <HAL_UART_Init>
 80015fe:	b118      	cbz	r0, 8001608 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001604:	f7ff bf12 	b.w	800142c <Error_Handler>
}
 8001608:	bd08      	pop	{r3, pc}
 800160a:	bf00      	nop
 800160c:	20000274 	.word	0x20000274
 8001610:	40013800 	.word	0x40013800

08001614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001614:	b510      	push	{r4, lr}
 8001616:	4604      	mov	r4, r0
 8001618:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	2210      	movs	r2, #16
 800161c:	2100      	movs	r1, #0
 800161e:	a802      	add	r0, sp, #8
 8001620:	f002 fa08 	bl	8003a34 <memset>
  if(uartHandle->Instance==USART1)
 8001624:	6822      	ldr	r2, [r4, #0]
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <HAL_UART_MspInit+0x70>)
 8001628:	429a      	cmp	r2, r3
 800162a:	d128      	bne.n	800167e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800162c:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8001630:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	4815      	ldr	r0, [pc, #84]	@ (8001688 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001634:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001638:	619a      	str	r2, [r3, #24]
 800163a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800163e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001642:	9200      	str	r2, [sp, #0]
 8001644:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	f042 0204 	orr.w	r2, r2, #4
 800164c:	619a      	str	r2, [r3, #24]
 800164e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	f44f 7200 	mov.w	r2, #512	@ 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f000 f8e7 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800166e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f000 f8dd 	bl	8001838 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800167e:	b006      	add	sp, #24
 8001680:	bd10      	pop	{r4, pc}
 8001682:	bf00      	nop
 8001684:	40013800 	.word	0x40013800
 8001688:	40010800 	.word	0x40010800

0800168c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff ffa4 	bl	80015d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001692:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001694:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a09      	ldr	r2, [pc, #36]	@ (80016cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016a8:	4c09      	ldr	r4, [pc, #36]	@ (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f002 fa25 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ba:	f7ff fe71 	bl	80013a0 <main>
  bx lr
 80016be:	4770      	bx	lr
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016c8:	0800600c 	.word	0x0800600c
  ldr r2, =_sbss
 80016cc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016d0:	2000050c 	.word	0x2000050c

080016d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_2_IRQHandler>
	...

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <HAL_InitTick+0x3c>)
{
 80016dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <HAL_InitTick+0x40>)
 80016ea:	6810      	ldr	r0, [r2, #0]
 80016ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80016f0:	f000 f88e 	bl	8001810 <HAL_SYSTICK_Config>
 80016f4:	4604      	mov	r4, r0
 80016f6:	b958      	cbnz	r0, 8001710 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f8:	2d0f      	cmp	r5, #15
 80016fa:	d809      	bhi.n	8001710 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	4602      	mov	r2, r0
 80016fe:	4629      	mov	r1, r5
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f854 	bl	80017b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4620      	mov	r0, r4
 800170a:	4b04      	ldr	r3, [pc, #16]	@ (800171c <HAL_InitTick+0x44>)
 800170c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800170e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001710:	2001      	movs	r0, #1
 8001712:	e7fc      	b.n	800170e <HAL_InitTick+0x36>
 8001714:	20000004 	.word	0x20000004
 8001718:	20000000 	.word	0x20000000
 800171c:	20000008 	.word	0x20000008

08001720 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001720:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <HAL_Init+0x20>)
{
 8001722:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001726:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172e:	f000 f82d 	bl	800178c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	200f      	movs	r0, #15
 8001734:	f7ff ffd0 	bl	80016d8 <HAL_InitTick>
  HAL_MspInit();
 8001738:	f7ff fed8 	bl	80014ec <HAL_MspInit>
}
 800173c:	2000      	movs	r0, #0
 800173e:	bd08      	pop	{r3, pc}
 8001740:	40022000 	.word	0x40022000

08001744 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001744:	4a03      	ldr	r2, [pc, #12]	@ (8001754 <HAL_IncTick+0x10>)
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <HAL_IncTick+0x14>)
 8001748:	6811      	ldr	r1, [r2, #0]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	440b      	add	r3, r1
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200002bc 	.word	0x200002bc
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800175c:	4b01      	ldr	r3, [pc, #4]	@ (8001764 <HAL_GetTick+0x8>)
 800175e:	6818      	ldr	r0, [r3, #0]
}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200002bc 	.word	0x200002bc

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff fff6 	bl	800175c <HAL_GetTick>
 8001770:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001774:	bf1e      	ittt	ne
 8001776:	4b04      	ldrne	r3, [pc, #16]	@ (8001788 <HAL_Delay+0x20>)
 8001778:	781b      	ldrbne	r3, [r3, #0]
 800177a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	1b43      	subs	r3, r0, r5
 8001782:	42a3      	cmp	r3, r4
 8001784:	d3fa      	bcc.n	800177c <HAL_Delay+0x14>
  {
  }
}
 8001786:	bd38      	pop	{r3, r4, r5, pc}
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4907      	ldr	r1, [pc, #28]	@ (80017ac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800178e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001792:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800179a:	0412      	lsls	r2, r2, #16
 800179c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80017a8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b530      	push	{r4, r5, lr}
 80017b4:	68dc      	ldr	r4, [r3, #12]
 80017b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	bf28      	it	cs
 80017c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017cc:	bf94      	ite	ls
 80017ce:	2400      	movls	r4, #0
 80017d0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d2:	fa05 f303 	lsl.w	r3, r5, r3
 80017d6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017da:	40a5      	lsls	r5, r4
 80017dc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80017e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	bfac      	ite	ge
 80017ea:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	4a07      	ldrlt	r2, [pc, #28]	@ (800180c <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	bfab      	itete	ge
 80017f8:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001806:	bd30      	pop	{r4, r5, pc}
 8001808:	e000ed00 	.word	0xe000ed00
 800180c:	e000ed14 	.word	0xe000ed14

08001810 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	3801      	subs	r0, #1
 8001812:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001816:	d20b      	bcs.n	8001830 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001818:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	21f0      	movs	r1, #240	@ 0xf0
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001820:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001826:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001828:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001830:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800183c:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800183e:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8001842:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001844:	f8df c184 	ldr.w	ip, [pc, #388]	@ 80019cc <HAL_GPIO_Init+0x194>
 8001848:	4b61      	ldr	r3, [pc, #388]	@ (80019d0 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800184a:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	680a      	ldr	r2, [r1, #0]
 8001850:	fa32 f506 	lsrs.w	r5, r2, r6
 8001854:	d102      	bne.n	800185c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8001856:	b003      	add	sp, #12
 8001858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800185c:	2501      	movs	r5, #1
 800185e:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001862:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8001866:	ea37 0202 	bics.w	r2, r7, r2
 800186a:	d176      	bne.n	800195a <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 800186c:	684a      	ldr	r2, [r1, #4]
 800186e:	2a03      	cmp	r2, #3
 8001870:	d807      	bhi.n	8001882 <HAL_GPIO_Init+0x4a>
 8001872:	3a01      	subs	r2, #1
 8001874:	2a02      	cmp	r2, #2
 8001876:	f200 8083 	bhi.w	8001980 <HAL_GPIO_Init+0x148>
 800187a:	e8df f002 	tbb	[pc, r2]
 800187e:	9691      	.short	0x9691
 8001880:	9c          	.byte	0x9c
 8001881:	00          	.byte	0x00
 8001882:	2a12      	cmp	r2, #18
 8001884:	f000 8094 	beq.w	80019b0 <HAL_GPIO_Init+0x178>
 8001888:	d869      	bhi.n	800195e <HAL_GPIO_Init+0x126>
 800188a:	2a11      	cmp	r2, #17
 800188c:	f000 808a 	beq.w	80019a4 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001890:	2dff      	cmp	r5, #255	@ 0xff
 8001892:	bf94      	ite	ls
 8001894:	4681      	movls	r9, r0
 8001896:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001898:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800189c:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a0:	bf88      	it	hi
 80018a2:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a4:	fa0e fa02 	lsl.w	sl, lr, r2
 80018a8:	ea27 070a 	bic.w	r7, r7, sl
 80018ac:	fa04 f202 	lsl.w	r2, r4, r2
 80018b0:	4317      	orrs	r7, r2
 80018b2:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80018ba:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80018be:	d04c      	beq.n	800195a <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80018c4:	f026 0703 	bic.w	r7, r6, #3
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	f8cc 2018 	str.w	r2, [ip, #24]
 80018d0:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80018d4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80018d8:	f002 0201 	and.w	r2, r2, #1
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e2:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e6:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80018ec:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ee:	fa0e fb0a 	lsl.w	fp, lr, sl
 80018f2:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018f6:	4a37      	ldr	r2, [pc, #220]	@ (80019d4 <HAL_GPIO_Init+0x19c>)
 80018f8:	4290      	cmp	r0, r2
 80018fa:	d060      	beq.n	80019be <HAL_GPIO_Init+0x186>
 80018fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001900:	4290      	cmp	r0, r2
 8001902:	d05e      	beq.n	80019c2 <HAL_GPIO_Init+0x18a>
 8001904:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001908:	4290      	cmp	r0, r2
 800190a:	d05c      	beq.n	80019c6 <HAL_GPIO_Init+0x18e>
 800190c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001910:	4290      	cmp	r0, r2
 8001912:	bf14      	ite	ne
 8001914:	2204      	movne	r2, #4
 8001916:	2203      	moveq	r2, #3
 8001918:	fa02 f20a 	lsl.w	r2, r2, sl
 800191c:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001920:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001922:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001924:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001928:	bf14      	ite	ne
 800192a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800192c:	43aa      	biceq	r2, r5
 800192e:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001930:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001932:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001936:	bf14      	ite	ne
 8001938:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800193a:	43aa      	biceq	r2, r5
 800193c:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800193e:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001940:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001944:	bf14      	ite	ne
 8001946:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001948:	43aa      	biceq	r2, r5
 800194a:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800194c:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800194e:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001952:	bf14      	ite	ne
 8001954:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001956:	43aa      	biceq	r2, r5
 8001958:	601a      	str	r2, [r3, #0]
	position++;
 800195a:	3601      	adds	r6, #1
 800195c:	e777      	b.n	800184e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800195e:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80019d8 <HAL_GPIO_Init+0x1a0>
 8001962:	454a      	cmp	r2, r9
 8001964:	d00c      	beq.n	8001980 <HAL_GPIO_Init+0x148>
 8001966:	d814      	bhi.n	8001992 <HAL_GPIO_Init+0x15a>
 8001968:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800196c:	454a      	cmp	r2, r9
 800196e:	d007      	beq.n	8001980 <HAL_GPIO_Init+0x148>
 8001970:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8001974:	454a      	cmp	r2, r9
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x148>
 8001978:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 800197c:	454a      	cmp	r2, r9
 800197e:	d187      	bne.n	8001890 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001980:	688a      	ldr	r2, [r1, #8]
 8001982:	b1d2      	cbz	r2, 80019ba <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001984:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001986:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 800198a:	bf0c      	ite	eq
 800198c:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 800198e:	6147      	strne	r7, [r0, #20]
 8001990:	e77e      	b.n	8001890 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001992:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 80019dc <HAL_GPIO_Init+0x1a4>
 8001996:	454a      	cmp	r2, r9
 8001998:	d0f2      	beq.n	8001980 <HAL_GPIO_Init+0x148>
 800199a:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 800199e:	e7ed      	b.n	800197c <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a0:	68cc      	ldr	r4, [r1, #12]
          break;
 80019a2:	e775      	b.n	8001890 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a4:	68cc      	ldr	r4, [r1, #12]
 80019a6:	3404      	adds	r4, #4
          break;
 80019a8:	e772      	b.n	8001890 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019aa:	68cc      	ldr	r4, [r1, #12]
 80019ac:	3408      	adds	r4, #8
          break;
 80019ae:	e76f      	b.n	8001890 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b0:	68cc      	ldr	r4, [r1, #12]
 80019b2:	340c      	adds	r4, #12
          break;
 80019b4:	e76c      	b.n	8001890 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80019b6:	2400      	movs	r4, #0
 80019b8:	e76a      	b.n	8001890 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ba:	2404      	movs	r4, #4
 80019bc:	e768      	b.n	8001890 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019be:	2200      	movs	r2, #0
 80019c0:	e7aa      	b.n	8001918 <HAL_GPIO_Init+0xe0>
 80019c2:	2201      	movs	r2, #1
 80019c4:	e7a8      	b.n	8001918 <HAL_GPIO_Init+0xe0>
 80019c6:	2202      	movs	r2, #2
 80019c8:	e7a6      	b.n	8001918 <HAL_GPIO_Init+0xe0>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010400 	.word	0x40010400
 80019d4:	40010800 	.word	0x40010800
 80019d8:	10220000 	.word	0x10220000
 80019dc:	10310000 	.word	0x10310000

080019e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e0:	b10a      	cbz	r2, 80019e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e2:	6101      	str	r1, [r0, #16]
  }
}
 80019e4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e6:	0409      	lsls	r1, r1, #16
 80019e8:	e7fb      	b.n	80019e2 <HAL_GPIO_WritePin+0x2>
	...

080019ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f0:	4605      	mov	r5, r0
 80019f2:	b338      	cbz	r0, 8001a44 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f4:	6803      	ldr	r3, [r0, #0]
 80019f6:	07db      	lsls	r3, r3, #31
 80019f8:	d410      	bmi.n	8001a1c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	079f      	lsls	r7, r3, #30
 80019fe:	d45e      	bmi.n	8001abe <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	0719      	lsls	r1, r3, #28
 8001a04:	f100 8095 	bmi.w	8001b32 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	075a      	lsls	r2, r3, #29
 8001a0c:	f100 80c1 	bmi.w	8001b92 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a10:	69eb      	ldr	r3, [r5, #28]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 812c 	bne.w	8001c70 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001a18:	2000      	movs	r0, #0
 8001a1a:	e029      	b.n	8001a70 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a1c:	4c90      	ldr	r4, [pc, #576]	@ (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001a1e:	6863      	ldr	r3, [r4, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d007      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a28:	6863      	ldr	r3, [r4, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d10a      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5c>
 8001a32:	6863      	ldr	r3, [r4, #4]
 8001a34:	03de      	lsls	r6, r3, #15
 8001a36:	d507      	bpl.n	8001a48 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	039c      	lsls	r4, r3, #14
 8001a3c:	d5dd      	bpl.n	80019fa <HAL_RCC_OscConfig+0xe>
 8001a3e:	686b      	ldr	r3, [r5, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1da      	bne.n	80019fa <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001a44:	2001      	movs	r0, #1
 8001a46:	e013      	b.n	8001a70 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a48:	686b      	ldr	r3, [r5, #4]
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a4e:	d112      	bne.n	8001a76 <HAL_RCC_OscConfig+0x8a>
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a58:	f7ff fe80 	bl	800175c <HAL_GetTick>
 8001a5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	0398      	lsls	r0, r3, #14
 8001a62:	d4ca      	bmi.n	80019fa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fe7a 	bl	800175c <HAL_GetTick>
 8001a68:	1b80      	subs	r0, r0, r6
 8001a6a:	2864      	cmp	r0, #100	@ 0x64
 8001a6c:	d9f7      	bls.n	8001a5e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001a6e:	2003      	movs	r0, #3
}
 8001a70:	b002      	add	sp, #8
 8001a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	b99b      	cbnz	r3, 8001aa0 <HAL_RCC_OscConfig+0xb4>
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a7e:	6023      	str	r3, [r4, #0]
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a86:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a88:	f7ff fe68 	bl	800175c <HAL_GetTick>
 8001a8c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	0399      	lsls	r1, r3, #14
 8001a92:	d5b2      	bpl.n	80019fa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fe62 	bl	800175c <HAL_GetTick>
 8001a98:	1b80      	subs	r0, r0, r6
 8001a9a:	2864      	cmp	r0, #100	@ 0x64
 8001a9c:	d9f7      	bls.n	8001a8e <HAL_RCC_OscConfig+0xa2>
 8001a9e:	e7e6      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	d103      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xc4>
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aac:	6023      	str	r3, [r4, #0]
 8001aae:	e7cf      	b.n	8001a50 <HAL_RCC_OscConfig+0x64>
 8001ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6023      	str	r3, [r4, #0]
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001abc:	e7cb      	b.n	8001a56 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001abe:	4c68      	ldr	r4, [pc, #416]	@ (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	6863      	ldr	r3, [r4, #4]
 8001ac2:	f013 0f0c 	tst.w	r3, #12
 8001ac6:	d007      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d110      	bne.n	8001af4 <HAL_RCC_OscConfig+0x108>
 8001ad2:	6863      	ldr	r3, [r4, #4]
 8001ad4:	03da      	lsls	r2, r3, #15
 8001ad6:	d40d      	bmi.n	8001af4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	079b      	lsls	r3, r3, #30
 8001adc:	d502      	bpl.n	8001ae4 <HAL_RCC_OscConfig+0xf8>
 8001ade:	692b      	ldr	r3, [r5, #16]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d1af      	bne.n	8001a44 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	696a      	ldr	r2, [r5, #20]
 8001ae8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001aec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	e785      	b.n	8001a00 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af4:	692a      	ldr	r2, [r5, #16]
 8001af6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c64 <HAL_RCC_OscConfig+0x278>)
 8001af8:	b16a      	cbz	r2, 8001b16 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001afe:	f7ff fe2d 	bl	800175c <HAL_GetTick>
 8001b02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	079f      	lsls	r7, r3, #30
 8001b08:	d4ec      	bmi.n	8001ae4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fe27 	bl	800175c <HAL_GetTick>
 8001b0e:	1b80      	subs	r0, r0, r6
 8001b10:	2802      	cmp	r0, #2
 8001b12:	d9f7      	bls.n	8001b04 <HAL_RCC_OscConfig+0x118>
 8001b14:	e7ab      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001b16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b18:	f7ff fe20 	bl	800175c <HAL_GetTick>
 8001b1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	0798      	lsls	r0, r3, #30
 8001b22:	f57f af6d 	bpl.w	8001a00 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff fe19 	bl	800175c <HAL_GetTick>
 8001b2a:	1b80      	subs	r0, r0, r6
 8001b2c:	2802      	cmp	r0, #2
 8001b2e:	d9f6      	bls.n	8001b1e <HAL_RCC_OscConfig+0x132>
 8001b30:	e79d      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b32:	69aa      	ldr	r2, [r5, #24]
 8001b34:	4e4a      	ldr	r6, [pc, #296]	@ (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b36:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <HAL_RCC_OscConfig+0x278>)
 8001b38:	b1e2      	cbz	r2, 8001b74 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001b40:	f7ff fe0c 	bl	800175c <HAL_GetTick>
 8001b44:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001b48:	079b      	lsls	r3, r3, #30
 8001b4a:	d50d      	bpl.n	8001b68 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b4c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001b50:	4b45      	ldr	r3, [pc, #276]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b58:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b5a:	bf00      	nop
  }
  while (Delay --);
 8001b5c:	9b01      	ldr	r3, [sp, #4]
 8001b5e:	1e5a      	subs	r2, r3, #1
 8001b60:	9201      	str	r2, [sp, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f9      	bne.n	8001b5a <HAL_RCC_OscConfig+0x16e>
 8001b66:	e74f      	b.n	8001a08 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff fdf8 	bl	800175c <HAL_GetTick>
 8001b6c:	1b00      	subs	r0, r0, r4
 8001b6e:	2802      	cmp	r0, #2
 8001b70:	d9e9      	bls.n	8001b46 <HAL_RCC_OscConfig+0x15a>
 8001b72:	e77c      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001b74:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001b78:	f7ff fdf0 	bl	800175c <HAL_GetTick>
 8001b7c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001b80:	079f      	lsls	r7, r3, #30
 8001b82:	f57f af41 	bpl.w	8001a08 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff fde9 	bl	800175c <HAL_GetTick>
 8001b8a:	1b00      	subs	r0, r0, r4
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d9f6      	bls.n	8001b7e <HAL_RCC_OscConfig+0x192>
 8001b90:	e76d      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b92:	4c33      	ldr	r4, [pc, #204]	@ (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b94:	69e3      	ldr	r3, [r4, #28]
 8001b96:	00d8      	lsls	r0, r3, #3
 8001b98:	d424      	bmi.n	8001be4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001b9a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	69e3      	ldr	r3, [r4, #28]
 8001b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	61e3      	str	r3, [r4, #28]
 8001ba4:	69e3      	ldr	r3, [r4, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	4e2f      	ldr	r6, [pc, #188]	@ (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001bb0:	6833      	ldr	r3, [r6, #0]
 8001bb2:	05d9      	lsls	r1, r3, #23
 8001bb4:	d518      	bpl.n	8001be8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb6:	68eb      	ldr	r3, [r5, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d126      	bne.n	8001c0a <HAL_RCC_OscConfig+0x21e>
 8001bbc:	6a23      	ldr	r3, [r4, #32]
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fdca 	bl	800175c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001bcc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bce:	6a23      	ldr	r3, [r4, #32]
 8001bd0:	079b      	lsls	r3, r3, #30
 8001bd2:	d53f      	bpl.n	8001c54 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001bd4:	2f00      	cmp	r7, #0
 8001bd6:	f43f af1b 	beq.w	8001a10 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bda:	69e3      	ldr	r3, [r4, #28]
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	61e3      	str	r3, [r4, #28]
 8001be2:	e715      	b.n	8001a10 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001be4:	2700      	movs	r7, #0
 8001be6:	e7e2      	b.n	8001bae <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be8:	6833      	ldr	r3, [r6, #0]
 8001bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bee:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fdb4 	bl	800175c <HAL_GetTick>
 8001bf4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	6833      	ldr	r3, [r6, #0]
 8001bf8:	05da      	lsls	r2, r3, #23
 8001bfa:	d4dc      	bmi.n	8001bb6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfc:	f7ff fdae 	bl	800175c <HAL_GetTick>
 8001c00:	eba0 0008 	sub.w	r0, r0, r8
 8001c04:	2864      	cmp	r0, #100	@ 0x64
 8001c06:	d9f6      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x20a>
 8001c08:	e731      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0a:	b9ab      	cbnz	r3, 8001c38 <HAL_RCC_OscConfig+0x24c>
 8001c0c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	6223      	str	r3, [r4, #32]
 8001c18:	6a23      	ldr	r3, [r4, #32]
 8001c1a:	f023 0304 	bic.w	r3, r3, #4
 8001c1e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c20:	f7ff fd9c 	bl	800175c <HAL_GetTick>
 8001c24:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c26:	6a23      	ldr	r3, [r4, #32]
 8001c28:	0798      	lsls	r0, r3, #30
 8001c2a:	d5d3      	bpl.n	8001bd4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fd96 	bl	800175c <HAL_GetTick>
 8001c30:	1b80      	subs	r0, r0, r6
 8001c32:	4540      	cmp	r0, r8
 8001c34:	d9f7      	bls.n	8001c26 <HAL_RCC_OscConfig+0x23a>
 8001c36:	e71a      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	6a23      	ldr	r3, [r4, #32]
 8001c3c:	d103      	bne.n	8001c46 <HAL_RCC_OscConfig+0x25a>
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	6223      	str	r3, [r4, #32]
 8001c44:	e7ba      	b.n	8001bbc <HAL_RCC_OscConfig+0x1d0>
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6223      	str	r3, [r4, #32]
 8001c4c:	6a23      	ldr	r3, [r4, #32]
 8001c4e:	f023 0304 	bic.w	r3, r3, #4
 8001c52:	e7b6      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7ff fd82 	bl	800175c <HAL_GetTick>
 8001c58:	1b80      	subs	r0, r0, r6
 8001c5a:	4540      	cmp	r0, r8
 8001c5c:	d9b7      	bls.n	8001bce <HAL_RCC_OscConfig+0x1e2>
 8001c5e:	e706      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
 8001c60:	40021000 	.word	0x40021000
 8001c64:	42420000 	.word	0x42420000
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c70:	4c2a      	ldr	r4, [pc, #168]	@ (8001d1c <HAL_RCC_OscConfig+0x330>)
 8001c72:	6862      	ldr	r2, [r4, #4]
 8001c74:	f002 020c 	and.w	r2, r2, #12
 8001c78:	2a08      	cmp	r2, #8
 8001c7a:	d03e      	beq.n	8001cfa <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8001c82:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c84:	d12c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001c86:	f7ff fd69 	bl	800175c <HAL_GetTick>
 8001c8a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	0199      	lsls	r1, r3, #6
 8001c90:	d420      	bmi.n	8001cd4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c92:	6a2b      	ldr	r3, [r5, #32]
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c98:	d105      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c9a:	6862      	ldr	r2, [r4, #4]
 8001c9c:	68a9      	ldr	r1, [r5, #8]
 8001c9e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001ca8:	6862      	ldr	r2, [r4, #4]
 8001caa:	430b      	orrs	r3, r1
 8001cac:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001cb0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001cb2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <HAL_RCC_OscConfig+0x334>)
 8001cb8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001cba:	f7ff fd4f 	bl	800175c <HAL_GetTick>
 8001cbe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	019a      	lsls	r2, r3, #6
 8001cc4:	f53f aea8 	bmi.w	8001a18 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff fd48 	bl	800175c <HAL_GetTick>
 8001ccc:	1b40      	subs	r0, r0, r5
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	d9f6      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x2d4>
 8001cd2:	e6cc      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff fd42 	bl	800175c <HAL_GetTick>
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	d9d6      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2a0>
 8001cde:	e6c6      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fd3c 	bl	800175c <HAL_GetTick>
 8001ce4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	f57f ae95 	bpl.w	8001a18 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff fd35 	bl	800175c <HAL_GetTick>
 8001cf2:	1b40      	subs	r0, r0, r5
 8001cf4:	2802      	cmp	r0, #2
 8001cf6:	d9f6      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x2fa>
 8001cf8:	e6b9      	b.n	8001a6e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	f43f aea2 	beq.w	8001a44 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001d00:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	6a2b      	ldr	r3, [r5, #32]
 8001d04:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f47f ae9b 	bne.w	8001a44 <HAL_RCC_OscConfig+0x58>
 8001d0e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d10:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d14:	1ac0      	subs	r0, r0, r3
 8001d16:	bf18      	it	ne
 8001d18:	2001      	movne	r0, #1
 8001d1a:	e6a9      	b.n	8001a70 <HAL_RCC_OscConfig+0x84>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	42420000 	.word	0x42420000

08001d24 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x38>)
 8001d26:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d28:	f003 010c 	and.w	r1, r3, #12
 8001d2c:	2908      	cmp	r1, #8
 8001d2e:	d112      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d30:	480b      	ldr	r0, [pc, #44]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d32:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d36:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d38:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d3a:	d509      	bpl.n	8001d50 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d3c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d3e:	4a09      	ldr	r2, [pc, #36]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d40:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d44:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d46:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x44>)
 8001d48:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d4e:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x48>)
 8001d52:	4358      	muls	r0, r3
 8001d54:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001d56:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08005dde 	.word	0x08005dde
 8001d64:	007a1200 	.word	0x007a1200
 8001d68:	08005ddc 	.word	0x08005ddc
 8001d6c:	003d0900 	.word	0x003d0900

08001d70 <HAL_RCC_ClockConfig>:
{
 8001d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d74:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001d76:	4604      	mov	r4, r0
 8001d78:	b910      	cbnz	r0, 8001d80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d7a:	2001      	movs	r0, #1
}
 8001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4a44      	ldr	r2, [pc, #272]	@ (8001e94 <HAL_RCC_ClockConfig+0x124>)
 8001d82:	6813      	ldr	r3, [r2, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	d328      	bcc.n	8001dde <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	6821      	ldr	r1, [r4, #0]
 8001d8e:	078e      	lsls	r6, r1, #30
 8001d90:	d430      	bmi.n	8001df4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	07ca      	lsls	r2, r1, #31
 8001d94:	d443      	bmi.n	8001e1e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d96:	4a3f      	ldr	r2, [pc, #252]	@ (8001e94 <HAL_RCC_ClockConfig+0x124>)
 8001d98:	6813      	ldr	r3, [r2, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	42ab      	cmp	r3, r5
 8001da0:	d865      	bhi.n	8001e6e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da2:	6822      	ldr	r2, [r4, #0]
 8001da4:	4d3c      	ldr	r5, [pc, #240]	@ (8001e98 <HAL_RCC_ClockConfig+0x128>)
 8001da6:	f012 0f04 	tst.w	r2, #4
 8001daa:	d16c      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dac:	0713      	lsls	r3, r2, #28
 8001dae:	d506      	bpl.n	8001dbe <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001db0:	686b      	ldr	r3, [r5, #4]
 8001db2:	6922      	ldr	r2, [r4, #16]
 8001db4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001db8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dbc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dbe:	f7ff ffb1 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001dc2:	686b      	ldr	r3, [r5, #4]
 8001dc4:	4a35      	ldr	r2, [pc, #212]	@ (8001e9c <HAL_RCC_ClockConfig+0x12c>)
 8001dc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	40d8      	lsrs	r0, r3
 8001dce:	4b34      	ldr	r3, [pc, #208]	@ (8001ea0 <HAL_RCC_ClockConfig+0x130>)
 8001dd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001dd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ea4 <HAL_RCC_ClockConfig+0x134>)
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	f7ff fc7f 	bl	80016d8 <HAL_InitTick>
  return HAL_OK;
 8001dda:	2000      	movs	r0, #0
 8001ddc:	e7ce      	b.n	8001d7c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	6813      	ldr	r3, [r2, #0]
 8001de0:	f023 0307 	bic.w	r3, r3, #7
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de8:	6813      	ldr	r3, [r2, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	428b      	cmp	r3, r1
 8001df0:	d1c3      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xa>
 8001df2:	e7cb      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	4b28      	ldr	r3, [pc, #160]	@ (8001e98 <HAL_RCC_ClockConfig+0x128>)
 8001df6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dfa:	bf1e      	ittt	ne
 8001dfc:	685a      	ldrne	r2, [r3, #4]
 8001dfe:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001e02:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e04:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e06:	bf42      	ittt	mi
 8001e08:	685a      	ldrmi	r2, [r3, #4]
 8001e0a:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001e0e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	68a0      	ldr	r0, [r4, #8]
 8001e14:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001e18:	4302      	orrs	r2, r0
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	e7b9      	b.n	8001d92 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	6862      	ldr	r2, [r4, #4]
 8001e20:	4e1d      	ldr	r6, [pc, #116]	@ (8001e98 <HAL_RCC_ClockConfig+0x128>)
 8001e22:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e24:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	d11a      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e28:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	d0a5      	beq.n	8001d7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e30:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e34:	f023 0303 	bic.w	r3, r3, #3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e3c:	f7ff fc8e 	bl	800175c <HAL_GetTick>
 8001e40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	6873      	ldr	r3, [r6, #4]
 8001e44:	6862      	ldr	r2, [r4, #4]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e4e:	d0a2      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff fc84 	bl	800175c <HAL_GetTick>
 8001e54:	1bc0      	subs	r0, r0, r7
 8001e56:	4540      	cmp	r0, r8
 8001e58:	d9f3      	bls.n	8001e42 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	e78e      	b.n	8001d7c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5e:	2a02      	cmp	r2, #2
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001e66:	e7e1      	b.n	8001e2c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	f013 0f02 	tst.w	r3, #2
 8001e6c:	e7de      	b.n	8001e2c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	6813      	ldr	r3, [r2, #0]
 8001e70:	f023 0307 	bic.w	r3, r3, #7
 8001e74:	432b      	orrs	r3, r5
 8001e76:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	42ab      	cmp	r3, r5
 8001e80:	f47f af7b 	bne.w	8001d7a <HAL_RCC_ClockConfig+0xa>
 8001e84:	e78d      	b.n	8001da2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e86:	686b      	ldr	r3, [r5, #4]
 8001e88:	68e1      	ldr	r1, [r4, #12]
 8001e8a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	606b      	str	r3, [r5, #4]
 8001e92:	e78b      	b.n	8001dac <HAL_RCC_ClockConfig+0x3c>
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08005dcc 	.word	0x08005dcc
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_RCC_GetHCLKFreq>:
}
 8001ea8:	4b01      	ldr	r3, [pc, #4]	@ (8001eb0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001eb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ecc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	4a03      	ldr	r2, [pc, #12]	@ (8001ed0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ec2:	6810      	ldr	r0, [r2, #0]
}
 8001ec4:	40d8      	lsrs	r0, r3
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08005dc4 	.word	0x08005dc4
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ed6:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	4a03      	ldr	r2, [pc, #12]	@ (8001ef0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ee2:	6810      	ldr	r0, [r2, #0]
}
 8001ee4:	40d8      	lsrs	r0, r3
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08005dc4 	.word	0x08005dc4
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef8:	461f      	mov	r7, r3
 8001efa:	4689      	mov	r9, r1
 8001efc:	4690      	mov	r8, r2
 8001efe:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f00:	f7ff fc2c 	bl	800175c <HAL_GetTick>
 8001f04:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8001f06:	443d      	add	r5, r7
 8001f08:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001f0a:	f7ff fc27 	bl	800175c <HAL_GetTick>
 8001f0e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f10:	4b25      	ldr	r3, [pc, #148]	@ (8001fa8 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8001f12:	681e      	ldr	r6, [r3, #0]
 8001f14:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8001f18:	436e      	muls	r6, r5
 8001f1a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f1c:	6822      	ldr	r2, [r4, #0]
 8001f1e:	6893      	ldr	r3, [r2, #8]
 8001f20:	ea39 0303 	bics.w	r3, r9, r3
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	4543      	cmp	r3, r8
 8001f2c:	d101      	bne.n	8001f32 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8001f2e:	2000      	movs	r0, #0
 8001f30:	e02e      	b.n	8001f90 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8001f32:	1c7b      	adds	r3, r7, #1
 8001f34:	d0f3      	beq.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f36:	f7ff fc11 	bl	800175c <HAL_GetTick>
 8001f3a:	eba0 000a 	sub.w	r0, r0, sl
 8001f3e:	42a8      	cmp	r0, r5
 8001f40:	d329      	bcc.n	8001f96 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001f4a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f4c:	6862      	ldr	r2, [r4, #4]
 8001f4e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8001f52:	d10a      	bne.n	8001f6a <SPI_WaitFlagStateUntilTimeout+0x76>
 8001f54:	68a2      	ldr	r2, [r4, #8]
 8001f56:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8001f5a:	d002      	beq.n	8001f62 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f5c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8001f60:	d103      	bne.n	8001f6a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f68:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f6a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001f6c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001f70:	d107      	bne.n	8001f82 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f80:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001f88:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001f8a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8001f8c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8001f90:	b002      	add	sp, #8
 8001f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8001f96:	9a01      	ldr	r2, [sp, #4]
      count--;
 8001f98:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8001f9a:	2a00      	cmp	r2, #0
      count--;
 8001f9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001fa0:	bf08      	it	eq
 8001fa2:	4615      	moveq	r5, r2
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	e7b9      	b.n	8001f1c <SPI_WaitFlagStateUntilTimeout+0x28>
 8001fa8:	20000000 	.word	0x20000000

08001fac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001fae:	460b      	mov	r3, r1
 8001fb0:	9200      	str	r2, [sp, #0]
{
 8001fb2:	460d      	mov	r5, r1
 8001fb4:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	2201      	movs	r2, #1
{
 8001fba:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001fbc:	f7ff ff9a 	bl	8001ef4 <SPI_WaitFlagStateUntilTimeout>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	b128      	cbz	r0, 8001fd0 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001fc6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc8:	f043 0320 	orr.w	r3, r3, #32
 8001fcc:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001fce:	e007      	b.n	8001fe0 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	2180      	movs	r1, #128	@ 0x80
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	9600      	str	r6, [sp, #0]
 8001fd8:	f7ff ff8c 	bl	8001ef4 <SPI_WaitFlagStateUntilTimeout>
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	d1f1      	bne.n	8001fc4 <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}

08001fe4 <SPI_EndRxTransaction>:
{
 8001fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fe6:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe8:	6841      	ldr	r1, [r0, #4]
{
 8001fea:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fec:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8001ff0:	d118      	bne.n	8002024 <SPI_EndRxTransaction+0x40>
 8001ff2:	6881      	ldr	r1, [r0, #8]
 8001ff4:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8001ff8:	d002      	beq.n	8002000 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ffa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8001ffe:	d111      	bne.n	8002024 <SPI_EndRxTransaction+0x40>
    __HAL_SPI_DISABLE(hspi);
 8002000:	6825      	ldr	r5, [r4, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002002:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 8002006:	6828      	ldr	r0, [r5, #0]
 8002008:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800200c:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800200e:	d109      	bne.n	8002024 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002010:	9200      	str	r2, [sp, #0]
 8002012:	2101      	movs	r1, #1
 8002014:	2200      	movs	r2, #0
 8002016:	4620      	mov	r0, r4
 8002018:	f7ff ff6c 	bl	8001ef4 <SPI_WaitFlagStateUntilTimeout>
 800201c:	b930      	cbnz	r0, 800202c <SPI_EndRxTransaction+0x48>
  return HAL_OK;
 800201e:	2000      	movs	r0, #0
}
 8002020:	b003      	add	sp, #12
 8002022:	bd30      	pop	{r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002024:	9200      	str	r2, [sp, #0]
 8002026:	2180      	movs	r1, #128	@ 0x80
 8002028:	2200      	movs	r2, #0
 800202a:	e7f4      	b.n	8002016 <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800202c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 800202e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002030:	f043 0320 	orr.w	r3, r3, #32
 8002034:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002036:	e7f3      	b.n	8002020 <SPI_EndRxTransaction+0x3c>

08002038 <HAL_SPI_Init>:
{
 8002038:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800203a:	4604      	mov	r4, r0
 800203c:	2800      	cmp	r0, #0
 800203e:	d051      	beq.n	80020e4 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002040:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002042:	2b00      	cmp	r3, #0
 8002044:	d14a      	bne.n	80020dc <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002046:	6842      	ldr	r2, [r0, #4]
 8002048:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800204c:	d000      	beq.n	8002050 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800204e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002054:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002058:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800205c:	b923      	cbnz	r3, 8002068 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800205e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002060:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002064:	f7ff fa08 	bl	8001478 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002068:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800206a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800206c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8002070:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002072:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002078:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800207a:	6863      	ldr	r3, [r4, #4]
 800207c:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8002080:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002084:	4303      	orrs	r3, r0
 8002086:	68e0      	ldr	r0, [r4, #12]
 8002088:	69a1      	ldr	r1, [r4, #24]
 800208a:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800208e:	4303      	orrs	r3, r0
 8002090:	6920      	ldr	r0, [r4, #16]
 8002092:	f000 0002 	and.w	r0, r0, #2
 8002096:	4303      	orrs	r3, r0
 8002098:	6960      	ldr	r0, [r4, #20]
 800209a:	f000 0001 	and.w	r0, r0, #1
 800209e:	4303      	orrs	r3, r0
 80020a0:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 80020a4:	4303      	orrs	r3, r0
 80020a6:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020a8:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020aa:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80020ae:	4303      	orrs	r3, r0
 80020b0:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020b2:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020b6:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80020ba:	4303      	orrs	r3, r0
 80020bc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80020be:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80020c2:	4303      	orrs	r3, r0
 80020c4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020c6:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020c8:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ca:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80020d0:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80020d2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020d4:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020d6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80020da:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020dc:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020e2:	e7b5      	b.n	8002050 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80020e4:	2001      	movs	r0, #1
 80020e6:	e7f8      	b.n	80020da <HAL_SPI_Init+0xa2>

080020e8 <HAL_SPI_Transmit>:
{
 80020e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80020ec:	4604      	mov	r4, r0
 80020ee:	461f      	mov	r7, r3
 80020f0:	460d      	mov	r5, r1
 80020f2:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80020f4:	f7ff fb32 	bl	800175c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80020f8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 80020fc:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80020fe:	2b01      	cmp	r3, #1
 8002100:	b2d8      	uxtb	r0, r3
 8002102:	f040 809f 	bne.w	8002244 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8002106:	2d00      	cmp	r5, #0
 8002108:	d074      	beq.n	80021f4 <HAL_SPI_Transmit+0x10c>
 800210a:	f1b8 0f00 	cmp.w	r8, #0
 800210e:	d071      	beq.n	80021f4 <HAL_SPI_Transmit+0x10c>
  __HAL_LOCK(hspi);
 8002110:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002114:	2b01      	cmp	r3, #1
 8002116:	f000 8095 	beq.w	8002244 <HAL_SPI_Transmit+0x15c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800211a:	2303      	movs	r3, #3
 800211c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002120:	2300      	movs	r3, #0
 8002122:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8002124:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8002128:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800212c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800212e:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002130:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002132:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8002134:	6826      	ldr	r6, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  __HAL_LOCK(hspi);
 800213a:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800213e:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002140:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002144:	d107      	bne.n	8002156 <HAL_SPI_Transmit+0x6e>
    __HAL_SPI_DISABLE(hspi);
 8002146:	6833      	ldr	r3, [r6, #0]
 8002148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800214c:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800214e:	6833      	ldr	r3, [r6, #0]
 8002150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002154:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002156:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002158:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800215a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800215c:	bf5e      	ittt	pl
 800215e:	6833      	ldrpl	r3, [r6, #0]
 8002160:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8002164:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002166:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800216a:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800216c:	d145      	bne.n	80021fa <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800216e:	b113      	cbz	r3, 8002176 <HAL_SPI_Transmit+0x8e>
 8002170:	f1b8 0f01 	cmp.w	r8, #1
 8002174:	d107      	bne.n	8002186 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002176:	f835 3b02 	ldrh.w	r3, [r5], #2
 800217a:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800217c:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800217e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002180:	3b01      	subs	r3, #1
 8002182:	b29b      	uxth	r3, r3
 8002184:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8002186:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002188:	b29b      	uxth	r3, r3
 800218a:	b9d3      	cbnz	r3, 80021c2 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800218c:	464a      	mov	r2, r9
 800218e:	4639      	mov	r1, r7
 8002190:	4620      	mov	r0, r4
 8002192:	f7ff ff0b 	bl	8001fac <SPI_EndRxTxTransaction>
 8002196:	2800      	cmp	r0, #0
 8002198:	d151      	bne.n	800223e <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800219a:	68a3      	ldr	r3, [r4, #8]
 800219c:	b933      	cbnz	r3, 80021ac <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	9201      	str	r2, [sp, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80021b2:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021b4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 80021b6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ba:	1ac0      	subs	r0, r0, r3
 80021bc:	bf18      	it	ne
 80021be:	2001      	movne	r0, #1
 80021c0:	e018      	b.n	80021f4 <HAL_SPI_Transmit+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021c2:	6822      	ldr	r2, [r4, #0]
 80021c4:	6893      	ldr	r3, [r2, #8]
 80021c6:	0798      	lsls	r0, r3, #30
 80021c8:	d505      	bpl.n	80021d6 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80021cc:	f833 1b02 	ldrh.w	r1, [r3], #2
 80021d0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80021d4:	e7d3      	b.n	800217e <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021d6:	f7ff fac1 	bl	800175c <HAL_GetTick>
 80021da:	eba0 0009 	sub.w	r0, r0, r9
 80021de:	42b8      	cmp	r0, r7
 80021e0:	d3d1      	bcc.n	8002186 <HAL_SPI_Transmit+0x9e>
 80021e2:	1c79      	adds	r1, r7, #1
 80021e4:	d0cf      	beq.n	8002186 <HAL_SPI_Transmit+0x9e>
          hspi->State = HAL_SPI_STATE_READY;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021ec:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80021ee:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 80021f0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80021f4:	b003      	add	sp, #12
 80021f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021fa:	b113      	cbz	r3, 8002202 <HAL_SPI_Transmit+0x11a>
 80021fc:	f1b8 0f01 	cmp.w	r8, #1
 8002200:	d108      	bne.n	8002214 <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002202:	782b      	ldrb	r3, [r5, #0]
 8002204:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002206:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002208:	3301      	adds	r3, #1
 800220a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800220c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800220e:	3b01      	subs	r3, #1
 8002210:	b29b      	uxth	r3, r3
 8002212:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8002214:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0b7      	beq.n	800218c <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	0792      	lsls	r2, r2, #30
 8002222:	d503      	bpl.n	800222c <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002224:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	731a      	strb	r2, [r3, #12]
 800222a:	e7ec      	b.n	8002206 <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800222c:	f7ff fa96 	bl	800175c <HAL_GetTick>
 8002230:	eba0 0009 	sub.w	r0, r0, r9
 8002234:	42b8      	cmp	r0, r7
 8002236:	d3ed      	bcc.n	8002214 <HAL_SPI_Transmit+0x12c>
 8002238:	1c7b      	adds	r3, r7, #1
 800223a:	d0eb      	beq.n	8002214 <HAL_SPI_Transmit+0x12c>
 800223c:	e7d3      	b.n	80021e6 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800223e:	2320      	movs	r3, #32
 8002240:	6563      	str	r3, [r4, #84]	@ 0x54
 8002242:	e7aa      	b.n	800219a <HAL_SPI_Transmit+0xb2>
    return HAL_BUSY;
 8002244:	2002      	movs	r0, #2
 8002246:	e7d5      	b.n	80021f4 <HAL_SPI_Transmit+0x10c>

08002248 <HAL_SPI_TransmitReceive>:
{
 8002248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800224c:	4604      	mov	r4, r0
 800224e:	460d      	mov	r5, r1
 8002250:	4691      	mov	r9, r2
 8002252:	461e      	mov	r6, r3
 8002254:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8002258:	f7ff fa80 	bl	800175c <HAL_GetTick>
  tmp_state           = hspi->State;
 800225c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8002260:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002262:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8002264:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8002266:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002268:	d00a      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x38>
 800226a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800226e:	f040 80e5 	bne.w	800243c <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002272:	68a3      	ldr	r3, [r4, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 80e1 	bne.w	800243c <HAL_SPI_TransmitReceive+0x1f4>
 800227a:	2904      	cmp	r1, #4
 800227c:	f040 80de 	bne.w	800243c <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002280:	2d00      	cmp	r5, #0
 8002282:	d04b      	beq.n	800231c <HAL_SPI_TransmitReceive+0xd4>
 8002284:	f1b9 0f00 	cmp.w	r9, #0
 8002288:	d048      	beq.n	800231c <HAL_SPI_TransmitReceive+0xd4>
 800228a:	2e00      	cmp	r6, #0
 800228c:	d046      	beq.n	800231c <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 800228e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002292:	2b01      	cmp	r3, #1
 8002294:	f000 80d2 	beq.w	800243c <HAL_SPI_TransmitReceive+0x1f4>
 8002298:	2301      	movs	r3, #1
 800229a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800229e:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022a2:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022a6:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022a8:	bf1c      	itt	ne
 80022aa:	2305      	movne	r3, #5
 80022ac:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 80022b4:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b8:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80022ba:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 80022bc:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022be:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80022c0:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022c2:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80022c4:	bf58      	it	pl
 80022c6:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80022c8:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 80022ca:	bf58      	it	pl
 80022cc:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 80022d0:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 80022d2:	bf58      	it	pl
 80022d4:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022d6:	68e1      	ldr	r1, [r4, #12]
 80022d8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80022dc:	d155      	bne.n	800238a <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022de:	b10a      	cbz	r2, 80022e4 <HAL_SPI_TransmitReceive+0x9c>
 80022e0:	2e01      	cmp	r6, #1
 80022e2:	d107      	bne.n	80022f4 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022e4:	f835 2b02 	ldrh.w	r2, [r5], #2
 80022e8:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80022ea:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ec:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80022f4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022f6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	b98b      	cbnz	r3, 8002320 <HAL_SPI_TransmitReceive+0xd8>
 80022fc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80022fe:	b29b      	uxth	r3, r3
 8002300:	b973      	cbnz	r3, 8002320 <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002302:	463a      	mov	r2, r7
 8002304:	4641      	mov	r1, r8
 8002306:	4620      	mov	r0, r4
 8002308:	f7ff fe50 	bl	8001fac <SPI_EndRxTxTransaction>
 800230c:	2800      	cmp	r0, #0
 800230e:	f000 8081 	beq.w	8002414 <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002312:	2320      	movs	r3, #32
 8002314:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002316:	2300      	movs	r3, #0
 8002318:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800231c:	2001      	movs	r0, #1
 800231e:	e031      	b.n	8002384 <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002320:	6821      	ldr	r1, [r4, #0]
 8002322:	688b      	ldr	r3, [r1, #8]
 8002324:	079a      	lsls	r2, r3, #30
 8002326:	d50d      	bpl.n	8002344 <HAL_SPI_TransmitReceive+0xfc>
 8002328:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800232a:	b29b      	uxth	r3, r3
 800232c:	b153      	cbz	r3, 8002344 <HAL_SPI_TransmitReceive+0xfc>
 800232e:	b145      	cbz	r5, 8002342 <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002330:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002332:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002336:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002338:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800233a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800233c:	3b01      	subs	r3, #1
 800233e:	b29b      	uxth	r3, r3
 8002340:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8002342:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002344:	688a      	ldr	r2, [r1, #8]
 8002346:	f012 0201 	ands.w	r2, r2, #1
 800234a:	d00c      	beq.n	8002366 <HAL_SPI_TransmitReceive+0x11e>
 800234c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800234e:	b29b      	uxth	r3, r3
 8002350:	b14b      	cbz	r3, 8002366 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8002352:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002354:	68c9      	ldr	r1, [r1, #12]
 8002356:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002358:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800235c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800235e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002360:	3b01      	subs	r3, #1
 8002362:	b29b      	uxth	r3, r3
 8002364:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002366:	f7ff f9f9 	bl	800175c <HAL_GetTick>
 800236a:	1bc0      	subs	r0, r0, r7
 800236c:	4540      	cmp	r0, r8
 800236e:	d3c2      	bcc.n	80022f6 <HAL_SPI_TransmitReceive+0xae>
 8002370:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002374:	d0bf      	beq.n	80022f6 <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 8002376:	2301      	movs	r3, #1
 8002378:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800237c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800237e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002380:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8002384:	b003      	add	sp, #12
 8002386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800238a:	b10a      	cbz	r2, 8002390 <HAL_SPI_TransmitReceive+0x148>
 800238c:	2e01      	cmp	r6, #1
 800238e:	d108      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002390:	782a      	ldrb	r2, [r5, #0]
 8002392:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002394:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002396:	3301      	adds	r3, #1
 8002398:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800239a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800239c:	3b01      	subs	r3, #1
 800239e:	b29b      	uxth	r3, r3
 80023a0:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80023a2:	2501      	movs	r5, #1
 80023a4:	e02d      	b.n	8002402 <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023a6:	6822      	ldr	r2, [r4, #0]
 80023a8:	6893      	ldr	r3, [r2, #8]
 80023aa:	079b      	lsls	r3, r3, #30
 80023ac:	d50e      	bpl.n	80023cc <HAL_SPI_TransmitReceive+0x184>
 80023ae:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b15b      	cbz	r3, 80023cc <HAL_SPI_TransmitReceive+0x184>
 80023b4:	b14d      	cbz	r5, 80023ca <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80023b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80023bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023be:	3301      	adds	r3, #1
 80023c0:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80023c2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80023ca:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023cc:	6822      	ldr	r2, [r4, #0]
 80023ce:	6891      	ldr	r1, [r2, #8]
 80023d0:	f011 0101 	ands.w	r1, r1, #1
 80023d4:	d00d      	beq.n	80023f2 <HAL_SPI_TransmitReceive+0x1aa>
 80023d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b153      	cbz	r3, 80023f2 <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 80023dc:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023de:	68d2      	ldr	r2, [r2, #12]
 80023e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80023e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80023e6:	3301      	adds	r3, #1
 80023e8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80023ea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023f2:	f7ff f9b3 	bl	800175c <HAL_GetTick>
 80023f6:	1bc0      	subs	r0, r0, r7
 80023f8:	4540      	cmp	r0, r8
 80023fa:	d302      	bcc.n	8002402 <HAL_SPI_TransmitReceive+0x1ba>
 80023fc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002400:	d1b9      	bne.n	8002376 <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002402:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1cd      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x15e>
 800240a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1c9      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x15e>
 8002412:	e776      	b.n	8002302 <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002414:	68a3      	ldr	r3, [r4, #8]
 8002416:	b933      	cbnz	r3, 8002426 <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	9201      	str	r2, [sp, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002426:	2301      	movs	r3, #1
 8002428:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800242c:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800242e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8002430:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002434:	1ac0      	subs	r0, r0, r3
 8002436:	bf18      	it	ne
 8002438:	2001      	movne	r0, #1
 800243a:	e7a3      	b.n	8002384 <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 800243c:	2002      	movs	r0, #2
 800243e:	e7a1      	b.n	8002384 <HAL_SPI_TransmitReceive+0x13c>

08002440 <HAL_SPI_Receive>:
{
 8002440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002444:	461e      	mov	r6, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8002446:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
{
 800244a:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800244c:	2b01      	cmp	r3, #1
{
 800244e:	4689      	mov	r9, r1
 8002450:	4617      	mov	r7, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8002452:	b2dd      	uxtb	r5, r3
 8002454:	d004      	beq.n	8002460 <HAL_SPI_Receive+0x20>
    return HAL_BUSY;
 8002456:	2502      	movs	r5, #2
}
 8002458:	4628      	mov	r0, r5
 800245a:	b003      	add	sp, #12
 800245c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002460:	6843      	ldr	r3, [r0, #4]
 8002462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002466:	d10b      	bne.n	8002480 <HAL_SPI_Receive+0x40>
 8002468:	6883      	ldr	r3, [r0, #8]
 800246a:	b94b      	cbnz	r3, 8002480 <HAL_SPI_Receive+0x40>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800246c:	2304      	movs	r3, #4
 800246e:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002472:	4613      	mov	r3, r2
 8002474:	9600      	str	r6, [sp, #0]
 8002476:	460a      	mov	r2, r1
 8002478:	f7ff fee6 	bl	8002248 <HAL_SPI_TransmitReceive>
 800247c:	4605      	mov	r5, r0
 800247e:	e7eb      	b.n	8002458 <HAL_SPI_Receive+0x18>
  tickstart = HAL_GetTick();
 8002480:	f7ff f96c 	bl	800175c <HAL_GetTick>
 8002484:	4680      	mov	r8, r0
  if ((pData == NULL) || (Size == 0U))
 8002486:	f1b9 0f00 	cmp.w	r9, #0
 800248a:	d0e5      	beq.n	8002458 <HAL_SPI_Receive+0x18>
 800248c:	2f00      	cmp	r7, #0
 800248e:	d0e3      	beq.n	8002458 <HAL_SPI_Receive+0x18>
  __HAL_LOCK(hspi);
 8002490:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002494:	2b01      	cmp	r3, #1
 8002496:	d0de      	beq.n	8002456 <HAL_SPI_Receive+0x16>
 8002498:	2301      	movs	r3, #1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800249a:	2500      	movs	r5, #0
  __HAL_LOCK(hspi);
 800249c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024a0:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a2:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024a4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ac:	6565      	str	r5, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 80024ae:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80024b2:	87e7      	strh	r7, [r4, #62]	@ 0x3e
    __HAL_SPI_DISABLE(hspi);
 80024b4:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024b6:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80024ba:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024bc:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80024be:	86a5      	strh	r5, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80024c0:	86e5      	strh	r5, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024c2:	d107      	bne.n	80024d4 <HAL_SPI_Receive+0x94>
    __HAL_SPI_DISABLE(hspi);
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024d2:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	0655      	lsls	r5, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80024d8:	bf5e      	ittt	pl
 80024da:	681a      	ldrpl	r2, [r3, #0]
 80024dc:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80024e0:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024e2:	68e3      	ldr	r3, [r4, #12]
 80024e4:	b1f3      	cbz	r3, 8002524 <HAL_SPI_Receive+0xe4>
    while (hspi->RxXferCount > 0U)
 80024e6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	b1fb      	cbz	r3, 800252c <HAL_SPI_Receive+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	07d2      	lsls	r2, r2, #31
 80024f2:	d53c      	bpl.n	800256e <HAL_SPI_Receive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024f8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024fc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80024fe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002500:	3b01      	subs	r3, #1
 8002502:	b29b      	uxth	r3, r3
 8002504:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8002506:	e7ee      	b.n	80024e6 <HAL_SPI_Receive+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	07d0      	lsls	r0, r2, #31
 800250e:	d51e      	bpl.n	800254e <HAL_SPI_Receive+0x10e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002510:	7b1b      	ldrb	r3, [r3, #12]
 8002512:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002514:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002516:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002518:	3301      	adds	r3, #1
 800251a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800251c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800251e:	3b01      	subs	r3, #1
 8002520:	b29b      	uxth	r3, r3
 8002522:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8002524:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ed      	bne.n	8002508 <HAL_SPI_Receive+0xc8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800252c:	4642      	mov	r2, r8
 800252e:	4631      	mov	r1, r6
 8002530:	4620      	mov	r0, r4
 8002532:	f7ff fd57 	bl	8001fe4 <SPI_EndRxTransaction>
 8002536:	bb18      	cbnz	r0, 8002580 <HAL_SPI_Receive+0x140>
  hspi->State = HAL_SPI_STATE_READY;
 8002538:	2301      	movs	r3, #1
 800253a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800253e:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002540:	6d65      	ldr	r5, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8002542:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002546:	1aed      	subs	r5, r5, r3
 8002548:	bf18      	it	ne
 800254a:	2501      	movne	r5, #1
 800254c:	e784      	b.n	8002458 <HAL_SPI_Receive+0x18>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800254e:	f7ff f905 	bl	800175c <HAL_GetTick>
 8002552:	eba0 0008 	sub.w	r0, r0, r8
 8002556:	42b0      	cmp	r0, r6
 8002558:	d3e4      	bcc.n	8002524 <HAL_SPI_Receive+0xe4>
 800255a:	1c71      	adds	r1, r6, #1
 800255c:	d0e2      	beq.n	8002524 <HAL_SPI_Receive+0xe4>
          hspi->State = HAL_SPI_STATE_READY;
 800255e:	2301      	movs	r3, #1
 8002560:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002564:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002566:	2503      	movs	r5, #3
          __HAL_UNLOCK(hspi);
 8002568:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800256c:	e774      	b.n	8002458 <HAL_SPI_Receive+0x18>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800256e:	f7ff f8f5 	bl	800175c <HAL_GetTick>
 8002572:	eba0 0008 	sub.w	r0, r0, r8
 8002576:	42b0      	cmp	r0, r6
 8002578:	d3b5      	bcc.n	80024e6 <HAL_SPI_Receive+0xa6>
 800257a:	1c73      	adds	r3, r6, #1
 800257c:	d0b3      	beq.n	80024e6 <HAL_SPI_Receive+0xa6>
 800257e:	e7ee      	b.n	800255e <HAL_SPI_Receive+0x11e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002580:	2320      	movs	r3, #32
 8002582:	6563      	str	r3, [r4, #84]	@ 0x54
 8002584:	e7d8      	b.n	8002538 <HAL_SPI_Receive+0xf8>

08002586 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002586:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002588:	f102 030c 	add.w	r3, r2, #12
 800258c:	e853 3f00 	ldrex	r3, [r3]
 8002590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002594:	320c      	adds	r2, #12
 8002596:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800259a:	6802      	ldr	r2, [r0, #0]
 800259c:	2900      	cmp	r1, #0
 800259e:	d1f2      	bne.n	8002586 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a0:	f102 0314 	add.w	r3, r2, #20
 80025a4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ac:	f102 0c14 	add.w	ip, r2, #20
 80025b0:	e84c 3100 	strex	r1, r3, [ip]
 80025b4:	2900      	cmp	r1, #0
 80025b6:	d1f3      	bne.n	80025a0 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10b      	bne.n	80025d6 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025be:	f102 030c 	add.w	r3, r2, #12
 80025c2:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025c6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ca:	f102 0c0c 	add.w	ip, r2, #12
 80025ce:	e84c 3100 	strex	r1, r3, [ip]
 80025d2:	2900      	cmp	r1, #0
 80025d4:	d1f3      	bne.n	80025be <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025d6:	2320      	movs	r3, #32
 80025d8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025dc:	2300      	movs	r3, #0
 80025de:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80025e0:	4770      	bx	lr
	...

080025e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e4:	b510      	push	{r4, lr}
 80025e6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e8:	6803      	ldr	r3, [r0, #0]
 80025ea:	68c1      	ldr	r1, [r0, #12]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80025f2:	430a      	orrs	r2, r1
 80025f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025f6:	6882      	ldr	r2, [r0, #8]
 80025f8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80025fa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025fc:	4302      	orrs	r2, r0
 80025fe:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002600:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8002604:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002608:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800260a:	430a      	orrs	r2, r1
 800260c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	69a1      	ldr	r1, [r4, #24]
 8002612:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002616:	430a      	orrs	r2, r1
 8002618:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800261a:	4a0e      	ldr	r2, [pc, #56]	@ (8002654 <UART_SetConfig+0x70>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d115      	bne.n	800264c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002620:	f7ff fc58 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002624:	2319      	movs	r3, #25
 8002626:	4343      	muls	r3, r0
 8002628:	6862      	ldr	r2, [r4, #4]
 800262a:	6820      	ldr	r0, [r4, #0]
 800262c:	0092      	lsls	r2, r2, #2
 800262e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002632:	2264      	movs	r2, #100	@ 0x64
 8002634:	fbb3 f1f2 	udiv	r1, r3, r2
 8002638:	fb02 3311 	mls	r3, r2, r1, r3
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	3332      	adds	r3, #50	@ 0x32
 8002640:	fbb3 f3f2 	udiv	r3, r3, r2
 8002644:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002648:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800264a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800264c:	f7ff fc32 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8002650:	e7e8      	b.n	8002624 <UART_SetConfig+0x40>
 8002652:	bf00      	nop
 8002654:	40013800 	.word	0x40013800

08002658 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800265a:	4605      	mov	r5, r0
 800265c:	460c      	mov	r4, r1
 800265e:	4617      	mov	r7, r2
 8002660:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002662:	682a      	ldr	r2, [r5, #0]
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	ea34 0303 	bics.w	r3, r4, r3
 800266a:	d101      	bne.n	8002670 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 800266c:	2000      	movs	r0, #0
 800266e:	e021      	b.n	80026b4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002670:	1c70      	adds	r0, r6, #1
 8002672:	d0f7      	beq.n	8002664 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002674:	f7ff f872 	bl	800175c <HAL_GetTick>
 8002678:	1bc0      	subs	r0, r0, r7
 800267a:	4286      	cmp	r6, r0
 800267c:	d31c      	bcc.n	80026b8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 800267e:	b1de      	cbz	r6, 80026b8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	0751      	lsls	r1, r2, #29
 8002686:	d5ec      	bpl.n	8002662 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8002688:	2c80      	cmp	r4, #128	@ 0x80
 800268a:	d0ea      	beq.n	8002662 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800268c:	2c40      	cmp	r4, #64	@ 0x40
 800268e:	d0e8      	beq.n	8002662 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	0712      	lsls	r2, r2, #28
 8002694:	d5e5      	bpl.n	8002662 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002696:	2400      	movs	r4, #0
 8002698:	9401      	str	r4, [sp, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 800269c:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 800269e:	9201      	str	r2, [sp, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80026a6:	f7ff ff6e 	bl	8002586 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026aa:	2308      	movs	r3, #8
          return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026ae:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80026b0:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 80026b4:	b003      	add	sp, #12
 80026b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80026b8:	2003      	movs	r0, #3
 80026ba:	e7fb      	b.n	80026b4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

080026bc <HAL_UART_Init>:
{
 80026bc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80026be:	4604      	mov	r4, r0
 80026c0:	b348      	cbz	r0, 8002716 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80026c2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80026c6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80026ca:	b91b      	cbnz	r3, 80026d4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80026cc:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80026d0:	f7fe ffa0 	bl	8001614 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80026d4:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80026d6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026d8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80026dc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80026de:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80026e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026e4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80026e6:	f7ff ff7d 	bl	80025e4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ea:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ec:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026fc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002704:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002706:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002708:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800270a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800270e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002712:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002714:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002716:	2001      	movs	r0, #1
 8002718:	e7fc      	b.n	8002714 <HAL_UART_Init+0x58>

0800271a <HAL_UART_Transmit>:
{
 800271a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800271e:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002720:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8002724:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002726:	2b20      	cmp	r3, #32
{
 8002728:	460e      	mov	r6, r1
 800272a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800272c:	d13f      	bne.n	80027ae <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 800272e:	2900      	cmp	r1, #0
 8002730:	d03f      	beq.n	80027b2 <HAL_UART_Transmit+0x98>
 8002732:	2a00      	cmp	r2, #0
 8002734:	d03d      	beq.n	80027b2 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002736:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002738:	2500      	movs	r5, #0
 800273a:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800273c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002740:	f7ff f80c 	bl	800175c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002744:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002746:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 800274c:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800274e:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002750:	d103      	bne.n	800275a <HAL_UART_Transmit+0x40>
 8002752:	6923      	ldr	r3, [r4, #16]
 8002754:	b90b      	cbnz	r3, 800275a <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 8002756:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002758:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800275a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800275c:	b29b      	uxth	r3, r3
 800275e:	b953      	cbnz	r3, 8002776 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002760:	4643      	mov	r3, r8
 8002762:	464a      	mov	r2, r9
 8002764:	2140      	movs	r1, #64	@ 0x40
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff ff76 	bl	8002658 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800276c:	2320      	movs	r3, #32
 800276e:	b950      	cbnz	r0, 8002786 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8002770:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002774:	e00a      	b.n	800278c <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002776:	4643      	mov	r3, r8
 8002778:	464a      	mov	r2, r9
 800277a:	2180      	movs	r1, #128	@ 0x80
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff ff6b 	bl	8002658 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002782:	b128      	cbz	r0, 8002790 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8002784:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8002786:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8002788:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800278c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002790:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002792:	b94e      	cbnz	r6, 80027a8 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002794:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002798:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800279c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800279e:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 80027a0:	3901      	subs	r1, #1
 80027a2:	b289      	uxth	r1, r1
 80027a4:	84e1      	strh	r1, [r4, #38]	@ 0x26
 80027a6:	e7d8      	b.n	800275a <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027a8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80027ac:	e7f6      	b.n	800279c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80027ae:	2002      	movs	r0, #2
 80027b0:	e7ec      	b.n	800278c <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80027b2:	2001      	movs	r0, #1
 80027b4:	e7ea      	b.n	800278c <HAL_UART_Transmit+0x72>

080027b6 <MAX31865_ReadRegister8>:
}

/**
 * @brief Read 8-bit register
 */
max31865_status_t MAX31865_ReadRegister8(MAX31865_Handle_t *hmax, uint8_t reg, uint8_t *data) {
 80027b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027b8:	4616      	mov	r6, r2
    if (hmax == NULL || data == NULL || hmax->platform.spi_write_read == NULL) {
 80027ba:	4604      	mov	r4, r0
 80027bc:	b330      	cbz	r0, 800280c <MAX31865_ReadRegister8+0x56>
 80027be:	b32a      	cbz	r2, 800280c <MAX31865_ReadRegister8+0x56>
 80027c0:	6803      	ldr	r3, [r0, #0]
 80027c2:	b31b      	cbz	r3, 800280c <MAX31865_ReadRegister8+0x56>
        return MAX31865_ERROR;
    }

    uint8_t tx_data = reg & 0x7F; // Clear MSB for read
    uint8_t rx_data[2] = {0, 0};
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8ad 3004 	strh.w	r3, [sp, #4]
    max31865_status_t status;

    if (hmax->platform.cs_low) {
 80027ca:	6843      	ldr	r3, [r0, #4]
    uint8_t tx_data = reg & 0x7F; // Clear MSB for read
 80027cc:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80027d0:	f88d 1003 	strb.w	r1, [sp, #3]
    if (hmax->platform.cs_low) {
 80027d4:	b103      	cbz	r3, 80027d8 <MAX31865_ReadRegister8+0x22>
    	hmax->platform.cs_low();
 80027d6:	4798      	blx	r3
    }

    if (hmax->platform.delay_ms) {
 80027d8:	68e3      	ldr	r3, [r4, #12]
 80027da:	b10b      	cbz	r3, 80027e0 <MAX31865_ReadRegister8+0x2a>
        hmax->platform.delay_ms(1);
 80027dc:	2001      	movs	r0, #1
 80027de:	4798      	blx	r3
    }

    /* Send register address and read data */
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, 2);
 80027e0:	2302      	movs	r3, #2
 80027e2:	6825      	ldr	r5, [r4, #0]
 80027e4:	4620      	mov	r0, r4
 80027e6:	aa01      	add	r2, sp, #4
 80027e8:	f10d 0103 	add.w	r1, sp, #3
 80027ec:	47a8      	blx	r5

    if (hmax->platform.delay_ms) {
 80027ee:	68e3      	ldr	r3, [r4, #12]
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, 2);
 80027f0:	4605      	mov	r5, r0
    if (hmax->platform.delay_ms) {
 80027f2:	b10b      	cbz	r3, 80027f8 <MAX31865_ReadRegister8+0x42>
        hmax->platform.delay_ms(1);
 80027f4:	2001      	movs	r0, #1
 80027f6:	4798      	blx	r3
    }

    if (hmax->platform.cs_high) {
 80027f8:	68a3      	ldr	r3, [r4, #8]
 80027fa:	b103      	cbz	r3, 80027fe <MAX31865_ReadRegister8+0x48>
    	hmax->platform.cs_high();
 80027fc:	4798      	blx	r3
    }

    if (status != MAX31865_OK) {
 80027fe:	b915      	cbnz	r5, 8002806 <MAX31865_ReadRegister8+0x50>
        return status;
    }

    *data = rx_data[1]; // Data comes in second byte
 8002800:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002804:	7033      	strb	r3, [r6, #0]
    return MAX31865_OK;
}
 8002806:	4628      	mov	r0, r5
 8002808:	b002      	add	sp, #8
 800280a:	bd70      	pop	{r4, r5, r6, pc}
        return MAX31865_ERROR;
 800280c:	2501      	movs	r5, #1
 800280e:	e7fa      	b.n	8002806 <MAX31865_ReadRegister8+0x50>

08002810 <MAX31865_ReadRegister16>:

/**
 * @brief Read 16-bit register
 */
max31865_status_t MAX31865_ReadRegister16(MAX31865_Handle_t *hmax, uint8_t reg, uint16_t *data) {
 8002810:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002812:	4616      	mov	r6, r2
    if (hmax == NULL || data == NULL || hmax->platform.spi_write_read == NULL) {
 8002814:	4604      	mov	r4, r0
 8002816:	b348      	cbz	r0, 800286c <MAX31865_ReadRegister16+0x5c>
 8002818:	b342      	cbz	r2, 800286c <MAX31865_ReadRegister16+0x5c>
 800281a:	6803      	ldr	r3, [r0, #0]
 800281c:	b333      	cbz	r3, 800286c <MAX31865_ReadRegister16+0x5c>
        return MAX31865_ERROR;
    }

    uint8_t tx_data = reg & 0x7F; // Clear MSB for read
    uint8_t rx_data[3] = {0, 0, 0};
 800281e:	2300      	movs	r3, #0
 8002820:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002824:	f88d 3006 	strb.w	r3, [sp, #6]
    max31865_status_t status;

    if (hmax->platform.cs_low) {
 8002828:	6843      	ldr	r3, [r0, #4]
    uint8_t tx_data = reg & 0x7F; // Clear MSB for read
 800282a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800282e:	f88d 1003 	strb.w	r1, [sp, #3]
    if (hmax->platform.cs_low) {
 8002832:	b103      	cbz	r3, 8002836 <MAX31865_ReadRegister16+0x26>
    	hmax->platform.cs_low();
 8002834:	4798      	blx	r3
    }

    if (hmax->platform.delay_ms) {
 8002836:	68e3      	ldr	r3, [r4, #12]
 8002838:	b10b      	cbz	r3, 800283e <MAX31865_ReadRegister16+0x2e>
        hmax->platform.delay_ms(1);
 800283a:	2001      	movs	r0, #1
 800283c:	4798      	blx	r3
    }

    /* Send register address and read 2 bytes */
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, 3);
 800283e:	2303      	movs	r3, #3
 8002840:	6825      	ldr	r5, [r4, #0]
 8002842:	eb0d 0103 	add.w	r1, sp, r3
 8002846:	4620      	mov	r0, r4
 8002848:	aa01      	add	r2, sp, #4
 800284a:	47a8      	blx	r5

    if (hmax->platform.delay_ms) {
 800284c:	68e3      	ldr	r3, [r4, #12]
    status = hmax->platform.spi_write_read(hmax, &tx_data, rx_data, 3);
 800284e:	4605      	mov	r5, r0
    if (hmax->platform.delay_ms) {
 8002850:	b10b      	cbz	r3, 8002856 <MAX31865_ReadRegister16+0x46>
        hmax->platform.delay_ms(1);
 8002852:	2001      	movs	r0, #1
 8002854:	4798      	blx	r3
    }

    if (hmax->platform.cs_high) {
 8002856:	68a3      	ldr	r3, [r4, #8]
 8002858:	b103      	cbz	r3, 800285c <MAX31865_ReadRegister16+0x4c>
        hmax->platform.cs_high();
 800285a:	4798      	blx	r3
    }

    if (status != MAX31865_OK) {
 800285c:	b91d      	cbnz	r5, 8002866 <MAX31865_ReadRegister16+0x56>
        return status;
    }

    *data = ((uint16_t)rx_data[1] << 8) | rx_data[2];
 800285e:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 8002862:	ba5b      	rev16	r3, r3
 8002864:	8033      	strh	r3, [r6, #0]
    return MAX31865_OK;
}
 8002866:	4628      	mov	r0, r5
 8002868:	b002      	add	sp, #8
 800286a:	bd70      	pop	{r4, r5, r6, pc}
        return MAX31865_ERROR;
 800286c:	2501      	movs	r5, #1
 800286e:	e7fa      	b.n	8002866 <MAX31865_ReadRegister16+0x56>

08002870 <MAX31865_WriteRegister8>:

/**
 * @brief Write 8-bit register
 */
max31865_status_t MAX31865_WriteRegister8(MAX31865_Handle_t *hmax, uint8_t reg, uint8_t data) {
 8002870:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (hmax == NULL || hmax->platform.spi_write_read == NULL) {
 8002872:	4604      	mov	r4, r0
 8002874:	b1f8      	cbz	r0, 80028b6 <MAX31865_WriteRegister8+0x46>
 8002876:	6803      	ldr	r3, [r0, #0]
 8002878:	b1eb      	cbz	r3, 80028b6 <MAX31865_WriteRegister8+0x46>
    max31865_status_t status;

    tx_data[0] = reg | 0x80; // Set MSB for write
    tx_data[1] = data;

    if (hmax->platform.cs_low) {
 800287a:	6843      	ldr	r3, [r0, #4]
    tx_data[0] = reg | 0x80; // Set MSB for write
 800287c:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8002880:	f88d 1000 	strb.w	r1, [sp]
    tx_data[1] = data;
 8002884:	f88d 2001 	strb.w	r2, [sp, #1]
    if (hmax->platform.cs_low) {
 8002888:	b103      	cbz	r3, 800288c <MAX31865_WriteRegister8+0x1c>
        hmax->platform.cs_low();
 800288a:	4798      	blx	r3
    }

    if (hmax->platform.delay_ms) {
 800288c:	68e3      	ldr	r3, [r4, #12]
 800288e:	b10b      	cbz	r3, 8002894 <MAX31865_WriteRegister8+0x24>
        hmax->platform.delay_ms(1);
 8002890:	2001      	movs	r0, #1
 8002892:	4798      	blx	r3
    }

    status = hmax->platform.spi_write_read(hmax, tx_data, rx_data, 2);
 8002894:	2302      	movs	r3, #2
 8002896:	6825      	ldr	r5, [r4, #0]
 8002898:	4669      	mov	r1, sp
 800289a:	4620      	mov	r0, r4
 800289c:	aa01      	add	r2, sp, #4
 800289e:	47a8      	blx	r5

    if (hmax->platform.delay_ms) {
 80028a0:	68e3      	ldr	r3, [r4, #12]
    status = hmax->platform.spi_write_read(hmax, tx_data, rx_data, 2);
 80028a2:	4605      	mov	r5, r0
    if (hmax->platform.delay_ms) {
 80028a4:	b10b      	cbz	r3, 80028aa <MAX31865_WriteRegister8+0x3a>
        hmax->platform.delay_ms(1);
 80028a6:	2001      	movs	r0, #1
 80028a8:	4798      	blx	r3
    }

    if (hmax->platform.cs_high) {
 80028aa:	68a3      	ldr	r3, [r4, #8]
 80028ac:	b103      	cbz	r3, 80028b0 <MAX31865_WriteRegister8+0x40>
        hmax->platform.cs_high();
 80028ae:	4798      	blx	r3
    }

    return status;
}
 80028b0:	4628      	mov	r0, r5
 80028b2:	b003      	add	sp, #12
 80028b4:	bd30      	pop	{r4, r5, pc}
        return MAX31865_ERROR;
 80028b6:	2501      	movs	r5, #1
 80028b8:	e7fa      	b.n	80028b0 <MAX31865_WriteRegister8+0x40>

080028ba <MAX31865_SetWires>:

/**
 * @brief Set wire configuration
 */
max31865_status_t MAX31865_SetWires(MAX31865_Handle_t *hmax, max31865_numwires_t wires) {
 80028ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028bc:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31865_ERROR;
 80028be:	4604      	mov	r4, r0
 80028c0:	b910      	cbnz	r0, 80028c8 <MAX31865_SetWires+0xe>
 80028c2:	2001      	movs	r0, #1
        return MAX31865_ERROR;
    }

    hmax->wires = wires;
    return MAX31865_OK;
}
 80028c4:	b003      	add	sp, #12
 80028c6:	bd30      	pop	{r4, r5, pc}
    uint8_t config = 0;
 80028c8:	2100      	movs	r1, #0
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 80028ca:	f10d 0207 	add.w	r2, sp, #7
    uint8_t config = 0;
 80028ce:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 80028d2:	f7ff ff70 	bl	80027b6 <MAX31865_ReadRegister8>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d1f3      	bne.n	80028c2 <MAX31865_SetWires+0x8>
        config |= MAX31865_CONFIG_3WIRE;
 80028da:	f89d 2007 	ldrb.w	r2, [sp, #7]
    if (wires == MAX31865_3WIRE) {
 80028de:	2d01      	cmp	r5, #1
        config |= MAX31865_CONFIG_3WIRE;
 80028e0:	bf0c      	ite	eq
 80028e2:	f042 0210 	orreq.w	r2, r2, #16
        config &= ~MAX31865_CONFIG_3WIRE;
 80028e6:	f002 02ef 	andne.w	r2, r2, #239	@ 0xef
    if (MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config) != MAX31865_OK) {
 80028ea:	2100      	movs	r1, #0
 80028ec:	4620      	mov	r0, r4
 80028ee:	f88d 2007 	strb.w	r2, [sp, #7]
 80028f2:	f7ff ffbd 	bl	8002870 <MAX31865_WriteRegister8>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d1e3      	bne.n	80028c2 <MAX31865_SetWires+0x8>
    hmax->wires = wires;
 80028fa:	7725      	strb	r5, [r4, #28]
    return MAX31865_OK;
 80028fc:	e7e2      	b.n	80028c4 <MAX31865_SetWires+0xa>

080028fe <MAX31865_SetFilter>:

/**
 * @brief Set noise filter
 */
max31865_status_t MAX31865_SetFilter(MAX31865_Handle_t *hmax, max31865_filter_t filter) {
 80028fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002900:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31865_ERROR;
 8002902:	4604      	mov	r4, r0
 8002904:	b910      	cbnz	r0, 800290c <MAX31865_SetFilter+0xe>
 8002906:	2001      	movs	r0, #1
        return MAX31865_ERROR;
    }

    hmax->filter = filter;
    return MAX31865_OK;
}
 8002908:	b003      	add	sp, #12
 800290a:	bd30      	pop	{r4, r5, pc}
    uint8_t config = 0;
 800290c:	2100      	movs	r1, #0
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 800290e:	f10d 0207 	add.w	r2, sp, #7
    uint8_t config = 0;
 8002912:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8002916:	f7ff ff4e 	bl	80027b6 <MAX31865_ReadRegister8>
 800291a:	2800      	cmp	r0, #0
 800291c:	d1f3      	bne.n	8002906 <MAX31865_SetFilter+0x8>
        config |= MAX31865_CONFIG_FILT50HZ;
 800291e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    if (filter == MAX31865_FILTER_50HZ) {
 8002922:	2d01      	cmp	r5, #1
        config |= MAX31865_CONFIG_FILT50HZ;
 8002924:	bf0c      	ite	eq
 8002926:	f042 0201 	orreq.w	r2, r2, #1
        config &= ~MAX31865_CONFIG_FILT50HZ;
 800292a:	f002 02fe 	andne.w	r2, r2, #254	@ 0xfe
    if (MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config) != MAX31865_OK) {
 800292e:	2100      	movs	r1, #0
 8002930:	4620      	mov	r0, r4
 8002932:	f88d 2007 	strb.w	r2, [sp, #7]
 8002936:	f7ff ff9b 	bl	8002870 <MAX31865_WriteRegister8>
 800293a:	2800      	cmp	r0, #0
 800293c:	d1e3      	bne.n	8002906 <MAX31865_SetFilter+0x8>
    hmax->filter = filter;
 800293e:	7765      	strb	r5, [r4, #29]
    return MAX31865_OK;
 8002940:	e7e2      	b.n	8002908 <MAX31865_SetFilter+0xa>

08002942 <MAX31865_EnableBias>:

/**
 * @brief Enable/disable bias voltage
 */
max31865_status_t MAX31865_EnableBias(MAX31865_Handle_t *hmax, bool enable) {
 8002942:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002944:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31865_ERROR;
 8002946:	4604      	mov	r4, r0
 8002948:	b1b0      	cbz	r0, 8002978 <MAX31865_EnableBias+0x36>

    uint8_t config = 0;
 800294a:	2100      	movs	r1, #0
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 800294c:	f10d 0207 	add.w	r2, sp, #7
    uint8_t config = 0;
 8002950:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8002954:	f7ff ff2f 	bl	80027b6 <MAX31865_ReadRegister8>
 8002958:	b970      	cbnz	r0, 8002978 <MAX31865_EnableBias+0x36>
        return MAX31865_ERROR;
    }

    if (enable) {
        config |= MAX31865_CONFIG_BIAS;
 800295a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    if (enable) {
 800295e:	b145      	cbz	r5, 8002972 <MAX31865_EnableBias+0x30>
        config |= MAX31865_CONFIG_BIAS;
 8002960:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
    } else {
        config &= ~MAX31865_CONFIG_BIAS;
    }

    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 8002964:	2100      	movs	r1, #0
 8002966:	4620      	mov	r0, r4
}
 8002968:	b003      	add	sp, #12
 800296a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 800296e:	f7ff bf7f 	b.w	8002870 <MAX31865_WriteRegister8>
        config &= ~MAX31865_CONFIG_BIAS;
 8002972:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002976:	e7f5      	b.n	8002964 <MAX31865_EnableBias+0x22>
}
 8002978:	2001      	movs	r0, #1
 800297a:	b003      	add	sp, #12
 800297c:	bd30      	pop	{r4, r5, pc}

0800297e <MAX31865_EnableAutoConvert>:

/**
 * @brief Enable/disable auto conversion mode
 */
max31865_status_t MAX31865_EnableAutoConvert(MAX31865_Handle_t *hmax, bool enable) {
 800297e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002980:	460d      	mov	r5, r1
    if (hmax == NULL) return MAX31865_ERROR;
 8002982:	4604      	mov	r4, r0
 8002984:	b1b0      	cbz	r0, 80029b4 <MAX31865_EnableAutoConvert+0x36>

    uint8_t config = 0;
 8002986:	2100      	movs	r1, #0
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8002988:	f10d 0207 	add.w	r2, sp, #7
    uint8_t config = 0;
 800298c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8002990:	f7ff ff11 	bl	80027b6 <MAX31865_ReadRegister8>
 8002994:	b970      	cbnz	r0, 80029b4 <MAX31865_EnableAutoConvert+0x36>
        return MAX31865_ERROR;
    }

    if (enable) {
        config |= MAX31865_CONFIG_MODEAUTO;
 8002996:	f89d 2007 	ldrb.w	r2, [sp, #7]
    if (enable) {
 800299a:	b145      	cbz	r5, 80029ae <MAX31865_EnableAutoConvert+0x30>
        config |= MAX31865_CONFIG_MODEAUTO;
 800299c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
    } else {
        config &= ~MAX31865_CONFIG_MODEAUTO;
    }

    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 80029a0:	2100      	movs	r1, #0
 80029a2:	4620      	mov	r0, r4
}
 80029a4:	b003      	add	sp, #12
 80029a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 80029aa:	f7ff bf61 	b.w	8002870 <MAX31865_WriteRegister8>
        config &= ~MAX31865_CONFIG_MODEAUTO;
 80029ae:	f002 02bf 	and.w	r2, r2, #191	@ 0xbf
 80029b2:	e7f5      	b.n	80029a0 <MAX31865_EnableAutoConvert+0x22>
}
 80029b4:	2001      	movs	r0, #1
 80029b6:	b003      	add	sp, #12
 80029b8:	bd30      	pop	{r4, r5, pc}

080029ba <MAX31865_ClearFault>:

/**
 * @brief Clear fault status
 */
max31865_status_t MAX31865_ClearFault(MAX31865_Handle_t *hmax) {
 80029ba:	b513      	push	{r0, r1, r4, lr}
    if (hmax == NULL) return MAX31865_ERROR;
 80029bc:	4604      	mov	r4, r0
 80029be:	b1a0      	cbz	r0, 80029ea <MAX31865_ClearFault+0x30>

    uint8_t config = 0;
 80029c0:	2100      	movs	r1, #0
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 80029c2:	f10d 0207 	add.w	r2, sp, #7
    uint8_t config = 0;
 80029c6:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 80029ca:	f7ff fef4 	bl	80027b6 <MAX31865_ReadRegister8>
 80029ce:	4601      	mov	r1, r0
 80029d0:	b958      	cbnz	r0, 80029ea <MAX31865_ClearFault+0x30>
    }

    config &= ~0x2C; // Clear fault detection bits
    config |= MAX31865_CONFIG_FAULTSTAT;

    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 80029d2:	4620      	mov	r0, r4
    config &= ~0x2C; // Clear fault detection bits
 80029d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80029d8:	f022 022c 	bic.w	r2, r2, #44	@ 0x2c
    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 80029dc:	f042 0202 	orr.w	r2, r2, #2
}
 80029e0:	b002      	add	sp, #8
 80029e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config);
 80029e6:	f7ff bf43 	b.w	8002870 <MAX31865_WriteRegister8>
}
 80029ea:	2001      	movs	r0, #1
 80029ec:	b002      	add	sp, #8
 80029ee:	bd10      	pop	{r4, pc}

080029f0 <MAX31865_SetThresholds>:

/**
 * @brief Set fault thresholds
 */
max31865_status_t MAX31865_SetThresholds(MAX31865_Handle_t *hmax, uint16_t lower, uint16_t upper) {
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	460e      	mov	r6, r1
 80029f4:	4615      	mov	r5, r2
    if (hmax == NULL) return MAX31865_ERROR;
 80029f6:	4604      	mov	r4, r0
 80029f8:	b908      	cbnz	r0, 80029fe <MAX31865_SetThresholds+0xe>
 80029fa:	2001      	movs	r0, #1
    if (MAX31865_WriteRegister8(hmax, MAX31865_HFAULT_LSB_REG, upper & 0xFF) != MAX31865_OK) {
        return MAX31865_ERROR;
    }

    return MAX31865_OK;
}
 80029fc:	bd70      	pop	{r4, r5, r6, pc}
    if (MAX31865_WriteRegister8(hmax, MAX31865_LFAULT_MSB_REG, (lower >> 8) & 0xFF) != MAX31865_OK) {
 80029fe:	0a0a      	lsrs	r2, r1, #8
 8002a00:	2105      	movs	r1, #5
 8002a02:	f7ff ff35 	bl	8002870 <MAX31865_WriteRegister8>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d1f7      	bne.n	80029fa <MAX31865_SetThresholds+0xa>
    if (MAX31865_WriteRegister8(hmax, MAX31865_LFAULT_LSB_REG, lower & 0xFF) != MAX31865_OK) {
 8002a0a:	2106      	movs	r1, #6
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	b2f2      	uxtb	r2, r6
 8002a10:	f7ff ff2e 	bl	8002870 <MAX31865_WriteRegister8>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d1f0      	bne.n	80029fa <MAX31865_SetThresholds+0xa>
    if (MAX31865_WriteRegister8(hmax, MAX31865_HFAULT_MSB_REG, (upper >> 8) & 0xFF) != MAX31865_OK) {
 8002a18:	2103      	movs	r1, #3
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	0a2a      	lsrs	r2, r5, #8
 8002a1e:	f7ff ff27 	bl	8002870 <MAX31865_WriteRegister8>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d1e9      	bne.n	80029fa <MAX31865_SetThresholds+0xa>
    if (MAX31865_WriteRegister8(hmax, MAX31865_HFAULT_LSB_REG, upper & 0xFF) != MAX31865_OK) {
 8002a26:	2104      	movs	r1, #4
 8002a28:	4620      	mov	r0, r4
 8002a2a:	b2ea      	uxtb	r2, r5
 8002a2c:	f7ff ff20 	bl	8002870 <MAX31865_WriteRegister8>
 8002a30:	3800      	subs	r0, #0
 8002a32:	bf18      	it	ne
 8002a34:	2001      	movne	r0, #1
 8002a36:	e7e1      	b.n	80029fc <MAX31865_SetThresholds+0xc>

08002a38 <MAX31865_Init>:
                                float rref, float rnominal) {
 8002a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a3a:	469c      	mov	ip, r3
 8002a3c:	460d      	mov	r5, r1
 8002a3e:	4617      	mov	r7, r2
    if (hmax == NULL || platform == NULL) {
 8002a40:	4604      	mov	r4, r0
 8002a42:	b910      	cbnz	r0, 8002a4a <MAX31865_Init+0x12>
        return MAX31865_ERROR;
 8002a44:	2001      	movs	r0, #1
}
 8002a46:	b003      	add	sp, #12
 8002a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hmax == NULL || platform == NULL) {
 8002a4a:	2900      	cmp	r1, #0
 8002a4c:	d0fa      	beq.n	8002a44 <MAX31865_Init+0xc>
    hmax->platform = *platform;
 8002a4e:	4606      	mov	r6, r0
 8002a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a54:	682b      	ldr	r3, [r5, #0]
    hmax->last_temperature = 0.0f;
 8002a56:	2200      	movs	r2, #0
    hmax->platform = *platform;
 8002a58:	6033      	str	r3, [r6, #0]
    hmax->rnominal = rnominal;
 8002a5a:	9b08      	ldr	r3, [sp, #32]
    hmax->rref = rref;
 8002a5c:	f8c4 c014 	str.w	ip, [r4, #20]
    hmax->rnominal = rnominal;
 8002a60:	61a3      	str	r3, [r4, #24]
    hmax->filter = MAX31865_FILTER_60HZ;
 8002a62:	2300      	movs	r3, #0
 8002a64:	7763      	strb	r3, [r4, #29]
    hmax->initialized = false;
 8002a66:	83e3      	strh	r3, [r4, #30]
    hmax->last_rtd_raw = 0;
 8002a68:	84a3      	strh	r3, [r4, #36]	@ 0x24
    if (hmax->platform.cs_high) {
 8002a6a:	68a3      	ldr	r3, [r4, #8]
    hmax->wires = wires;
 8002a6c:	7727      	strb	r7, [r4, #28]
    hmax->last_temperature = 0.0f;
 8002a6e:	6222      	str	r2, [r4, #32]
    if (hmax->platform.cs_high) {
 8002a70:	b103      	cbz	r3, 8002a74 <MAX31865_Init+0x3c>
        hmax->platform.cs_high();
 8002a72:	4798      	blx	r3
    if (hmax->platform.delay_ms) {
 8002a74:	68e3      	ldr	r3, [r4, #12]
 8002a76:	b10b      	cbz	r3, 8002a7c <MAX31865_Init+0x44>
        hmax->platform.delay_ms(10);
 8002a78:	200a      	movs	r0, #10
 8002a7a:	4798      	blx	r3
    uint8_t config_reg = 0;
 8002a7c:	2100      	movs	r1, #0
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config_reg) != MAX31865_OK) {
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f10d 0207 	add.w	r2, sp, #7
    uint8_t config_reg = 0;
 8002a84:	f88d 1007 	strb.w	r1, [sp, #7]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config_reg) != MAX31865_OK) {
 8002a88:	f7ff fe95 	bl	80027b6 <MAX31865_ReadRegister8>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d1d9      	bne.n	8002a44 <MAX31865_Init+0xc>
    MAX31865_ClearFault(hmax);
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff ff92 	bl	80029ba <MAX31865_ClearFault>
    if (MAX31865_SetWires(hmax, wires) != MAX31865_OK) {
 8002a96:	4639      	mov	r1, r7
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7ff ff0e 	bl	80028ba <MAX31865_SetWires>
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d1cf      	bne.n	8002a44 <MAX31865_Init+0xc>
    if (MAX31865_EnableBias(hmax, false) != MAX31865_OK) {
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f7ff ff4c 	bl	8002942 <MAX31865_EnableBias>
 8002aaa:	4601      	mov	r1, r0
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d1c9      	bne.n	8002a44 <MAX31865_Init+0xc>
    if (MAX31865_EnableAutoConvert(hmax, false) != MAX31865_OK) {
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff ff64 	bl	800297e <MAX31865_EnableAutoConvert>
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d1c3      	bne.n	8002a44 <MAX31865_Init+0xc>
    if (MAX31865_SetThresholds(hmax, 0x0000, 0x7FFF) != MAX31865_OK) {
 8002abc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7ff ff95 	bl	80029f0 <MAX31865_SetThresholds>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d1bc      	bne.n	8002a44 <MAX31865_Init+0xc>
    hmax->initialized = true;
 8002aca:	2301      	movs	r3, #1
 8002acc:	77a3      	strb	r3, [r4, #30]
    return MAX31865_OK;
 8002ace:	e7ba      	b.n	8002a46 <MAX31865_Init+0xe>

08002ad0 <MAX31865_ReadFault>:
}

/**
 * @brief Read fault status
 */
max31865_status_t MAX31865_ReadFault(MAX31865_Handle_t *hmax, uint8_t *fault_status) {
 8002ad0:	460a      	mov	r2, r1
    if (hmax == NULL || fault_status == NULL) return MAX31865_ERROR;
 8002ad2:	b118      	cbz	r0, 8002adc <MAX31865_ReadFault+0xc>
 8002ad4:	b111      	cbz	r1, 8002adc <MAX31865_ReadFault+0xc>

    return MAX31865_ReadRegister8(hmax, MAX31865_FAULT_STATUS_REG, fault_status);
 8002ad6:	2107      	movs	r1, #7
 8002ad8:	f7ff be6d 	b.w	80027b6 <MAX31865_ReadRegister8>
}
 8002adc:	2001      	movs	r0, #1
 8002ade:	4770      	bx	lr

08002ae0 <MAX31865_ReadRTD>:
max31865_status_t MAX31865_ReadRTD(MAX31865_Handle_t *hmax, uint16_t *rtd_raw) {
 8002ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ae2:	460e      	mov	r6, r1
    if (hmax == NULL || rtd_raw == NULL) return MAX31865_ERROR;
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	b918      	cbnz	r0, 8002af0 <MAX31865_ReadRTD+0x10>
 8002ae8:	2501      	movs	r5, #1
}
 8002aea:	4628      	mov	r0, r5
 8002aec:	b002      	add	sp, #8
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
    if (hmax == NULL || rtd_raw == NULL) return MAX31865_ERROR;
 8002af0:	2900      	cmp	r1, #0
 8002af2:	d0f9      	beq.n	8002ae8 <MAX31865_ReadRTD+0x8>
    MAX31865_ClearFault(hmax);
 8002af4:	f7ff ff61 	bl	80029ba <MAX31865_ClearFault>
    if (MAX31865_EnableBias(hmax, true) != MAX31865_OK) {
 8002af8:	2101      	movs	r1, #1
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff ff21 	bl	8002942 <MAX31865_EnableBias>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d1f1      	bne.n	8002ae8 <MAX31865_ReadRTD+0x8>
    if (hmax->platform.delay_ms) {
 8002b04:	68e3      	ldr	r3, [r4, #12]
 8002b06:	b10b      	cbz	r3, 8002b0c <MAX31865_ReadRTD+0x2c>
        hmax->platform.delay_ms(10); // Wait for bias to stabilize
 8002b08:	200a      	movs	r0, #10
 8002b0a:	4798      	blx	r3
    uint8_t config = 0;
 8002b0c:	2100      	movs	r1, #0
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8002b0e:	4620      	mov	r0, r4
 8002b10:	aa01      	add	r2, sp, #4
    uint8_t config = 0;
 8002b12:	f88d 1004 	strb.w	r1, [sp, #4]
    if (MAX31865_ReadRegister8(hmax, MAX31865_CONFIG_REG, &config) != MAX31865_OK) {
 8002b16:	f7ff fe4e 	bl	80027b6 <MAX31865_ReadRegister8>
 8002b1a:	4601      	mov	r1, r0
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d1e3      	bne.n	8002ae8 <MAX31865_ReadRTD+0x8>
    config |= MAX31865_CONFIG_1SHOT;
 8002b20:	f89d 2004 	ldrb.w	r2, [sp, #4]
    if (MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config) != MAX31865_OK) {
 8002b24:	4620      	mov	r0, r4
    config |= MAX31865_CONFIG_1SHOT;
 8002b26:	f042 0220 	orr.w	r2, r2, #32
 8002b2a:	f88d 2004 	strb.w	r2, [sp, #4]
    if (MAX31865_WriteRegister8(hmax, MAX31865_CONFIG_REG, config) != MAX31865_OK) {
 8002b2e:	f7ff fe9f 	bl	8002870 <MAX31865_WriteRegister8>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d1d8      	bne.n	8002ae8 <MAX31865_ReadRTD+0x8>
    if (MAX31865_WaitForConversion(hmax) != MAX31865_OK) {
 8002b36:	68e3      	ldr	r3, [r4, #12]
    if (hmax->platform.delay_ms) {
 8002b38:	b10b      	cbz	r3, 8002b3e <MAX31865_ReadRTD+0x5e>
        hmax->platform.delay_ms(65); // 65ms for 60Hz filter, 52ms for 50Hz
 8002b3a:	2041      	movs	r0, #65	@ 0x41
 8002b3c:	4798      	blx	r3
    uint16_t rtd_reg = 0;
 8002b3e:	2300      	movs	r3, #0
    if (MAX31865_ReadRegister16(hmax, MAX31865_RTD_MSB_REG, &rtd_reg) != MAX31865_OK) {
 8002b40:	2101      	movs	r1, #1
 8002b42:	4620      	mov	r0, r4
 8002b44:	f10d 0206 	add.w	r2, sp, #6
    uint16_t rtd_reg = 0;
 8002b48:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (MAX31865_ReadRegister16(hmax, MAX31865_RTD_MSB_REG, &rtd_reg) != MAX31865_OK) {
 8002b4c:	f7ff fe60 	bl	8002810 <MAX31865_ReadRegister16>
 8002b50:	4605      	mov	r5, r0
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d1c8      	bne.n	8002ae8 <MAX31865_ReadRTD+0x8>
    MAX31865_EnableBias(hmax, false);
 8002b56:	4601      	mov	r1, r0
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fef2 	bl	8002942 <MAX31865_EnableBias>
    *rtd_raw = rtd_reg >> 1;
 8002b5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002b62:	085a      	lsrs	r2, r3, #1
    if (rtd_reg & 0x01) {
 8002b64:	07db      	lsls	r3, r3, #31
    *rtd_raw = rtd_reg >> 1;
 8002b66:	8032      	strh	r2, [r6, #0]
    hmax->last_rtd_raw = *rtd_raw;
 8002b68:	84a2      	strh	r2, [r4, #36]	@ 0x24
    if (rtd_reg & 0x01) {
 8002b6a:	d5be      	bpl.n	8002aea <MAX31865_ReadRTD+0xa>
        MAX31865_ReadFault(hmax, &fault_status);
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f10d 0105 	add.w	r1, sp, #5
        uint8_t fault_status = 0;
 8002b72:	f88d 5005 	strb.w	r5, [sp, #5]
        MAX31865_ReadFault(hmax, &fault_status);
 8002b76:	f7ff ffab 	bl	8002ad0 <MAX31865_ReadFault>
        hmax->last_fault = fault_status;
 8002b7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
        return MAX31865_FAULT;
 8002b7e:	2503      	movs	r5, #3
        hmax->last_fault = fault_status;
 8002b80:	77e3      	strb	r3, [r4, #31]
        return MAX31865_FAULT;
 8002b82:	e7b2      	b.n	8002aea <MAX31865_ReadRTD+0xa>

08002b84 <MAX31865_ReadResistance>:
}

/**
 * @brief Read resistance
 */
max31865_status_t MAX31865_ReadResistance(MAX31865_Handle_t *hmax, float *resistance) {
 8002b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b86:	460d      	mov	r5, r1
    if (hmax == NULL || resistance == NULL) return MAX31865_ERROR;
 8002b88:	4606      	mov	r6, r0
 8002b8a:	b1c0      	cbz	r0, 8002bbe <MAX31865_ReadResistance+0x3a>
 8002b8c:	b1b9      	cbz	r1, 8002bbe <MAX31865_ReadResistance+0x3a>

    uint16_t rtd_raw = 0;
 8002b8e:	2300      	movs	r3, #0
    max31865_status_t status = MAX31865_ReadRTD(hmax, &rtd_raw);
 8002b90:	f10d 0106 	add.w	r1, sp, #6
    uint16_t rtd_raw = 0;
 8002b94:	f8ad 3006 	strh.w	r3, [sp, #6]
    max31865_status_t status = MAX31865_ReadRTD(hmax, &rtd_raw);
 8002b98:	f7ff ffa2 	bl	8002ae0 <MAX31865_ReadRTD>

    if (status != MAX31865_OK) {
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	b958      	cbnz	r0, 8002bb8 <MAX31865_ReadResistance+0x34>

/**
 * @brief Convert RTD raw value to resistance
 */
float MAX31865_RTDtoResistance(uint16_t rtd_raw, float rref) {
    return ((float)rtd_raw * rref) / MAX31865_ADC_MAX;
 8002ba0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002ba4:	f7fe f826 	bl	8000bf4 <__aeabi_ui2f>
 8002ba8:	6971      	ldr	r1, [r6, #20]
 8002baa:	f7fe f87b 	bl	8000ca4 <__aeabi_fmul>
 8002bae:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 8002bb2:	f7fe f877 	bl	8000ca4 <__aeabi_fmul>
    *resistance = MAX31865_RTDtoResistance(rtd_raw, hmax->rref);
 8002bb6:	6028      	str	r0, [r5, #0]
}
 8002bb8:	4620      	mov	r0, r4
 8002bba:	b002      	add	sp, #8
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
    if (hmax == NULL || resistance == NULL) return MAX31865_ERROR;
 8002bbe:	2401      	movs	r4, #1
 8002bc0:	e7fa      	b.n	8002bb8 <MAX31865_ReadResistance+0x34>
	...

08002bc4 <MAX31865_ResistanceToTemperature>:
}

/**
 * @brief Convert resistance to temperature using Callendar-Van Dusen equation
 */
float MAX31865_ResistanceToTemperature(float resistance, float rnominal) {
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4605      	mov	r5, r0
    float Z1, Z2, Z3, Z4, temp;

    /* Callendar-Van Dusen equation for positive temperatures */
    Z1 = -RTD_A;
    Z2 = RTD_A * RTD_A - (4.0f * RTD_B);
    Z3 = (4.0f * RTD_B) / rnominal;
 8002bc8:	482c      	ldr	r0, [pc, #176]	@ (8002c7c <MAX31865_ResistanceToTemperature+0xb8>)
float MAX31865_ResistanceToTemperature(float resistance, float rnominal) {
 8002bca:	460e      	mov	r6, r1
    Z3 = (4.0f * RTD_B) / rnominal;
 8002bcc:	f7fe f91e 	bl	8000e0c <__aeabi_fdiv>
    Z4 = 2.0f * RTD_B;

    temp = Z2 + (Z3 * resistance);
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	f7fe f867 	bl	8000ca4 <__aeabi_fmul>
 8002bd6:	492a      	ldr	r1, [pc, #168]	@ (8002c80 <MAX31865_ResistanceToTemperature+0xbc>)
 8002bd8:	f7fd ff5c 	bl	8000a94 <__addsf3>
    temp = (sqrtf(temp) + Z1) / Z4;
 8002bdc:	f002 fdd6 	bl	800578c <sqrtf>
 8002be0:	4928      	ldr	r1, [pc, #160]	@ (8002c84 <MAX31865_ResistanceToTemperature+0xc0>)
 8002be2:	f7fd ff55 	bl	8000a90 <__aeabi_fsub>
 8002be6:	4928      	ldr	r1, [pc, #160]	@ (8002c88 <MAX31865_ResistanceToTemperature+0xc4>)
 8002be8:	f7fe f910 	bl	8000e0c <__aeabi_fdiv>

    if (temp >= 0.0f) {
 8002bec:	2100      	movs	r1, #0
    temp = (sqrtf(temp) + Z1) / Z4;
 8002bee:	4604      	mov	r4, r0
    if (temp >= 0.0f) {
 8002bf0:	f7fe fa0a 	bl	8001008 <__aeabi_fcmpge>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d13f      	bne.n	8002c78 <MAX31865_ResistanceToTemperature+0xb4>
        return temp;
    }

    /* For negative temperatures */
    float rpoly = resistance / rnominal * 100.0f; // Normalize to PT100
 8002bf8:	4631      	mov	r1, r6
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f7fe f906 	bl	8000e0c <__aeabi_fdiv>
 8002c00:	4922      	ldr	r1, [pc, #136]	@ (8002c8c <MAX31865_ResistanceToTemperature+0xc8>)
 8002c02:	f7fe f84f 	bl	8000ca4 <__aeabi_fmul>

    temp = -242.02f;
    temp += 2.2228f * rpoly;
 8002c06:	4922      	ldr	r1, [pc, #136]	@ (8002c90 <MAX31865_ResistanceToTemperature+0xcc>)
    float rpoly = resistance / rnominal * 100.0f; // Normalize to PT100
 8002c08:	4604      	mov	r4, r0
    temp += 2.2228f * rpoly;
 8002c0a:	f7fe f84b 	bl	8000ca4 <__aeabi_fmul>
 8002c0e:	4921      	ldr	r1, [pc, #132]	@ (8002c94 <MAX31865_ResistanceToTemperature+0xd0>)
 8002c10:	f7fd ff3e 	bl	8000a90 <__aeabi_fsub>
    rpoly *= (resistance / rnominal * 100.0f);
 8002c14:	4621      	mov	r1, r4
    temp += 2.2228f * rpoly;
 8002c16:	4605      	mov	r5, r0
    rpoly *= (resistance / rnominal * 100.0f);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7fe f843 	bl	8000ca4 <__aeabi_fmul>
    temp += 2.5859e-3f * rpoly;
 8002c1e:	491e      	ldr	r1, [pc, #120]	@ (8002c98 <MAX31865_ResistanceToTemperature+0xd4>)
    rpoly *= (resistance / rnominal * 100.0f);
 8002c20:	4606      	mov	r6, r0
    temp += 2.5859e-3f * rpoly;
 8002c22:	f7fe f83f 	bl	8000ca4 <__aeabi_fmul>
 8002c26:	4629      	mov	r1, r5
 8002c28:	f7fd ff34 	bl	8000a94 <__addsf3>
    rpoly *= (resistance / rnominal * 100.0f);
 8002c2c:	4631      	mov	r1, r6
    temp += 2.5859e-3f * rpoly;
 8002c2e:	4605      	mov	r5, r0
    rpoly *= (resistance / rnominal * 100.0f);
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7fe f837 	bl	8000ca4 <__aeabi_fmul>
    temp -= 4.8260e-6f * rpoly;
 8002c36:	4919      	ldr	r1, [pc, #100]	@ (8002c9c <MAX31865_ResistanceToTemperature+0xd8>)
    rpoly *= (resistance / rnominal * 100.0f);
 8002c38:	4606      	mov	r6, r0
    temp -= 4.8260e-6f * rpoly;
 8002c3a:	f7fe f833 	bl	8000ca4 <__aeabi_fmul>
 8002c3e:	4601      	mov	r1, r0
 8002c40:	4628      	mov	r0, r5
 8002c42:	f7fd ff25 	bl	8000a90 <__aeabi_fsub>
    rpoly *= (resistance / rnominal * 100.0f);
 8002c46:	4631      	mov	r1, r6
    temp -= 4.8260e-6f * rpoly;
 8002c48:	4605      	mov	r5, r0
    rpoly *= (resistance / rnominal * 100.0f);
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f7fe f82a 	bl	8000ca4 <__aeabi_fmul>
    temp -= 2.8183e-8f * rpoly;
 8002c50:	4913      	ldr	r1, [pc, #76]	@ (8002ca0 <MAX31865_ResistanceToTemperature+0xdc>)
    rpoly *= (resistance / rnominal * 100.0f);
 8002c52:	4606      	mov	r6, r0
    temp -= 2.8183e-8f * rpoly;
 8002c54:	f7fe f826 	bl	8000ca4 <__aeabi_fmul>
 8002c58:	4601      	mov	r1, r0
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f7fd ff18 	bl	8000a90 <__aeabi_fsub>
 8002c60:	4605      	mov	r5, r0
    rpoly *= (resistance / rnominal * 100.0f);
 8002c62:	4631      	mov	r1, r6
 8002c64:	4620      	mov	r0, r4
 8002c66:	f7fe f81d 	bl	8000ca4 <__aeabi_fmul>
    temp += 1.5243e-10f * rpoly;
 8002c6a:	490e      	ldr	r1, [pc, #56]	@ (8002ca4 <MAX31865_ResistanceToTemperature+0xe0>)
 8002c6c:	f7fe f81a 	bl	8000ca4 <__aeabi_fmul>
 8002c70:	4629      	mov	r1, r5
 8002c72:	f7fd ff0f 	bl	8000a94 <__addsf3>
 8002c76:	4604      	mov	r4, r0

    return temp;
}
 8002c78:	4620      	mov	r0, r4
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
 8002c7c:	b61b057f 	.word	0xb61b057f
 8002c80:	37938316 	.word	0x37938316
 8002c84:	3b801132 	.word	0x3b801132
 8002c88:	b59b057f 	.word	0xb59b057f
 8002c8c:	42c80000 	.word	0x42c80000
 8002c90:	400e425b 	.word	0x400e425b
 8002c94:	4372051f 	.word	0x4372051f
 8002c98:	3b297834 	.word	0x3b297834
 8002c9c:	36a1ef06 	.word	0x36a1ef06
 8002ca0:	32f21713 	.word	0x32f21713
 8002ca4:	2f27993b 	.word	0x2f27993b

08002ca8 <MAX31865_ReadTemperature>:
max31865_status_t MAX31865_ReadTemperature(MAX31865_Handle_t *hmax, float *temperature) {
 8002ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002caa:	460e      	mov	r6, r1
    if (hmax == NULL || temperature == NULL) return MAX31865_ERROR;
 8002cac:	4605      	mov	r5, r0
 8002cae:	b1e0      	cbz	r0, 8002cea <MAX31865_ReadTemperature+0x42>
 8002cb0:	b1d9      	cbz	r1, 8002cea <MAX31865_ReadTemperature+0x42>
    uint16_t rtd_raw = 0;
 8002cb2:	2300      	movs	r3, #0
    max31865_status_t status = MAX31865_ReadRTD(hmax, &rtd_raw);
 8002cb4:	f10d 0106 	add.w	r1, sp, #6
    uint16_t rtd_raw = 0;
 8002cb8:	f8ad 3006 	strh.w	r3, [sp, #6]
    max31865_status_t status = MAX31865_ReadRTD(hmax, &rtd_raw);
 8002cbc:	f7ff ff10 	bl	8002ae0 <MAX31865_ReadRTD>
    if (status != MAX31865_OK) {
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	b978      	cbnz	r0, 8002ce4 <MAX31865_ReadTemperature+0x3c>
    return ((float)rtd_raw * rref) / MAX31865_ADC_MAX;
 8002cc4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002cc8:	f7fd ff94 	bl	8000bf4 <__aeabi_ui2f>
 8002ccc:	6969      	ldr	r1, [r5, #20]
 8002cce:	f7fd ffe9 	bl	8000ca4 <__aeabi_fmul>
 8002cd2:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 8002cd6:	f7fd ffe5 	bl	8000ca4 <__aeabi_fmul>
    *temperature = MAX31865_ResistanceToTemperature(resistance, hmax->rnominal);
 8002cda:	69a9      	ldr	r1, [r5, #24]
 8002cdc:	f7ff ff72 	bl	8002bc4 <MAX31865_ResistanceToTemperature>
 8002ce0:	6030      	str	r0, [r6, #0]
    hmax->last_temperature = *temperature;
 8002ce2:	6228      	str	r0, [r5, #32]
}
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	b002      	add	sp, #8
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
    if (hmax == NULL || temperature == NULL) return MAX31865_ERROR;
 8002cea:	2401      	movs	r4, #1
 8002cec:	e7fa      	b.n	8002ce4 <MAX31865_ReadTemperature+0x3c>
	...

08002cf0 <MAX31865_GetFaultString>:

/**
 * @brief Get fault status string
 */
const char* MAX31865_GetFaultString(uint8_t fault_bits) {
 8002cf0:	b510      	push	{r4, lr}
    static char fault_str[256];
    fault_str[0] = '\0';
 8002cf2:	2300      	movs	r3, #0
const char* MAX31865_GetFaultString(uint8_t fault_bits) {
 8002cf4:	4604      	mov	r4, r0
    fault_str[0] = '\0';
 8002cf6:	4815      	ldr	r0, [pc, #84]	@ (8002d4c <MAX31865_GetFaultString+0x5c>)
 8002cf8:	7003      	strb	r3, [r0, #0]

    if (fault_bits == 0) {
 8002cfa:	b32c      	cbz	r4, 8002d48 <MAX31865_GetFaultString+0x58>
        return "No faults";
    }

    if (fault_bits & MAX31865_FAULT_HIGHTHRESH) {
 8002cfc:	0622      	lsls	r2, r4, #24
 8002cfe:	d502      	bpl.n	8002d06 <MAX31865_GetFaultString+0x16>
        strcat(fault_str, "RTD High Threshold; ");
 8002d00:	4913      	ldr	r1, [pc, #76]	@ (8002d50 <MAX31865_GetFaultString+0x60>)
 8002d02:	f000 fe9f 	bl	8003a44 <strcat>
    }
    if (fault_bits & MAX31865_FAULT_LOWTHRESH) {
 8002d06:	0663      	lsls	r3, r4, #25
 8002d08:	d503      	bpl.n	8002d12 <MAX31865_GetFaultString+0x22>
        strcat(fault_str, "RTD Low Threshold; ");
 8002d0a:	4912      	ldr	r1, [pc, #72]	@ (8002d54 <MAX31865_GetFaultString+0x64>)
 8002d0c:	480f      	ldr	r0, [pc, #60]	@ (8002d4c <MAX31865_GetFaultString+0x5c>)
 8002d0e:	f000 fe99 	bl	8003a44 <strcat>
    }
    if (fault_bits & MAX31865_FAULT_REFINLOW) {
 8002d12:	06a0      	lsls	r0, r4, #26
 8002d14:	d503      	bpl.n	8002d1e <MAX31865_GetFaultString+0x2e>
        strcat(fault_str, "REFIN- > 0.85 x BIAS; ");
 8002d16:	4910      	ldr	r1, [pc, #64]	@ (8002d58 <MAX31865_GetFaultString+0x68>)
 8002d18:	480c      	ldr	r0, [pc, #48]	@ (8002d4c <MAX31865_GetFaultString+0x5c>)
 8002d1a:	f000 fe93 	bl	8003a44 <strcat>
    }
    if (fault_bits & MAX31865_FAULT_REFINHIGH) {
 8002d1e:	06e1      	lsls	r1, r4, #27
 8002d20:	d503      	bpl.n	8002d2a <MAX31865_GetFaultString+0x3a>
        strcat(fault_str, "REFIN- < 0.85 x BIAS; ");
 8002d22:	490e      	ldr	r1, [pc, #56]	@ (8002d5c <MAX31865_GetFaultString+0x6c>)
 8002d24:	4809      	ldr	r0, [pc, #36]	@ (8002d4c <MAX31865_GetFaultString+0x5c>)
 8002d26:	f000 fe8d 	bl	8003a44 <strcat>
    }
    if (fault_bits & MAX31865_FAULT_RTDINLOW) {
 8002d2a:	0722      	lsls	r2, r4, #28
 8002d2c:	d503      	bpl.n	8002d36 <MAX31865_GetFaultString+0x46>
        strcat(fault_str, "RTDIN- < 0.85 x BIAS; ");
 8002d2e:	490c      	ldr	r1, [pc, #48]	@ (8002d60 <MAX31865_GetFaultString+0x70>)
 8002d30:	4806      	ldr	r0, [pc, #24]	@ (8002d4c <MAX31865_GetFaultString+0x5c>)
 8002d32:	f000 fe87 	bl	8003a44 <strcat>
    }
    if (fault_bits & MAX31865_FAULT_OVUV) {
 8002d36:	0763      	lsls	r3, r4, #29
 8002d38:	d401      	bmi.n	8002d3e <MAX31865_GetFaultString+0x4e>
        strcat(fault_str, "Over/Under Voltage; ");
    }

    return fault_str;
 8002d3a:	4804      	ldr	r0, [pc, #16]	@ (8002d4c <MAX31865_GetFaultString+0x5c>)
}
 8002d3c:	bd10      	pop	{r4, pc}
        strcat(fault_str, "Over/Under Voltage; ");
 8002d3e:	4909      	ldr	r1, [pc, #36]	@ (8002d64 <MAX31865_GetFaultString+0x74>)
 8002d40:	4802      	ldr	r0, [pc, #8]	@ (8002d4c <MAX31865_GetFaultString+0x5c>)
 8002d42:	f000 fe7f 	bl	8003a44 <strcat>
 8002d46:	e7f8      	b.n	8002d3a <MAX31865_GetFaultString+0x4a>
        return "No faults";
 8002d48:	4807      	ldr	r0, [pc, #28]	@ (8002d68 <MAX31865_GetFaultString+0x78>)
 8002d4a:	e7f7      	b.n	8002d3c <MAX31865_GetFaultString+0x4c>
 8002d4c:	200002c0 	.word	0x200002c0
 8002d50:	08005bd0 	.word	0x08005bd0
 8002d54:	08005be5 	.word	0x08005be5
 8002d58:	08005bf9 	.word	0x08005bf9
 8002d5c:	08005c10 	.word	0x08005c10
 8002d60:	08005c27 	.word	0x08005c27
 8002d64:	08005c3e 	.word	0x08005c3e
 8002d68:	08005bc6 	.word	0x08005bc6

08002d6c <__cvt>:
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d72:	461d      	mov	r5, r3
 8002d74:	bfbb      	ittet	lt
 8002d76:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002d7a:	461d      	movlt	r5, r3
 8002d7c:	2300      	movge	r3, #0
 8002d7e:	232d      	movlt	r3, #45	@ 0x2d
 8002d80:	b088      	sub	sp, #32
 8002d82:	4614      	mov	r4, r2
 8002d84:	bfb8      	it	lt
 8002d86:	4614      	movlt	r4, r2
 8002d88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002d8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002d8c:	7013      	strb	r3, [r2, #0]
 8002d8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002d90:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002d94:	f023 0820 	bic.w	r8, r3, #32
 8002d98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002d9c:	d005      	beq.n	8002daa <__cvt+0x3e>
 8002d9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002da2:	d100      	bne.n	8002da6 <__cvt+0x3a>
 8002da4:	3601      	adds	r6, #1
 8002da6:	2302      	movs	r3, #2
 8002da8:	e000      	b.n	8002dac <__cvt+0x40>
 8002daa:	2303      	movs	r3, #3
 8002dac:	aa07      	add	r2, sp, #28
 8002dae:	9204      	str	r2, [sp, #16]
 8002db0:	aa06      	add	r2, sp, #24
 8002db2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002db6:	e9cd 3600 	strd	r3, r6, [sp]
 8002dba:	4622      	mov	r2, r4
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	f000 ff5f 	bl	8003c80 <_dtoa_r>
 8002dc2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002dc6:	4607      	mov	r7, r0
 8002dc8:	d119      	bne.n	8002dfe <__cvt+0x92>
 8002dca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002dcc:	07db      	lsls	r3, r3, #31
 8002dce:	d50e      	bpl.n	8002dee <__cvt+0x82>
 8002dd0:	eb00 0906 	add.w	r9, r0, r6
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4629      	mov	r1, r5
 8002ddc:	f7fd fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8002de0:	b108      	cbz	r0, 8002de6 <__cvt+0x7a>
 8002de2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002de6:	2230      	movs	r2, #48	@ 0x30
 8002de8:	9b07      	ldr	r3, [sp, #28]
 8002dea:	454b      	cmp	r3, r9
 8002dec:	d31e      	bcc.n	8002e2c <__cvt+0xc0>
 8002dee:	4638      	mov	r0, r7
 8002df0:	9b07      	ldr	r3, [sp, #28]
 8002df2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002df4:	1bdb      	subs	r3, r3, r7
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	b008      	add	sp, #32
 8002dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dfe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e02:	eb00 0906 	add.w	r9, r0, r6
 8002e06:	d1e5      	bne.n	8002dd4 <__cvt+0x68>
 8002e08:	7803      	ldrb	r3, [r0, #0]
 8002e0a:	2b30      	cmp	r3, #48	@ 0x30
 8002e0c:	d10a      	bne.n	8002e24 <__cvt+0xb8>
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2300      	movs	r3, #0
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd fdc7 	bl	80009a8 <__aeabi_dcmpeq>
 8002e1a:	b918      	cbnz	r0, 8002e24 <__cvt+0xb8>
 8002e1c:	f1c6 0601 	rsb	r6, r6, #1
 8002e20:	f8ca 6000 	str.w	r6, [sl]
 8002e24:	f8da 3000 	ldr.w	r3, [sl]
 8002e28:	4499      	add	r9, r3
 8002e2a:	e7d3      	b.n	8002dd4 <__cvt+0x68>
 8002e2c:	1c59      	adds	r1, r3, #1
 8002e2e:	9107      	str	r1, [sp, #28]
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e7d9      	b.n	8002de8 <__cvt+0x7c>

08002e34 <__exponent>:
 8002e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e36:	2900      	cmp	r1, #0
 8002e38:	bfb6      	itet	lt
 8002e3a:	232d      	movlt	r3, #45	@ 0x2d
 8002e3c:	232b      	movge	r3, #43	@ 0x2b
 8002e3e:	4249      	neglt	r1, r1
 8002e40:	2909      	cmp	r1, #9
 8002e42:	7002      	strb	r2, [r0, #0]
 8002e44:	7043      	strb	r3, [r0, #1]
 8002e46:	dd29      	ble.n	8002e9c <__exponent+0x68>
 8002e48:	f10d 0307 	add.w	r3, sp, #7
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	270a      	movs	r7, #10
 8002e50:	fbb1 f6f7 	udiv	r6, r1, r7
 8002e54:	461a      	mov	r2, r3
 8002e56:	fb07 1416 	mls	r4, r7, r6, r1
 8002e5a:	3430      	adds	r4, #48	@ 0x30
 8002e5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002e60:	460c      	mov	r4, r1
 8002e62:	2c63      	cmp	r4, #99	@ 0x63
 8002e64:	4631      	mov	r1, r6
 8002e66:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e6a:	dcf1      	bgt.n	8002e50 <__exponent+0x1c>
 8002e6c:	3130      	adds	r1, #48	@ 0x30
 8002e6e:	1e94      	subs	r4, r2, #2
 8002e70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002e74:	4623      	mov	r3, r4
 8002e76:	1c41      	adds	r1, r0, #1
 8002e78:	42ab      	cmp	r3, r5
 8002e7a:	d30a      	bcc.n	8002e92 <__exponent+0x5e>
 8002e7c:	f10d 0309 	add.w	r3, sp, #9
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	42ac      	cmp	r4, r5
 8002e84:	bf88      	it	hi
 8002e86:	2300      	movhi	r3, #0
 8002e88:	3302      	adds	r3, #2
 8002e8a:	4403      	add	r3, r0
 8002e8c:	1a18      	subs	r0, r3, r0
 8002e8e:	b003      	add	sp, #12
 8002e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002e96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002e9a:	e7ed      	b.n	8002e78 <__exponent+0x44>
 8002e9c:	2330      	movs	r3, #48	@ 0x30
 8002e9e:	3130      	adds	r1, #48	@ 0x30
 8002ea0:	7083      	strb	r3, [r0, #2]
 8002ea2:	70c1      	strb	r1, [r0, #3]
 8002ea4:	1d03      	adds	r3, r0, #4
 8002ea6:	e7f1      	b.n	8002e8c <__exponent+0x58>

08002ea8 <_printf_float>:
 8002ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eac:	b091      	sub	sp, #68	@ 0x44
 8002eae:	460c      	mov	r4, r1
 8002eb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002eb4:	4616      	mov	r6, r2
 8002eb6:	461f      	mov	r7, r3
 8002eb8:	4605      	mov	r5, r0
 8002eba:	f000 fdd3 	bl	8003a64 <_localeconv_r>
 8002ebe:	6803      	ldr	r3, [r0, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	9308      	str	r3, [sp, #32]
 8002ec4:	f7fd f944 	bl	8000150 <strlen>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	930e      	str	r3, [sp, #56]	@ 0x38
 8002ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8002ed0:	9009      	str	r0, [sp, #36]	@ 0x24
 8002ed2:	3307      	adds	r3, #7
 8002ed4:	f023 0307 	bic.w	r3, r3, #7
 8002ed8:	f103 0208 	add.w	r2, r3, #8
 8002edc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002ee0:	f8d4 b000 	ldr.w	fp, [r4]
 8002ee4:	f8c8 2000 	str.w	r2, [r8]
 8002ee8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002eec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002ef2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8002efa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002efe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002f02:	4b9c      	ldr	r3, [pc, #624]	@ (8003174 <_printf_float+0x2cc>)
 8002f04:	f7fd fd82 	bl	8000a0c <__aeabi_dcmpun>
 8002f08:	bb70      	cbnz	r0, 8002f68 <_printf_float+0xc0>
 8002f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f12:	4b98      	ldr	r3, [pc, #608]	@ (8003174 <_printf_float+0x2cc>)
 8002f14:	f7fd fd5c 	bl	80009d0 <__aeabi_dcmple>
 8002f18:	bb30      	cbnz	r0, 8002f68 <_printf_float+0xc0>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	4640      	mov	r0, r8
 8002f20:	4649      	mov	r1, r9
 8002f22:	f7fd fd4b 	bl	80009bc <__aeabi_dcmplt>
 8002f26:	b110      	cbz	r0, 8002f2e <_printf_float+0x86>
 8002f28:	232d      	movs	r3, #45	@ 0x2d
 8002f2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f2e:	4a92      	ldr	r2, [pc, #584]	@ (8003178 <_printf_float+0x2d0>)
 8002f30:	4b92      	ldr	r3, [pc, #584]	@ (800317c <_printf_float+0x2d4>)
 8002f32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002f36:	bf8c      	ite	hi
 8002f38:	4690      	movhi	r8, r2
 8002f3a:	4698      	movls	r8, r3
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	f04f 0900 	mov.w	r9, #0
 8002f42:	6123      	str	r3, [r4, #16]
 8002f44:	f02b 0304 	bic.w	r3, fp, #4
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	4633      	mov	r3, r6
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4628      	mov	r0, r5
 8002f50:	9700      	str	r7, [sp, #0]
 8002f52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002f54:	f000 f9d4 	bl	8003300 <_printf_common>
 8002f58:	3001      	adds	r0, #1
 8002f5a:	f040 8090 	bne.w	800307e <_printf_float+0x1d6>
 8002f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f62:	b011      	add	sp, #68	@ 0x44
 8002f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	4640      	mov	r0, r8
 8002f6e:	4649      	mov	r1, r9
 8002f70:	f7fd fd4c 	bl	8000a0c <__aeabi_dcmpun>
 8002f74:	b148      	cbz	r0, 8002f8a <_printf_float+0xe2>
 8002f76:	464b      	mov	r3, r9
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bfb8      	it	lt
 8002f7c:	232d      	movlt	r3, #45	@ 0x2d
 8002f7e:	4a80      	ldr	r2, [pc, #512]	@ (8003180 <_printf_float+0x2d8>)
 8002f80:	bfb8      	it	lt
 8002f82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002f86:	4b7f      	ldr	r3, [pc, #508]	@ (8003184 <_printf_float+0x2dc>)
 8002f88:	e7d3      	b.n	8002f32 <_printf_float+0x8a>
 8002f8a:	6863      	ldr	r3, [r4, #4]
 8002f8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	d13f      	bne.n	8003014 <_printf_float+0x16c>
 8002f94:	2306      	movs	r3, #6
 8002f96:	6063      	str	r3, [r4, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002f9e:	6023      	str	r3, [r4, #0]
 8002fa0:	9206      	str	r2, [sp, #24]
 8002fa2:	aa0e      	add	r2, sp, #56	@ 0x38
 8002fa4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002fa8:	aa0d      	add	r2, sp, #52	@ 0x34
 8002faa:	9203      	str	r2, [sp, #12]
 8002fac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002fb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002fb4:	6863      	ldr	r3, [r4, #4]
 8002fb6:	4642      	mov	r2, r8
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4628      	mov	r0, r5
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	910a      	str	r1, [sp, #40]	@ 0x28
 8002fc0:	f7ff fed4 	bl	8002d6c <__cvt>
 8002fc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002fc6:	4680      	mov	r8, r0
 8002fc8:	2947      	cmp	r1, #71	@ 0x47
 8002fca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002fcc:	d128      	bne.n	8003020 <_printf_float+0x178>
 8002fce:	1cc8      	adds	r0, r1, #3
 8002fd0:	db02      	blt.n	8002fd8 <_printf_float+0x130>
 8002fd2:	6863      	ldr	r3, [r4, #4]
 8002fd4:	4299      	cmp	r1, r3
 8002fd6:	dd40      	ble.n	800305a <_printf_float+0x1b2>
 8002fd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8002fdc:	fa5f fa8a 	uxtb.w	sl, sl
 8002fe0:	4652      	mov	r2, sl
 8002fe2:	3901      	subs	r1, #1
 8002fe4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002fe8:	910d      	str	r1, [sp, #52]	@ 0x34
 8002fea:	f7ff ff23 	bl	8002e34 <__exponent>
 8002fee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002ff0:	4681      	mov	r9, r0
 8002ff2:	1813      	adds	r3, r2, r0
 8002ff4:	2a01      	cmp	r2, #1
 8002ff6:	6123      	str	r3, [r4, #16]
 8002ff8:	dc02      	bgt.n	8003000 <_printf_float+0x158>
 8002ffa:	6822      	ldr	r2, [r4, #0]
 8002ffc:	07d2      	lsls	r2, r2, #31
 8002ffe:	d501      	bpl.n	8003004 <_printf_float+0x15c>
 8003000:	3301      	adds	r3, #1
 8003002:	6123      	str	r3, [r4, #16]
 8003004:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003008:	2b00      	cmp	r3, #0
 800300a:	d09e      	beq.n	8002f4a <_printf_float+0xa2>
 800300c:	232d      	movs	r3, #45	@ 0x2d
 800300e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003012:	e79a      	b.n	8002f4a <_printf_float+0xa2>
 8003014:	2947      	cmp	r1, #71	@ 0x47
 8003016:	d1bf      	bne.n	8002f98 <_printf_float+0xf0>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1bd      	bne.n	8002f98 <_printf_float+0xf0>
 800301c:	2301      	movs	r3, #1
 800301e:	e7ba      	b.n	8002f96 <_printf_float+0xee>
 8003020:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003024:	d9dc      	bls.n	8002fe0 <_printf_float+0x138>
 8003026:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800302a:	d118      	bne.n	800305e <_printf_float+0x1b6>
 800302c:	2900      	cmp	r1, #0
 800302e:	6863      	ldr	r3, [r4, #4]
 8003030:	dd0b      	ble.n	800304a <_printf_float+0x1a2>
 8003032:	6121      	str	r1, [r4, #16]
 8003034:	b913      	cbnz	r3, 800303c <_printf_float+0x194>
 8003036:	6822      	ldr	r2, [r4, #0]
 8003038:	07d0      	lsls	r0, r2, #31
 800303a:	d502      	bpl.n	8003042 <_printf_float+0x19a>
 800303c:	3301      	adds	r3, #1
 800303e:	440b      	add	r3, r1
 8003040:	6123      	str	r3, [r4, #16]
 8003042:	f04f 0900 	mov.w	r9, #0
 8003046:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003048:	e7dc      	b.n	8003004 <_printf_float+0x15c>
 800304a:	b913      	cbnz	r3, 8003052 <_printf_float+0x1aa>
 800304c:	6822      	ldr	r2, [r4, #0]
 800304e:	07d2      	lsls	r2, r2, #31
 8003050:	d501      	bpl.n	8003056 <_printf_float+0x1ae>
 8003052:	3302      	adds	r3, #2
 8003054:	e7f4      	b.n	8003040 <_printf_float+0x198>
 8003056:	2301      	movs	r3, #1
 8003058:	e7f2      	b.n	8003040 <_printf_float+0x198>
 800305a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800305e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003060:	4299      	cmp	r1, r3
 8003062:	db05      	blt.n	8003070 <_printf_float+0x1c8>
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	6121      	str	r1, [r4, #16]
 8003068:	07d8      	lsls	r0, r3, #31
 800306a:	d5ea      	bpl.n	8003042 <_printf_float+0x19a>
 800306c:	1c4b      	adds	r3, r1, #1
 800306e:	e7e7      	b.n	8003040 <_printf_float+0x198>
 8003070:	2900      	cmp	r1, #0
 8003072:	bfcc      	ite	gt
 8003074:	2201      	movgt	r2, #1
 8003076:	f1c1 0202 	rsble	r2, r1, #2
 800307a:	4413      	add	r3, r2
 800307c:	e7e0      	b.n	8003040 <_printf_float+0x198>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	055a      	lsls	r2, r3, #21
 8003082:	d407      	bmi.n	8003094 <_printf_float+0x1ec>
 8003084:	6923      	ldr	r3, [r4, #16]
 8003086:	4642      	mov	r2, r8
 8003088:	4631      	mov	r1, r6
 800308a:	4628      	mov	r0, r5
 800308c:	47b8      	blx	r7
 800308e:	3001      	adds	r0, #1
 8003090:	d12b      	bne.n	80030ea <_printf_float+0x242>
 8003092:	e764      	b.n	8002f5e <_printf_float+0xb6>
 8003094:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003098:	f240 80dc 	bls.w	8003254 <_printf_float+0x3ac>
 800309c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80030a0:	2200      	movs	r2, #0
 80030a2:	2300      	movs	r3, #0
 80030a4:	f7fd fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d033      	beq.n	8003114 <_printf_float+0x26c>
 80030ac:	2301      	movs	r3, #1
 80030ae:	4631      	mov	r1, r6
 80030b0:	4628      	mov	r0, r5
 80030b2:	4a35      	ldr	r2, [pc, #212]	@ (8003188 <_printf_float+0x2e0>)
 80030b4:	47b8      	blx	r7
 80030b6:	3001      	adds	r0, #1
 80030b8:	f43f af51 	beq.w	8002f5e <_printf_float+0xb6>
 80030bc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80030c0:	4543      	cmp	r3, r8
 80030c2:	db02      	blt.n	80030ca <_printf_float+0x222>
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	07d8      	lsls	r0, r3, #31
 80030c8:	d50f      	bpl.n	80030ea <_printf_float+0x242>
 80030ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80030ce:	4631      	mov	r1, r6
 80030d0:	4628      	mov	r0, r5
 80030d2:	47b8      	blx	r7
 80030d4:	3001      	adds	r0, #1
 80030d6:	f43f af42 	beq.w	8002f5e <_printf_float+0xb6>
 80030da:	f04f 0900 	mov.w	r9, #0
 80030de:	f108 38ff 	add.w	r8, r8, #4294967295
 80030e2:	f104 0a1a 	add.w	sl, r4, #26
 80030e6:	45c8      	cmp	r8, r9
 80030e8:	dc09      	bgt.n	80030fe <_printf_float+0x256>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	079b      	lsls	r3, r3, #30
 80030ee:	f100 8102 	bmi.w	80032f6 <_printf_float+0x44e>
 80030f2:	68e0      	ldr	r0, [r4, #12]
 80030f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80030f6:	4298      	cmp	r0, r3
 80030f8:	bfb8      	it	lt
 80030fa:	4618      	movlt	r0, r3
 80030fc:	e731      	b.n	8002f62 <_printf_float+0xba>
 80030fe:	2301      	movs	r3, #1
 8003100:	4652      	mov	r2, sl
 8003102:	4631      	mov	r1, r6
 8003104:	4628      	mov	r0, r5
 8003106:	47b8      	blx	r7
 8003108:	3001      	adds	r0, #1
 800310a:	f43f af28 	beq.w	8002f5e <_printf_float+0xb6>
 800310e:	f109 0901 	add.w	r9, r9, #1
 8003112:	e7e8      	b.n	80030e6 <_printf_float+0x23e>
 8003114:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003116:	2b00      	cmp	r3, #0
 8003118:	dc38      	bgt.n	800318c <_printf_float+0x2e4>
 800311a:	2301      	movs	r3, #1
 800311c:	4631      	mov	r1, r6
 800311e:	4628      	mov	r0, r5
 8003120:	4a19      	ldr	r2, [pc, #100]	@ (8003188 <_printf_float+0x2e0>)
 8003122:	47b8      	blx	r7
 8003124:	3001      	adds	r0, #1
 8003126:	f43f af1a 	beq.w	8002f5e <_printf_float+0xb6>
 800312a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800312e:	ea59 0303 	orrs.w	r3, r9, r3
 8003132:	d102      	bne.n	800313a <_printf_float+0x292>
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	07d9      	lsls	r1, r3, #31
 8003138:	d5d7      	bpl.n	80030ea <_printf_float+0x242>
 800313a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800313e:	4631      	mov	r1, r6
 8003140:	4628      	mov	r0, r5
 8003142:	47b8      	blx	r7
 8003144:	3001      	adds	r0, #1
 8003146:	f43f af0a 	beq.w	8002f5e <_printf_float+0xb6>
 800314a:	f04f 0a00 	mov.w	sl, #0
 800314e:	f104 0b1a 	add.w	fp, r4, #26
 8003152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003154:	425b      	negs	r3, r3
 8003156:	4553      	cmp	r3, sl
 8003158:	dc01      	bgt.n	800315e <_printf_float+0x2b6>
 800315a:	464b      	mov	r3, r9
 800315c:	e793      	b.n	8003086 <_printf_float+0x1de>
 800315e:	2301      	movs	r3, #1
 8003160:	465a      	mov	r2, fp
 8003162:	4631      	mov	r1, r6
 8003164:	4628      	mov	r0, r5
 8003166:	47b8      	blx	r7
 8003168:	3001      	adds	r0, #1
 800316a:	f43f aef8 	beq.w	8002f5e <_printf_float+0xb6>
 800316e:	f10a 0a01 	add.w	sl, sl, #1
 8003172:	e7ee      	b.n	8003152 <_printf_float+0x2aa>
 8003174:	7fefffff 	.word	0x7fefffff
 8003178:	08005c57 	.word	0x08005c57
 800317c:	08005c53 	.word	0x08005c53
 8003180:	08005c5f 	.word	0x08005c5f
 8003184:	08005c5b 	.word	0x08005c5b
 8003188:	08005c63 	.word	0x08005c63
 800318c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800318e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003192:	4553      	cmp	r3, sl
 8003194:	bfa8      	it	ge
 8003196:	4653      	movge	r3, sl
 8003198:	2b00      	cmp	r3, #0
 800319a:	4699      	mov	r9, r3
 800319c:	dc36      	bgt.n	800320c <_printf_float+0x364>
 800319e:	f04f 0b00 	mov.w	fp, #0
 80031a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031a6:	f104 021a 	add.w	r2, r4, #26
 80031aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80031ae:	eba3 0309 	sub.w	r3, r3, r9
 80031b2:	455b      	cmp	r3, fp
 80031b4:	dc31      	bgt.n	800321a <_printf_float+0x372>
 80031b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031b8:	459a      	cmp	sl, r3
 80031ba:	dc3a      	bgt.n	8003232 <_printf_float+0x38a>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	07da      	lsls	r2, r3, #31
 80031c0:	d437      	bmi.n	8003232 <_printf_float+0x38a>
 80031c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031c4:	ebaa 0903 	sub.w	r9, sl, r3
 80031c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80031ca:	ebaa 0303 	sub.w	r3, sl, r3
 80031ce:	4599      	cmp	r9, r3
 80031d0:	bfa8      	it	ge
 80031d2:	4699      	movge	r9, r3
 80031d4:	f1b9 0f00 	cmp.w	r9, #0
 80031d8:	dc33      	bgt.n	8003242 <_printf_float+0x39a>
 80031da:	f04f 0800 	mov.w	r8, #0
 80031de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031e2:	f104 0b1a 	add.w	fp, r4, #26
 80031e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031e8:	ebaa 0303 	sub.w	r3, sl, r3
 80031ec:	eba3 0309 	sub.w	r3, r3, r9
 80031f0:	4543      	cmp	r3, r8
 80031f2:	f77f af7a 	ble.w	80030ea <_printf_float+0x242>
 80031f6:	2301      	movs	r3, #1
 80031f8:	465a      	mov	r2, fp
 80031fa:	4631      	mov	r1, r6
 80031fc:	4628      	mov	r0, r5
 80031fe:	47b8      	blx	r7
 8003200:	3001      	adds	r0, #1
 8003202:	f43f aeac 	beq.w	8002f5e <_printf_float+0xb6>
 8003206:	f108 0801 	add.w	r8, r8, #1
 800320a:	e7ec      	b.n	80031e6 <_printf_float+0x33e>
 800320c:	4642      	mov	r2, r8
 800320e:	4631      	mov	r1, r6
 8003210:	4628      	mov	r0, r5
 8003212:	47b8      	blx	r7
 8003214:	3001      	adds	r0, #1
 8003216:	d1c2      	bne.n	800319e <_printf_float+0x2f6>
 8003218:	e6a1      	b.n	8002f5e <_printf_float+0xb6>
 800321a:	2301      	movs	r3, #1
 800321c:	4631      	mov	r1, r6
 800321e:	4628      	mov	r0, r5
 8003220:	920a      	str	r2, [sp, #40]	@ 0x28
 8003222:	47b8      	blx	r7
 8003224:	3001      	adds	r0, #1
 8003226:	f43f ae9a 	beq.w	8002f5e <_printf_float+0xb6>
 800322a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800322c:	f10b 0b01 	add.w	fp, fp, #1
 8003230:	e7bb      	b.n	80031aa <_printf_float+0x302>
 8003232:	4631      	mov	r1, r6
 8003234:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003238:	4628      	mov	r0, r5
 800323a:	47b8      	blx	r7
 800323c:	3001      	adds	r0, #1
 800323e:	d1c0      	bne.n	80031c2 <_printf_float+0x31a>
 8003240:	e68d      	b.n	8002f5e <_printf_float+0xb6>
 8003242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003244:	464b      	mov	r3, r9
 8003246:	4631      	mov	r1, r6
 8003248:	4628      	mov	r0, r5
 800324a:	4442      	add	r2, r8
 800324c:	47b8      	blx	r7
 800324e:	3001      	adds	r0, #1
 8003250:	d1c3      	bne.n	80031da <_printf_float+0x332>
 8003252:	e684      	b.n	8002f5e <_printf_float+0xb6>
 8003254:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003258:	f1ba 0f01 	cmp.w	sl, #1
 800325c:	dc01      	bgt.n	8003262 <_printf_float+0x3ba>
 800325e:	07db      	lsls	r3, r3, #31
 8003260:	d536      	bpl.n	80032d0 <_printf_float+0x428>
 8003262:	2301      	movs	r3, #1
 8003264:	4642      	mov	r2, r8
 8003266:	4631      	mov	r1, r6
 8003268:	4628      	mov	r0, r5
 800326a:	47b8      	blx	r7
 800326c:	3001      	adds	r0, #1
 800326e:	f43f ae76 	beq.w	8002f5e <_printf_float+0xb6>
 8003272:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003276:	4631      	mov	r1, r6
 8003278:	4628      	mov	r0, r5
 800327a:	47b8      	blx	r7
 800327c:	3001      	adds	r0, #1
 800327e:	f43f ae6e 	beq.w	8002f5e <_printf_float+0xb6>
 8003282:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003286:	2200      	movs	r2, #0
 8003288:	2300      	movs	r3, #0
 800328a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800328e:	f7fd fb8b 	bl	80009a8 <__aeabi_dcmpeq>
 8003292:	b9c0      	cbnz	r0, 80032c6 <_printf_float+0x41e>
 8003294:	4653      	mov	r3, sl
 8003296:	f108 0201 	add.w	r2, r8, #1
 800329a:	4631      	mov	r1, r6
 800329c:	4628      	mov	r0, r5
 800329e:	47b8      	blx	r7
 80032a0:	3001      	adds	r0, #1
 80032a2:	d10c      	bne.n	80032be <_printf_float+0x416>
 80032a4:	e65b      	b.n	8002f5e <_printf_float+0xb6>
 80032a6:	2301      	movs	r3, #1
 80032a8:	465a      	mov	r2, fp
 80032aa:	4631      	mov	r1, r6
 80032ac:	4628      	mov	r0, r5
 80032ae:	47b8      	blx	r7
 80032b0:	3001      	adds	r0, #1
 80032b2:	f43f ae54 	beq.w	8002f5e <_printf_float+0xb6>
 80032b6:	f108 0801 	add.w	r8, r8, #1
 80032ba:	45d0      	cmp	r8, sl
 80032bc:	dbf3      	blt.n	80032a6 <_printf_float+0x3fe>
 80032be:	464b      	mov	r3, r9
 80032c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80032c4:	e6e0      	b.n	8003088 <_printf_float+0x1e0>
 80032c6:	f04f 0800 	mov.w	r8, #0
 80032ca:	f104 0b1a 	add.w	fp, r4, #26
 80032ce:	e7f4      	b.n	80032ba <_printf_float+0x412>
 80032d0:	2301      	movs	r3, #1
 80032d2:	4642      	mov	r2, r8
 80032d4:	e7e1      	b.n	800329a <_printf_float+0x3f2>
 80032d6:	2301      	movs	r3, #1
 80032d8:	464a      	mov	r2, r9
 80032da:	4631      	mov	r1, r6
 80032dc:	4628      	mov	r0, r5
 80032de:	47b8      	blx	r7
 80032e0:	3001      	adds	r0, #1
 80032e2:	f43f ae3c 	beq.w	8002f5e <_printf_float+0xb6>
 80032e6:	f108 0801 	add.w	r8, r8, #1
 80032ea:	68e3      	ldr	r3, [r4, #12]
 80032ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80032ee:	1a5b      	subs	r3, r3, r1
 80032f0:	4543      	cmp	r3, r8
 80032f2:	dcf0      	bgt.n	80032d6 <_printf_float+0x42e>
 80032f4:	e6fd      	b.n	80030f2 <_printf_float+0x24a>
 80032f6:	f04f 0800 	mov.w	r8, #0
 80032fa:	f104 0919 	add.w	r9, r4, #25
 80032fe:	e7f4      	b.n	80032ea <_printf_float+0x442>

08003300 <_printf_common>:
 8003300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003304:	4616      	mov	r6, r2
 8003306:	4698      	mov	r8, r3
 8003308:	688a      	ldr	r2, [r1, #8]
 800330a:	690b      	ldr	r3, [r1, #16]
 800330c:	4607      	mov	r7, r0
 800330e:	4293      	cmp	r3, r2
 8003310:	bfb8      	it	lt
 8003312:	4613      	movlt	r3, r2
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800331a:	460c      	mov	r4, r1
 800331c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003320:	b10a      	cbz	r2, 8003326 <_printf_common+0x26>
 8003322:	3301      	adds	r3, #1
 8003324:	6033      	str	r3, [r6, #0]
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	0699      	lsls	r1, r3, #26
 800332a:	bf42      	ittt	mi
 800332c:	6833      	ldrmi	r3, [r6, #0]
 800332e:	3302      	addmi	r3, #2
 8003330:	6033      	strmi	r3, [r6, #0]
 8003332:	6825      	ldr	r5, [r4, #0]
 8003334:	f015 0506 	ands.w	r5, r5, #6
 8003338:	d106      	bne.n	8003348 <_printf_common+0x48>
 800333a:	f104 0a19 	add.w	sl, r4, #25
 800333e:	68e3      	ldr	r3, [r4, #12]
 8003340:	6832      	ldr	r2, [r6, #0]
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	42ab      	cmp	r3, r5
 8003346:	dc2b      	bgt.n	80033a0 <_printf_common+0xa0>
 8003348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	3b00      	subs	r3, #0
 8003350:	bf18      	it	ne
 8003352:	2301      	movne	r3, #1
 8003354:	0692      	lsls	r2, r2, #26
 8003356:	d430      	bmi.n	80033ba <_printf_common+0xba>
 8003358:	4641      	mov	r1, r8
 800335a:	4638      	mov	r0, r7
 800335c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003360:	47c8      	blx	r9
 8003362:	3001      	adds	r0, #1
 8003364:	d023      	beq.n	80033ae <_printf_common+0xae>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	6922      	ldr	r2, [r4, #16]
 800336a:	f003 0306 	and.w	r3, r3, #6
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf14      	ite	ne
 8003372:	2500      	movne	r5, #0
 8003374:	6833      	ldreq	r3, [r6, #0]
 8003376:	f04f 0600 	mov.w	r6, #0
 800337a:	bf08      	it	eq
 800337c:	68e5      	ldreq	r5, [r4, #12]
 800337e:	f104 041a 	add.w	r4, r4, #26
 8003382:	bf08      	it	eq
 8003384:	1aed      	subeq	r5, r5, r3
 8003386:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800338a:	bf08      	it	eq
 800338c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003390:	4293      	cmp	r3, r2
 8003392:	bfc4      	itt	gt
 8003394:	1a9b      	subgt	r3, r3, r2
 8003396:	18ed      	addgt	r5, r5, r3
 8003398:	42b5      	cmp	r5, r6
 800339a:	d11a      	bne.n	80033d2 <_printf_common+0xd2>
 800339c:	2000      	movs	r0, #0
 800339e:	e008      	b.n	80033b2 <_printf_common+0xb2>
 80033a0:	2301      	movs	r3, #1
 80033a2:	4652      	mov	r2, sl
 80033a4:	4641      	mov	r1, r8
 80033a6:	4638      	mov	r0, r7
 80033a8:	47c8      	blx	r9
 80033aa:	3001      	adds	r0, #1
 80033ac:	d103      	bne.n	80033b6 <_printf_common+0xb6>
 80033ae:	f04f 30ff 	mov.w	r0, #4294967295
 80033b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b6:	3501      	adds	r5, #1
 80033b8:	e7c1      	b.n	800333e <_printf_common+0x3e>
 80033ba:	2030      	movs	r0, #48	@ 0x30
 80033bc:	18e1      	adds	r1, r4, r3
 80033be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033c8:	4422      	add	r2, r4
 80033ca:	3302      	adds	r3, #2
 80033cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033d0:	e7c2      	b.n	8003358 <_printf_common+0x58>
 80033d2:	2301      	movs	r3, #1
 80033d4:	4622      	mov	r2, r4
 80033d6:	4641      	mov	r1, r8
 80033d8:	4638      	mov	r0, r7
 80033da:	47c8      	blx	r9
 80033dc:	3001      	adds	r0, #1
 80033de:	d0e6      	beq.n	80033ae <_printf_common+0xae>
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7d9      	b.n	8003398 <_printf_common+0x98>

080033e4 <_printf_i>:
 80033e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033e8:	7e0f      	ldrb	r7, [r1, #24]
 80033ea:	4691      	mov	r9, r2
 80033ec:	2f78      	cmp	r7, #120	@ 0x78
 80033ee:	4680      	mov	r8, r0
 80033f0:	460c      	mov	r4, r1
 80033f2:	469a      	mov	sl, r3
 80033f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80033fa:	d807      	bhi.n	800340c <_printf_i+0x28>
 80033fc:	2f62      	cmp	r7, #98	@ 0x62
 80033fe:	d80a      	bhi.n	8003416 <_printf_i+0x32>
 8003400:	2f00      	cmp	r7, #0
 8003402:	f000 80d1 	beq.w	80035a8 <_printf_i+0x1c4>
 8003406:	2f58      	cmp	r7, #88	@ 0x58
 8003408:	f000 80b8 	beq.w	800357c <_printf_i+0x198>
 800340c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003414:	e03a      	b.n	800348c <_printf_i+0xa8>
 8003416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800341a:	2b15      	cmp	r3, #21
 800341c:	d8f6      	bhi.n	800340c <_printf_i+0x28>
 800341e:	a101      	add	r1, pc, #4	@ (adr r1, 8003424 <_printf_i+0x40>)
 8003420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003424:	0800347d 	.word	0x0800347d
 8003428:	08003491 	.word	0x08003491
 800342c:	0800340d 	.word	0x0800340d
 8003430:	0800340d 	.word	0x0800340d
 8003434:	0800340d 	.word	0x0800340d
 8003438:	0800340d 	.word	0x0800340d
 800343c:	08003491 	.word	0x08003491
 8003440:	0800340d 	.word	0x0800340d
 8003444:	0800340d 	.word	0x0800340d
 8003448:	0800340d 	.word	0x0800340d
 800344c:	0800340d 	.word	0x0800340d
 8003450:	0800358f 	.word	0x0800358f
 8003454:	080034bb 	.word	0x080034bb
 8003458:	08003549 	.word	0x08003549
 800345c:	0800340d 	.word	0x0800340d
 8003460:	0800340d 	.word	0x0800340d
 8003464:	080035b1 	.word	0x080035b1
 8003468:	0800340d 	.word	0x0800340d
 800346c:	080034bb 	.word	0x080034bb
 8003470:	0800340d 	.word	0x0800340d
 8003474:	0800340d 	.word	0x0800340d
 8003478:	08003551 	.word	0x08003551
 800347c:	6833      	ldr	r3, [r6, #0]
 800347e:	1d1a      	adds	r2, r3, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6032      	str	r2, [r6, #0]
 8003484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800348c:	2301      	movs	r3, #1
 800348e:	e09c      	b.n	80035ca <_printf_i+0x1e6>
 8003490:	6833      	ldr	r3, [r6, #0]
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	1d19      	adds	r1, r3, #4
 8003496:	6031      	str	r1, [r6, #0]
 8003498:	0606      	lsls	r6, r0, #24
 800349a:	d501      	bpl.n	80034a0 <_printf_i+0xbc>
 800349c:	681d      	ldr	r5, [r3, #0]
 800349e:	e003      	b.n	80034a8 <_printf_i+0xc4>
 80034a0:	0645      	lsls	r5, r0, #25
 80034a2:	d5fb      	bpl.n	800349c <_printf_i+0xb8>
 80034a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034a8:	2d00      	cmp	r5, #0
 80034aa:	da03      	bge.n	80034b4 <_printf_i+0xd0>
 80034ac:	232d      	movs	r3, #45	@ 0x2d
 80034ae:	426d      	negs	r5, r5
 80034b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034b4:	230a      	movs	r3, #10
 80034b6:	4858      	ldr	r0, [pc, #352]	@ (8003618 <_printf_i+0x234>)
 80034b8:	e011      	b.n	80034de <_printf_i+0xfa>
 80034ba:	6821      	ldr	r1, [r4, #0]
 80034bc:	6833      	ldr	r3, [r6, #0]
 80034be:	0608      	lsls	r0, r1, #24
 80034c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80034c4:	d402      	bmi.n	80034cc <_printf_i+0xe8>
 80034c6:	0649      	lsls	r1, r1, #25
 80034c8:	bf48      	it	mi
 80034ca:	b2ad      	uxthmi	r5, r5
 80034cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80034ce:	6033      	str	r3, [r6, #0]
 80034d0:	bf14      	ite	ne
 80034d2:	230a      	movne	r3, #10
 80034d4:	2308      	moveq	r3, #8
 80034d6:	4850      	ldr	r0, [pc, #320]	@ (8003618 <_printf_i+0x234>)
 80034d8:	2100      	movs	r1, #0
 80034da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034de:	6866      	ldr	r6, [r4, #4]
 80034e0:	2e00      	cmp	r6, #0
 80034e2:	60a6      	str	r6, [r4, #8]
 80034e4:	db05      	blt.n	80034f2 <_printf_i+0x10e>
 80034e6:	6821      	ldr	r1, [r4, #0]
 80034e8:	432e      	orrs	r6, r5
 80034ea:	f021 0104 	bic.w	r1, r1, #4
 80034ee:	6021      	str	r1, [r4, #0]
 80034f0:	d04b      	beq.n	800358a <_printf_i+0x1a6>
 80034f2:	4616      	mov	r6, r2
 80034f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80034f8:	fb03 5711 	mls	r7, r3, r1, r5
 80034fc:	5dc7      	ldrb	r7, [r0, r7]
 80034fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003502:	462f      	mov	r7, r5
 8003504:	42bb      	cmp	r3, r7
 8003506:	460d      	mov	r5, r1
 8003508:	d9f4      	bls.n	80034f4 <_printf_i+0x110>
 800350a:	2b08      	cmp	r3, #8
 800350c:	d10b      	bne.n	8003526 <_printf_i+0x142>
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	07df      	lsls	r7, r3, #31
 8003512:	d508      	bpl.n	8003526 <_printf_i+0x142>
 8003514:	6923      	ldr	r3, [r4, #16]
 8003516:	6861      	ldr	r1, [r4, #4]
 8003518:	4299      	cmp	r1, r3
 800351a:	bfde      	ittt	le
 800351c:	2330      	movle	r3, #48	@ 0x30
 800351e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003522:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003526:	1b92      	subs	r2, r2, r6
 8003528:	6122      	str	r2, [r4, #16]
 800352a:	464b      	mov	r3, r9
 800352c:	4621      	mov	r1, r4
 800352e:	4640      	mov	r0, r8
 8003530:	f8cd a000 	str.w	sl, [sp]
 8003534:	aa03      	add	r2, sp, #12
 8003536:	f7ff fee3 	bl	8003300 <_printf_common>
 800353a:	3001      	adds	r0, #1
 800353c:	d14a      	bne.n	80035d4 <_printf_i+0x1f0>
 800353e:	f04f 30ff 	mov.w	r0, #4294967295
 8003542:	b004      	add	sp, #16
 8003544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	2778      	movs	r7, #120	@ 0x78
 8003552:	4832      	ldr	r0, [pc, #200]	@ (800361c <_printf_i+0x238>)
 8003554:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	6831      	ldr	r1, [r6, #0]
 800355c:	061f      	lsls	r7, r3, #24
 800355e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003562:	d402      	bmi.n	800356a <_printf_i+0x186>
 8003564:	065f      	lsls	r7, r3, #25
 8003566:	bf48      	it	mi
 8003568:	b2ad      	uxthmi	r5, r5
 800356a:	6031      	str	r1, [r6, #0]
 800356c:	07d9      	lsls	r1, r3, #31
 800356e:	bf44      	itt	mi
 8003570:	f043 0320 	orrmi.w	r3, r3, #32
 8003574:	6023      	strmi	r3, [r4, #0]
 8003576:	b11d      	cbz	r5, 8003580 <_printf_i+0x19c>
 8003578:	2310      	movs	r3, #16
 800357a:	e7ad      	b.n	80034d8 <_printf_i+0xf4>
 800357c:	4826      	ldr	r0, [pc, #152]	@ (8003618 <_printf_i+0x234>)
 800357e:	e7e9      	b.n	8003554 <_printf_i+0x170>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	f023 0320 	bic.w	r3, r3, #32
 8003586:	6023      	str	r3, [r4, #0]
 8003588:	e7f6      	b.n	8003578 <_printf_i+0x194>
 800358a:	4616      	mov	r6, r2
 800358c:	e7bd      	b.n	800350a <_printf_i+0x126>
 800358e:	6833      	ldr	r3, [r6, #0]
 8003590:	6825      	ldr	r5, [r4, #0]
 8003592:	1d18      	adds	r0, r3, #4
 8003594:	6961      	ldr	r1, [r4, #20]
 8003596:	6030      	str	r0, [r6, #0]
 8003598:	062e      	lsls	r6, r5, #24
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	d501      	bpl.n	80035a2 <_printf_i+0x1be>
 800359e:	6019      	str	r1, [r3, #0]
 80035a0:	e002      	b.n	80035a8 <_printf_i+0x1c4>
 80035a2:	0668      	lsls	r0, r5, #25
 80035a4:	d5fb      	bpl.n	800359e <_printf_i+0x1ba>
 80035a6:	8019      	strh	r1, [r3, #0]
 80035a8:	2300      	movs	r3, #0
 80035aa:	4616      	mov	r6, r2
 80035ac:	6123      	str	r3, [r4, #16]
 80035ae:	e7bc      	b.n	800352a <_printf_i+0x146>
 80035b0:	6833      	ldr	r3, [r6, #0]
 80035b2:	2100      	movs	r1, #0
 80035b4:	1d1a      	adds	r2, r3, #4
 80035b6:	6032      	str	r2, [r6, #0]
 80035b8:	681e      	ldr	r6, [r3, #0]
 80035ba:	6862      	ldr	r2, [r4, #4]
 80035bc:	4630      	mov	r0, r6
 80035be:	f000 fac8 	bl	8003b52 <memchr>
 80035c2:	b108      	cbz	r0, 80035c8 <_printf_i+0x1e4>
 80035c4:	1b80      	subs	r0, r0, r6
 80035c6:	6060      	str	r0, [r4, #4]
 80035c8:	6863      	ldr	r3, [r4, #4]
 80035ca:	6123      	str	r3, [r4, #16]
 80035cc:	2300      	movs	r3, #0
 80035ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035d2:	e7aa      	b.n	800352a <_printf_i+0x146>
 80035d4:	4632      	mov	r2, r6
 80035d6:	4649      	mov	r1, r9
 80035d8:	4640      	mov	r0, r8
 80035da:	6923      	ldr	r3, [r4, #16]
 80035dc:	47d0      	blx	sl
 80035de:	3001      	adds	r0, #1
 80035e0:	d0ad      	beq.n	800353e <_printf_i+0x15a>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	079b      	lsls	r3, r3, #30
 80035e6:	d413      	bmi.n	8003610 <_printf_i+0x22c>
 80035e8:	68e0      	ldr	r0, [r4, #12]
 80035ea:	9b03      	ldr	r3, [sp, #12]
 80035ec:	4298      	cmp	r0, r3
 80035ee:	bfb8      	it	lt
 80035f0:	4618      	movlt	r0, r3
 80035f2:	e7a6      	b.n	8003542 <_printf_i+0x15e>
 80035f4:	2301      	movs	r3, #1
 80035f6:	4632      	mov	r2, r6
 80035f8:	4649      	mov	r1, r9
 80035fa:	4640      	mov	r0, r8
 80035fc:	47d0      	blx	sl
 80035fe:	3001      	adds	r0, #1
 8003600:	d09d      	beq.n	800353e <_printf_i+0x15a>
 8003602:	3501      	adds	r5, #1
 8003604:	68e3      	ldr	r3, [r4, #12]
 8003606:	9903      	ldr	r1, [sp, #12]
 8003608:	1a5b      	subs	r3, r3, r1
 800360a:	42ab      	cmp	r3, r5
 800360c:	dcf2      	bgt.n	80035f4 <_printf_i+0x210>
 800360e:	e7eb      	b.n	80035e8 <_printf_i+0x204>
 8003610:	2500      	movs	r5, #0
 8003612:	f104 0619 	add.w	r6, r4, #25
 8003616:	e7f5      	b.n	8003604 <_printf_i+0x220>
 8003618:	08005c65 	.word	0x08005c65
 800361c:	08005c76 	.word	0x08005c76

08003620 <std>:
 8003620:	2300      	movs	r3, #0
 8003622:	b510      	push	{r4, lr}
 8003624:	4604      	mov	r4, r0
 8003626:	e9c0 3300 	strd	r3, r3, [r0]
 800362a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800362e:	6083      	str	r3, [r0, #8]
 8003630:	8181      	strh	r1, [r0, #12]
 8003632:	6643      	str	r3, [r0, #100]	@ 0x64
 8003634:	81c2      	strh	r2, [r0, #14]
 8003636:	6183      	str	r3, [r0, #24]
 8003638:	4619      	mov	r1, r3
 800363a:	2208      	movs	r2, #8
 800363c:	305c      	adds	r0, #92	@ 0x5c
 800363e:	f000 f9f9 	bl	8003a34 <memset>
 8003642:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <std+0x58>)
 8003644:	6224      	str	r4, [r4, #32]
 8003646:	6263      	str	r3, [r4, #36]	@ 0x24
 8003648:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <std+0x5c>)
 800364a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800364c:	4b0c      	ldr	r3, [pc, #48]	@ (8003680 <std+0x60>)
 800364e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003650:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <std+0x64>)
 8003652:	6323      	str	r3, [r4, #48]	@ 0x30
 8003654:	4b0c      	ldr	r3, [pc, #48]	@ (8003688 <std+0x68>)
 8003656:	429c      	cmp	r4, r3
 8003658:	d006      	beq.n	8003668 <std+0x48>
 800365a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800365e:	4294      	cmp	r4, r2
 8003660:	d002      	beq.n	8003668 <std+0x48>
 8003662:	33d0      	adds	r3, #208	@ 0xd0
 8003664:	429c      	cmp	r4, r3
 8003666:	d105      	bne.n	8003674 <std+0x54>
 8003668:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800366c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003670:	f000 ba6c 	b.w	8003b4c <__retarget_lock_init_recursive>
 8003674:	bd10      	pop	{r4, pc}
 8003676:	bf00      	nop
 8003678:	08003885 	.word	0x08003885
 800367c:	080038a7 	.word	0x080038a7
 8003680:	080038df 	.word	0x080038df
 8003684:	08003903 	.word	0x08003903
 8003688:	200003c0 	.word	0x200003c0

0800368c <stdio_exit_handler>:
 800368c:	4a02      	ldr	r2, [pc, #8]	@ (8003698 <stdio_exit_handler+0xc>)
 800368e:	4903      	ldr	r1, [pc, #12]	@ (800369c <stdio_exit_handler+0x10>)
 8003690:	4803      	ldr	r0, [pc, #12]	@ (80036a0 <stdio_exit_handler+0x14>)
 8003692:	f000 b869 	b.w	8003768 <_fwalk_sglue>
 8003696:	bf00      	nop
 8003698:	2000000c 	.word	0x2000000c
 800369c:	08005499 	.word	0x08005499
 80036a0:	2000001c 	.word	0x2000001c

080036a4 <cleanup_stdio>:
 80036a4:	6841      	ldr	r1, [r0, #4]
 80036a6:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <cleanup_stdio+0x34>)
 80036a8:	b510      	push	{r4, lr}
 80036aa:	4299      	cmp	r1, r3
 80036ac:	4604      	mov	r4, r0
 80036ae:	d001      	beq.n	80036b4 <cleanup_stdio+0x10>
 80036b0:	f001 fef2 	bl	8005498 <_fflush_r>
 80036b4:	68a1      	ldr	r1, [r4, #8]
 80036b6:	4b09      	ldr	r3, [pc, #36]	@ (80036dc <cleanup_stdio+0x38>)
 80036b8:	4299      	cmp	r1, r3
 80036ba:	d002      	beq.n	80036c2 <cleanup_stdio+0x1e>
 80036bc:	4620      	mov	r0, r4
 80036be:	f001 feeb 	bl	8005498 <_fflush_r>
 80036c2:	68e1      	ldr	r1, [r4, #12]
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <cleanup_stdio+0x3c>)
 80036c6:	4299      	cmp	r1, r3
 80036c8:	d004      	beq.n	80036d4 <cleanup_stdio+0x30>
 80036ca:	4620      	mov	r0, r4
 80036cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d0:	f001 bee2 	b.w	8005498 <_fflush_r>
 80036d4:	bd10      	pop	{r4, pc}
 80036d6:	bf00      	nop
 80036d8:	200003c0 	.word	0x200003c0
 80036dc:	20000428 	.word	0x20000428
 80036e0:	20000490 	.word	0x20000490

080036e4 <global_stdio_init.part.0>:
 80036e4:	b510      	push	{r4, lr}
 80036e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <global_stdio_init.part.0+0x30>)
 80036e8:	4c0b      	ldr	r4, [pc, #44]	@ (8003718 <global_stdio_init.part.0+0x34>)
 80036ea:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <global_stdio_init.part.0+0x38>)
 80036ec:	4620      	mov	r0, r4
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	2104      	movs	r1, #4
 80036f2:	2200      	movs	r2, #0
 80036f4:	f7ff ff94 	bl	8003620 <std>
 80036f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80036fc:	2201      	movs	r2, #1
 80036fe:	2109      	movs	r1, #9
 8003700:	f7ff ff8e 	bl	8003620 <std>
 8003704:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003708:	2202      	movs	r2, #2
 800370a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800370e:	2112      	movs	r1, #18
 8003710:	f7ff bf86 	b.w	8003620 <std>
 8003714:	200004f8 	.word	0x200004f8
 8003718:	200003c0 	.word	0x200003c0
 800371c:	0800368d 	.word	0x0800368d

08003720 <__sfp_lock_acquire>:
 8003720:	4801      	ldr	r0, [pc, #4]	@ (8003728 <__sfp_lock_acquire+0x8>)
 8003722:	f000 ba14 	b.w	8003b4e <__retarget_lock_acquire_recursive>
 8003726:	bf00      	nop
 8003728:	20000501 	.word	0x20000501

0800372c <__sfp_lock_release>:
 800372c:	4801      	ldr	r0, [pc, #4]	@ (8003734 <__sfp_lock_release+0x8>)
 800372e:	f000 ba0f 	b.w	8003b50 <__retarget_lock_release_recursive>
 8003732:	bf00      	nop
 8003734:	20000501 	.word	0x20000501

08003738 <__sinit>:
 8003738:	b510      	push	{r4, lr}
 800373a:	4604      	mov	r4, r0
 800373c:	f7ff fff0 	bl	8003720 <__sfp_lock_acquire>
 8003740:	6a23      	ldr	r3, [r4, #32]
 8003742:	b11b      	cbz	r3, 800374c <__sinit+0x14>
 8003744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003748:	f7ff bff0 	b.w	800372c <__sfp_lock_release>
 800374c:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <__sinit+0x28>)
 800374e:	6223      	str	r3, [r4, #32]
 8003750:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <__sinit+0x2c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f5      	bne.n	8003744 <__sinit+0xc>
 8003758:	f7ff ffc4 	bl	80036e4 <global_stdio_init.part.0>
 800375c:	e7f2      	b.n	8003744 <__sinit+0xc>
 800375e:	bf00      	nop
 8003760:	080036a5 	.word	0x080036a5
 8003764:	200004f8 	.word	0x200004f8

08003768 <_fwalk_sglue>:
 8003768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800376c:	4607      	mov	r7, r0
 800376e:	4688      	mov	r8, r1
 8003770:	4614      	mov	r4, r2
 8003772:	2600      	movs	r6, #0
 8003774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003778:	f1b9 0901 	subs.w	r9, r9, #1
 800377c:	d505      	bpl.n	800378a <_fwalk_sglue+0x22>
 800377e:	6824      	ldr	r4, [r4, #0]
 8003780:	2c00      	cmp	r4, #0
 8003782:	d1f7      	bne.n	8003774 <_fwalk_sglue+0xc>
 8003784:	4630      	mov	r0, r6
 8003786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800378a:	89ab      	ldrh	r3, [r5, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d907      	bls.n	80037a0 <_fwalk_sglue+0x38>
 8003790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003794:	3301      	adds	r3, #1
 8003796:	d003      	beq.n	80037a0 <_fwalk_sglue+0x38>
 8003798:	4629      	mov	r1, r5
 800379a:	4638      	mov	r0, r7
 800379c:	47c0      	blx	r8
 800379e:	4306      	orrs	r6, r0
 80037a0:	3568      	adds	r5, #104	@ 0x68
 80037a2:	e7e9      	b.n	8003778 <_fwalk_sglue+0x10>

080037a4 <iprintf>:
 80037a4:	b40f      	push	{r0, r1, r2, r3}
 80037a6:	b507      	push	{r0, r1, r2, lr}
 80037a8:	4906      	ldr	r1, [pc, #24]	@ (80037c4 <iprintf+0x20>)
 80037aa:	ab04      	add	r3, sp, #16
 80037ac:	6808      	ldr	r0, [r1, #0]
 80037ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b2:	6881      	ldr	r1, [r0, #8]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	f001 fcd7 	bl	8005168 <_vfiprintf_r>
 80037ba:	b003      	add	sp, #12
 80037bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80037c0:	b004      	add	sp, #16
 80037c2:	4770      	bx	lr
 80037c4:	20000018 	.word	0x20000018

080037c8 <_puts_r>:
 80037c8:	6a03      	ldr	r3, [r0, #32]
 80037ca:	b570      	push	{r4, r5, r6, lr}
 80037cc:	4605      	mov	r5, r0
 80037ce:	460e      	mov	r6, r1
 80037d0:	6884      	ldr	r4, [r0, #8]
 80037d2:	b90b      	cbnz	r3, 80037d8 <_puts_r+0x10>
 80037d4:	f7ff ffb0 	bl	8003738 <__sinit>
 80037d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037da:	07db      	lsls	r3, r3, #31
 80037dc:	d405      	bmi.n	80037ea <_puts_r+0x22>
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	0598      	lsls	r0, r3, #22
 80037e2:	d402      	bmi.n	80037ea <_puts_r+0x22>
 80037e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037e6:	f000 f9b2 	bl	8003b4e <__retarget_lock_acquire_recursive>
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	0719      	lsls	r1, r3, #28
 80037ee:	d502      	bpl.n	80037f6 <_puts_r+0x2e>
 80037f0:	6923      	ldr	r3, [r4, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d135      	bne.n	8003862 <_puts_r+0x9a>
 80037f6:	4621      	mov	r1, r4
 80037f8:	4628      	mov	r0, r5
 80037fa:	f000 f8c5 	bl	8003988 <__swsetup_r>
 80037fe:	b380      	cbz	r0, 8003862 <_puts_r+0x9a>
 8003800:	f04f 35ff 	mov.w	r5, #4294967295
 8003804:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003806:	07da      	lsls	r2, r3, #31
 8003808:	d405      	bmi.n	8003816 <_puts_r+0x4e>
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	059b      	lsls	r3, r3, #22
 800380e:	d402      	bmi.n	8003816 <_puts_r+0x4e>
 8003810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003812:	f000 f99d 	bl	8003b50 <__retarget_lock_release_recursive>
 8003816:	4628      	mov	r0, r5
 8003818:	bd70      	pop	{r4, r5, r6, pc}
 800381a:	2b00      	cmp	r3, #0
 800381c:	da04      	bge.n	8003828 <_puts_r+0x60>
 800381e:	69a2      	ldr	r2, [r4, #24]
 8003820:	429a      	cmp	r2, r3
 8003822:	dc17      	bgt.n	8003854 <_puts_r+0x8c>
 8003824:	290a      	cmp	r1, #10
 8003826:	d015      	beq.n	8003854 <_puts_r+0x8c>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	6022      	str	r2, [r4, #0]
 800382e:	7019      	strb	r1, [r3, #0]
 8003830:	68a3      	ldr	r3, [r4, #8]
 8003832:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003836:	3b01      	subs	r3, #1
 8003838:	60a3      	str	r3, [r4, #8]
 800383a:	2900      	cmp	r1, #0
 800383c:	d1ed      	bne.n	800381a <_puts_r+0x52>
 800383e:	2b00      	cmp	r3, #0
 8003840:	da11      	bge.n	8003866 <_puts_r+0x9e>
 8003842:	4622      	mov	r2, r4
 8003844:	210a      	movs	r1, #10
 8003846:	4628      	mov	r0, r5
 8003848:	f000 f85f 	bl	800390a <__swbuf_r>
 800384c:	3001      	adds	r0, #1
 800384e:	d0d7      	beq.n	8003800 <_puts_r+0x38>
 8003850:	250a      	movs	r5, #10
 8003852:	e7d7      	b.n	8003804 <_puts_r+0x3c>
 8003854:	4622      	mov	r2, r4
 8003856:	4628      	mov	r0, r5
 8003858:	f000 f857 	bl	800390a <__swbuf_r>
 800385c:	3001      	adds	r0, #1
 800385e:	d1e7      	bne.n	8003830 <_puts_r+0x68>
 8003860:	e7ce      	b.n	8003800 <_puts_r+0x38>
 8003862:	3e01      	subs	r6, #1
 8003864:	e7e4      	b.n	8003830 <_puts_r+0x68>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	6022      	str	r2, [r4, #0]
 800386c:	220a      	movs	r2, #10
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e7ee      	b.n	8003850 <_puts_r+0x88>
	...

08003874 <puts>:
 8003874:	4b02      	ldr	r3, [pc, #8]	@ (8003880 <puts+0xc>)
 8003876:	4601      	mov	r1, r0
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	f7ff bfa5 	b.w	80037c8 <_puts_r>
 800387e:	bf00      	nop
 8003880:	20000018 	.word	0x20000018

08003884 <__sread>:
 8003884:	b510      	push	{r4, lr}
 8003886:	460c      	mov	r4, r1
 8003888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800388c:	f000 f910 	bl	8003ab0 <_read_r>
 8003890:	2800      	cmp	r0, #0
 8003892:	bfab      	itete	ge
 8003894:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003896:	89a3      	ldrhlt	r3, [r4, #12]
 8003898:	181b      	addge	r3, r3, r0
 800389a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800389e:	bfac      	ite	ge
 80038a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80038a2:	81a3      	strhlt	r3, [r4, #12]
 80038a4:	bd10      	pop	{r4, pc}

080038a6 <__swrite>:
 80038a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038aa:	461f      	mov	r7, r3
 80038ac:	898b      	ldrh	r3, [r1, #12]
 80038ae:	4605      	mov	r5, r0
 80038b0:	05db      	lsls	r3, r3, #23
 80038b2:	460c      	mov	r4, r1
 80038b4:	4616      	mov	r6, r2
 80038b6:	d505      	bpl.n	80038c4 <__swrite+0x1e>
 80038b8:	2302      	movs	r3, #2
 80038ba:	2200      	movs	r2, #0
 80038bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c0:	f000 f8e4 	bl	8003a8c <_lseek_r>
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	4632      	mov	r2, r6
 80038c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038cc:	81a3      	strh	r3, [r4, #12]
 80038ce:	4628      	mov	r0, r5
 80038d0:	463b      	mov	r3, r7
 80038d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038da:	f000 b8fb 	b.w	8003ad4 <_write_r>

080038de <__sseek>:
 80038de:	b510      	push	{r4, lr}
 80038e0:	460c      	mov	r4, r1
 80038e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e6:	f000 f8d1 	bl	8003a8c <_lseek_r>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	bf15      	itete	ne
 80038f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038fa:	81a3      	strheq	r3, [r4, #12]
 80038fc:	bf18      	it	ne
 80038fe:	81a3      	strhne	r3, [r4, #12]
 8003900:	bd10      	pop	{r4, pc}

08003902 <__sclose>:
 8003902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003906:	f000 b8b1 	b.w	8003a6c <_close_r>

0800390a <__swbuf_r>:
 800390a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390c:	460e      	mov	r6, r1
 800390e:	4614      	mov	r4, r2
 8003910:	4605      	mov	r5, r0
 8003912:	b118      	cbz	r0, 800391c <__swbuf_r+0x12>
 8003914:	6a03      	ldr	r3, [r0, #32]
 8003916:	b90b      	cbnz	r3, 800391c <__swbuf_r+0x12>
 8003918:	f7ff ff0e 	bl	8003738 <__sinit>
 800391c:	69a3      	ldr	r3, [r4, #24]
 800391e:	60a3      	str	r3, [r4, #8]
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	071a      	lsls	r2, r3, #28
 8003924:	d501      	bpl.n	800392a <__swbuf_r+0x20>
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	b943      	cbnz	r3, 800393c <__swbuf_r+0x32>
 800392a:	4621      	mov	r1, r4
 800392c:	4628      	mov	r0, r5
 800392e:	f000 f82b 	bl	8003988 <__swsetup_r>
 8003932:	b118      	cbz	r0, 800393c <__swbuf_r+0x32>
 8003934:	f04f 37ff 	mov.w	r7, #4294967295
 8003938:	4638      	mov	r0, r7
 800393a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	6922      	ldr	r2, [r4, #16]
 8003940:	b2f6      	uxtb	r6, r6
 8003942:	1a98      	subs	r0, r3, r2
 8003944:	6963      	ldr	r3, [r4, #20]
 8003946:	4637      	mov	r7, r6
 8003948:	4283      	cmp	r3, r0
 800394a:	dc05      	bgt.n	8003958 <__swbuf_r+0x4e>
 800394c:	4621      	mov	r1, r4
 800394e:	4628      	mov	r0, r5
 8003950:	f001 fda2 	bl	8005498 <_fflush_r>
 8003954:	2800      	cmp	r0, #0
 8003956:	d1ed      	bne.n	8003934 <__swbuf_r+0x2a>
 8003958:	68a3      	ldr	r3, [r4, #8]
 800395a:	3b01      	subs	r3, #1
 800395c:	60a3      	str	r3, [r4, #8]
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	6022      	str	r2, [r4, #0]
 8003964:	701e      	strb	r6, [r3, #0]
 8003966:	6962      	ldr	r2, [r4, #20]
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	429a      	cmp	r2, r3
 800396c:	d004      	beq.n	8003978 <__swbuf_r+0x6e>
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	07db      	lsls	r3, r3, #31
 8003972:	d5e1      	bpl.n	8003938 <__swbuf_r+0x2e>
 8003974:	2e0a      	cmp	r6, #10
 8003976:	d1df      	bne.n	8003938 <__swbuf_r+0x2e>
 8003978:	4621      	mov	r1, r4
 800397a:	4628      	mov	r0, r5
 800397c:	f001 fd8c 	bl	8005498 <_fflush_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	d0d9      	beq.n	8003938 <__swbuf_r+0x2e>
 8003984:	e7d6      	b.n	8003934 <__swbuf_r+0x2a>
	...

08003988 <__swsetup_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	4b29      	ldr	r3, [pc, #164]	@ (8003a30 <__swsetup_r+0xa8>)
 800398c:	4605      	mov	r5, r0
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	460c      	mov	r4, r1
 8003992:	b118      	cbz	r0, 800399c <__swsetup_r+0x14>
 8003994:	6a03      	ldr	r3, [r0, #32]
 8003996:	b90b      	cbnz	r3, 800399c <__swsetup_r+0x14>
 8003998:	f7ff fece 	bl	8003738 <__sinit>
 800399c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039a0:	0719      	lsls	r1, r3, #28
 80039a2:	d422      	bmi.n	80039ea <__swsetup_r+0x62>
 80039a4:	06da      	lsls	r2, r3, #27
 80039a6:	d407      	bmi.n	80039b8 <__swsetup_r+0x30>
 80039a8:	2209      	movs	r2, #9
 80039aa:	602a      	str	r2, [r5, #0]
 80039ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	e033      	b.n	8003a20 <__swsetup_r+0x98>
 80039b8:	0758      	lsls	r0, r3, #29
 80039ba:	d512      	bpl.n	80039e2 <__swsetup_r+0x5a>
 80039bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039be:	b141      	cbz	r1, 80039d2 <__swsetup_r+0x4a>
 80039c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039c4:	4299      	cmp	r1, r3
 80039c6:	d002      	beq.n	80039ce <__swsetup_r+0x46>
 80039c8:	4628      	mov	r0, r5
 80039ca:	f000 ff2d 	bl	8004828 <_free_r>
 80039ce:	2300      	movs	r3, #0
 80039d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80039d8:	81a3      	strh	r3, [r4, #12]
 80039da:	2300      	movs	r3, #0
 80039dc:	6063      	str	r3, [r4, #4]
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	f043 0308 	orr.w	r3, r3, #8
 80039e8:	81a3      	strh	r3, [r4, #12]
 80039ea:	6923      	ldr	r3, [r4, #16]
 80039ec:	b94b      	cbnz	r3, 8003a02 <__swsetup_r+0x7a>
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80039f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039f8:	d003      	beq.n	8003a02 <__swsetup_r+0x7a>
 80039fa:	4621      	mov	r1, r4
 80039fc:	4628      	mov	r0, r5
 80039fe:	f001 fd98 	bl	8005532 <__smakebuf_r>
 8003a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a06:	f013 0201 	ands.w	r2, r3, #1
 8003a0a:	d00a      	beq.n	8003a22 <__swsetup_r+0x9a>
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	60a2      	str	r2, [r4, #8]
 8003a10:	6962      	ldr	r2, [r4, #20]
 8003a12:	4252      	negs	r2, r2
 8003a14:	61a2      	str	r2, [r4, #24]
 8003a16:	6922      	ldr	r2, [r4, #16]
 8003a18:	b942      	cbnz	r2, 8003a2c <__swsetup_r+0xa4>
 8003a1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a1e:	d1c5      	bne.n	80039ac <__swsetup_r+0x24>
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
 8003a22:	0799      	lsls	r1, r3, #30
 8003a24:	bf58      	it	pl
 8003a26:	6962      	ldrpl	r2, [r4, #20]
 8003a28:	60a2      	str	r2, [r4, #8]
 8003a2a:	e7f4      	b.n	8003a16 <__swsetup_r+0x8e>
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e7f7      	b.n	8003a20 <__swsetup_r+0x98>
 8003a30:	20000018 	.word	0x20000018

08003a34 <memset>:
 8003a34:	4603      	mov	r3, r0
 8003a36:	4402      	add	r2, r0
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <memset+0xa>
 8003a3c:	4770      	bx	lr
 8003a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a42:	e7f9      	b.n	8003a38 <memset+0x4>

08003a44 <strcat>:
 8003a44:	4602      	mov	r2, r0
 8003a46:	b510      	push	{r4, lr}
 8003a48:	7814      	ldrb	r4, [r2, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	3201      	adds	r2, #1
 8003a4e:	2c00      	cmp	r4, #0
 8003a50:	d1fa      	bne.n	8003a48 <strcat+0x4>
 8003a52:	3b01      	subs	r3, #1
 8003a54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a5c:	2a00      	cmp	r2, #0
 8003a5e:	d1f9      	bne.n	8003a54 <strcat+0x10>
 8003a60:	bd10      	pop	{r4, pc}
	...

08003a64 <_localeconv_r>:
 8003a64:	4800      	ldr	r0, [pc, #0]	@ (8003a68 <_localeconv_r+0x4>)
 8003a66:	4770      	bx	lr
 8003a68:	20000158 	.word	0x20000158

08003a6c <_close_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	2300      	movs	r3, #0
 8003a70:	4d05      	ldr	r5, [pc, #20]	@ (8003a88 <_close_r+0x1c>)
 8003a72:	4604      	mov	r4, r0
 8003a74:	4608      	mov	r0, r1
 8003a76:	602b      	str	r3, [r5, #0]
 8003a78:	f7fd fd82 	bl	8001580 <_close>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d102      	bne.n	8003a86 <_close_r+0x1a>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	b103      	cbz	r3, 8003a86 <_close_r+0x1a>
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	200004fc 	.word	0x200004fc

08003a8c <_lseek_r>:
 8003a8c:	b538      	push	{r3, r4, r5, lr}
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	2200      	movs	r2, #0
 8003a96:	4d05      	ldr	r5, [pc, #20]	@ (8003aac <_lseek_r+0x20>)
 8003a98:	602a      	str	r2, [r5, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f7fd fd7a 	bl	8001594 <_lseek>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d102      	bne.n	8003aaa <_lseek_r+0x1e>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	b103      	cbz	r3, 8003aaa <_lseek_r+0x1e>
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
 8003aac:	200004fc 	.word	0x200004fc

08003ab0 <_read_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4d05      	ldr	r5, [pc, #20]	@ (8003ad0 <_read_r+0x20>)
 8003abc:	602a      	str	r2, [r5, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7fd fd50 	bl	8001564 <_read>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_read_r+0x1e>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_read_r+0x1e>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	200004fc 	.word	0x200004fc

08003ad4 <_write_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	2200      	movs	r2, #0
 8003ade:	4d05      	ldr	r5, [pc, #20]	@ (8003af4 <_write_r+0x20>)
 8003ae0:	602a      	str	r2, [r5, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f7fd fb44 	bl	8001170 <_write>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_write_r+0x1e>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_write_r+0x1e>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	200004fc 	.word	0x200004fc

08003af8 <__errno>:
 8003af8:	4b01      	ldr	r3, [pc, #4]	@ (8003b00 <__errno+0x8>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000018 	.word	0x20000018

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	2600      	movs	r6, #0
 8003b08:	4d0c      	ldr	r5, [pc, #48]	@ (8003b3c <__libc_init_array+0x38>)
 8003b0a:	4c0d      	ldr	r4, [pc, #52]	@ (8003b40 <__libc_init_array+0x3c>)
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	f001 fec4 	bl	80058a0 <_init>
 8003b18:	2600      	movs	r6, #0
 8003b1a:	4d0a      	ldr	r5, [pc, #40]	@ (8003b44 <__libc_init_array+0x40>)
 8003b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8003b48 <__libc_init_array+0x44>)
 8003b1e:	1b64      	subs	r4, r4, r5
 8003b20:	10a4      	asrs	r4, r4, #2
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	08006004 	.word	0x08006004
 8003b40:	08006004 	.word	0x08006004
 8003b44:	08006004 	.word	0x08006004
 8003b48:	08006008 	.word	0x08006008

08003b4c <__retarget_lock_init_recursive>:
 8003b4c:	4770      	bx	lr

08003b4e <__retarget_lock_acquire_recursive>:
 8003b4e:	4770      	bx	lr

08003b50 <__retarget_lock_release_recursive>:
 8003b50:	4770      	bx	lr

08003b52 <memchr>:
 8003b52:	4603      	mov	r3, r0
 8003b54:	b510      	push	{r4, lr}
 8003b56:	b2c9      	uxtb	r1, r1
 8003b58:	4402      	add	r2, r0
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	d101      	bne.n	8003b64 <memchr+0x12>
 8003b60:	2000      	movs	r0, #0
 8003b62:	e003      	b.n	8003b6c <memchr+0x1a>
 8003b64:	7804      	ldrb	r4, [r0, #0]
 8003b66:	3301      	adds	r3, #1
 8003b68:	428c      	cmp	r4, r1
 8003b6a:	d1f6      	bne.n	8003b5a <memchr+0x8>
 8003b6c:	bd10      	pop	{r4, pc}

08003b6e <quorem>:
 8003b6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b72:	6903      	ldr	r3, [r0, #16]
 8003b74:	690c      	ldr	r4, [r1, #16]
 8003b76:	4607      	mov	r7, r0
 8003b78:	42a3      	cmp	r3, r4
 8003b7a:	db7e      	blt.n	8003c7a <quorem+0x10c>
 8003b7c:	3c01      	subs	r4, #1
 8003b7e:	00a3      	lsls	r3, r4, #2
 8003b80:	f100 0514 	add.w	r5, r0, #20
 8003b84:	f101 0814 	add.w	r8, r1, #20
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ba4:	d32e      	bcc.n	8003c04 <quorem+0x96>
 8003ba6:	f04f 0a00 	mov.w	sl, #0
 8003baa:	46c4      	mov	ip, r8
 8003bac:	46ae      	mov	lr, r5
 8003bae:	46d3      	mov	fp, sl
 8003bb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003bb4:	b298      	uxth	r0, r3
 8003bb6:	fb06 a000 	mla	r0, r6, r0, sl
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	0c02      	lsrs	r2, r0, #16
 8003bbe:	fb06 2303 	mla	r3, r6, r3, r2
 8003bc2:	f8de 2000 	ldr.w	r2, [lr]
 8003bc6:	b280      	uxth	r0, r0
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	1a12      	subs	r2, r2, r0
 8003bcc:	445a      	add	r2, fp
 8003bce:	f8de 0000 	ldr.w	r0, [lr]
 8003bd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003bdc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003be0:	b292      	uxth	r2, r2
 8003be2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003be6:	45e1      	cmp	r9, ip
 8003be8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003bec:	f84e 2b04 	str.w	r2, [lr], #4
 8003bf0:	d2de      	bcs.n	8003bb0 <quorem+0x42>
 8003bf2:	9b00      	ldr	r3, [sp, #0]
 8003bf4:	58eb      	ldr	r3, [r5, r3]
 8003bf6:	b92b      	cbnz	r3, 8003c04 <quorem+0x96>
 8003bf8:	9b01      	ldr	r3, [sp, #4]
 8003bfa:	3b04      	subs	r3, #4
 8003bfc:	429d      	cmp	r5, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	d32f      	bcc.n	8003c62 <quorem+0xf4>
 8003c02:	613c      	str	r4, [r7, #16]
 8003c04:	4638      	mov	r0, r7
 8003c06:	f001 f97f 	bl	8004f08 <__mcmp>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	db25      	blt.n	8003c5a <quorem+0xec>
 8003c0e:	4629      	mov	r1, r5
 8003c10:	2000      	movs	r0, #0
 8003c12:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c16:	f8d1 c000 	ldr.w	ip, [r1]
 8003c1a:	fa1f fe82 	uxth.w	lr, r2
 8003c1e:	fa1f f38c 	uxth.w	r3, ip
 8003c22:	eba3 030e 	sub.w	r3, r3, lr
 8003c26:	4403      	add	r3, r0
 8003c28:	0c12      	lsrs	r2, r2, #16
 8003c2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003c2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c38:	45c1      	cmp	r9, r8
 8003c3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c3e:	f841 3b04 	str.w	r3, [r1], #4
 8003c42:	d2e6      	bcs.n	8003c12 <quorem+0xa4>
 8003c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c4c:	b922      	cbnz	r2, 8003c58 <quorem+0xea>
 8003c4e:	3b04      	subs	r3, #4
 8003c50:	429d      	cmp	r5, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	d30b      	bcc.n	8003c6e <quorem+0x100>
 8003c56:	613c      	str	r4, [r7, #16]
 8003c58:	3601      	adds	r6, #1
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	b003      	add	sp, #12
 8003c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	3b04      	subs	r3, #4
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	d1cb      	bne.n	8003c02 <quorem+0x94>
 8003c6a:	3c01      	subs	r4, #1
 8003c6c:	e7c6      	b.n	8003bfc <quorem+0x8e>
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	3b04      	subs	r3, #4
 8003c72:	2a00      	cmp	r2, #0
 8003c74:	d1ef      	bne.n	8003c56 <quorem+0xe8>
 8003c76:	3c01      	subs	r4, #1
 8003c78:	e7ea      	b.n	8003c50 <quorem+0xe2>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	e7ee      	b.n	8003c5c <quorem+0xee>
	...

08003c80 <_dtoa_r>:
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	4614      	mov	r4, r2
 8003c86:	461d      	mov	r5, r3
 8003c88:	69c7      	ldr	r7, [r0, #28]
 8003c8a:	b097      	sub	sp, #92	@ 0x5c
 8003c8c:	4681      	mov	r9, r0
 8003c8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003c92:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003c94:	b97f      	cbnz	r7, 8003cb6 <_dtoa_r+0x36>
 8003c96:	2010      	movs	r0, #16
 8003c98:	f000 fe0e 	bl	80048b8 <malloc>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	f8c9 001c 	str.w	r0, [r9, #28]
 8003ca2:	b920      	cbnz	r0, 8003cae <_dtoa_r+0x2e>
 8003ca4:	21ef      	movs	r1, #239	@ 0xef
 8003ca6:	4bac      	ldr	r3, [pc, #688]	@ (8003f58 <_dtoa_r+0x2d8>)
 8003ca8:	48ac      	ldr	r0, [pc, #688]	@ (8003f5c <_dtoa_r+0x2dc>)
 8003caa:	f001 fcbf 	bl	800562c <__assert_func>
 8003cae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003cb2:	6007      	str	r7, [r0, #0]
 8003cb4:	60c7      	str	r7, [r0, #12]
 8003cb6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003cba:	6819      	ldr	r1, [r3, #0]
 8003cbc:	b159      	cbz	r1, 8003cd6 <_dtoa_r+0x56>
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4093      	lsls	r3, r2
 8003cc4:	604a      	str	r2, [r1, #4]
 8003cc6:	608b      	str	r3, [r1, #8]
 8003cc8:	4648      	mov	r0, r9
 8003cca:	f000 feeb 	bl	8004aa4 <_Bfree>
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	1e2b      	subs	r3, r5, #0
 8003cd8:	bfaf      	iteee	ge
 8003cda:	2300      	movge	r3, #0
 8003cdc:	2201      	movlt	r2, #1
 8003cde:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003ce2:	9307      	strlt	r3, [sp, #28]
 8003ce4:	bfa8      	it	ge
 8003ce6:	6033      	strge	r3, [r6, #0]
 8003ce8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003cec:	4b9c      	ldr	r3, [pc, #624]	@ (8003f60 <_dtoa_r+0x2e0>)
 8003cee:	bfb8      	it	lt
 8003cf0:	6032      	strlt	r2, [r6, #0]
 8003cf2:	ea33 0308 	bics.w	r3, r3, r8
 8003cf6:	d112      	bne.n	8003d1e <_dtoa_r+0x9e>
 8003cf8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003cfc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003d04:	4323      	orrs	r3, r4
 8003d06:	f000 855e 	beq.w	80047c6 <_dtoa_r+0xb46>
 8003d0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003d0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003f64 <_dtoa_r+0x2e4>
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 8560 	beq.w	80047d6 <_dtoa_r+0xb56>
 8003d16:	f10a 0303 	add.w	r3, sl, #3
 8003d1a:	f000 bd5a 	b.w	80047d2 <_dtoa_r+0xb52>
 8003d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d22:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f7fc fe3b 	bl	80009a8 <__aeabi_dcmpeq>
 8003d32:	4607      	mov	r7, r0
 8003d34:	b158      	cbz	r0, 8003d4e <_dtoa_r+0xce>
 8003d36:	2301      	movs	r3, #1
 8003d38:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003d3e:	b113      	cbz	r3, 8003d46 <_dtoa_r+0xc6>
 8003d40:	4b89      	ldr	r3, [pc, #548]	@ (8003f68 <_dtoa_r+0x2e8>)
 8003d42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003f6c <_dtoa_r+0x2ec>
 8003d4a:	f000 bd44 	b.w	80047d6 <_dtoa_r+0xb56>
 8003d4e:	ab14      	add	r3, sp, #80	@ 0x50
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	ab15      	add	r3, sp, #84	@ 0x54
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	4648      	mov	r0, r9
 8003d58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003d5c:	f001 f984 	bl	8005068 <__d2b>
 8003d60:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003d64:	9003      	str	r0, [sp, #12]
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	d078      	beq.n	8003e5c <_dtoa_r+0x1dc>
 8003d6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d70:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d78:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003d7c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003d80:	9712      	str	r7, [sp, #72]	@ 0x48
 8003d82:	4619      	mov	r1, r3
 8003d84:	2200      	movs	r2, #0
 8003d86:	4b7a      	ldr	r3, [pc, #488]	@ (8003f70 <_dtoa_r+0x2f0>)
 8003d88:	f7fc f9ee 	bl	8000168 <__aeabi_dsub>
 8003d8c:	a36c      	add	r3, pc, #432	@ (adr r3, 8003f40 <_dtoa_r+0x2c0>)
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f7fc fba1 	bl	80004d8 <__aeabi_dmul>
 8003d96:	a36c      	add	r3, pc, #432	@ (adr r3, 8003f48 <_dtoa_r+0x2c8>)
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f7fc f9e6 	bl	800016c <__adddf3>
 8003da0:	4604      	mov	r4, r0
 8003da2:	4630      	mov	r0, r6
 8003da4:	460d      	mov	r5, r1
 8003da6:	f7fc fb2d 	bl	8000404 <__aeabi_i2d>
 8003daa:	a369      	add	r3, pc, #420	@ (adr r3, 8003f50 <_dtoa_r+0x2d0>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	f7fc fb92 	bl	80004d8 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4620      	mov	r0, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f7fc f9d6 	bl	800016c <__adddf3>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	460d      	mov	r5, r1
 8003dc4:	f7fc fe38 	bl	8000a38 <__aeabi_d2iz>
 8003dc8:	2200      	movs	r2, #0
 8003dca:	4607      	mov	r7, r0
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4620      	mov	r0, r4
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f7fc fdf3 	bl	80009bc <__aeabi_dcmplt>
 8003dd6:	b140      	cbz	r0, 8003dea <_dtoa_r+0x16a>
 8003dd8:	4638      	mov	r0, r7
 8003dda:	f7fc fb13 	bl	8000404 <__aeabi_i2d>
 8003dde:	4622      	mov	r2, r4
 8003de0:	462b      	mov	r3, r5
 8003de2:	f7fc fde1 	bl	80009a8 <__aeabi_dcmpeq>
 8003de6:	b900      	cbnz	r0, 8003dea <_dtoa_r+0x16a>
 8003de8:	3f01      	subs	r7, #1
 8003dea:	2f16      	cmp	r7, #22
 8003dec:	d854      	bhi.n	8003e98 <_dtoa_r+0x218>
 8003dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003df2:	4b60      	ldr	r3, [pc, #384]	@ (8003f74 <_dtoa_r+0x2f4>)
 8003df4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc fdde 	bl	80009bc <__aeabi_dcmplt>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d04b      	beq.n	8003e9c <_dtoa_r+0x21c>
 8003e04:	2300      	movs	r3, #0
 8003e06:	3f01      	subs	r7, #1
 8003e08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003e0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e0c:	1b9b      	subs	r3, r3, r6
 8003e0e:	1e5a      	subs	r2, r3, #1
 8003e10:	bf49      	itett	mi
 8003e12:	f1c3 0301 	rsbmi	r3, r3, #1
 8003e16:	2300      	movpl	r3, #0
 8003e18:	9304      	strmi	r3, [sp, #16]
 8003e1a:	2300      	movmi	r3, #0
 8003e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e1e:	bf54      	ite	pl
 8003e20:	9304      	strpl	r3, [sp, #16]
 8003e22:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003e24:	2f00      	cmp	r7, #0
 8003e26:	db3b      	blt.n	8003ea0 <_dtoa_r+0x220>
 8003e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e2a:	970e      	str	r7, [sp, #56]	@ 0x38
 8003e2c:	443b      	add	r3, r7
 8003e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e30:	2300      	movs	r3, #0
 8003e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	d865      	bhi.n	8003f06 <_dtoa_r+0x286>
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	bfc4      	itt	gt
 8003e3e:	3b04      	subgt	r3, #4
 8003e40:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003e42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003e44:	bfc8      	it	gt
 8003e46:	2400      	movgt	r4, #0
 8003e48:	f1a3 0302 	sub.w	r3, r3, #2
 8003e4c:	bfd8      	it	le
 8003e4e:	2401      	movle	r4, #1
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d864      	bhi.n	8003f1e <_dtoa_r+0x29e>
 8003e54:	e8df f003 	tbb	[pc, r3]
 8003e58:	2c385553 	.word	0x2c385553
 8003e5c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003e60:	441e      	add	r6, r3
 8003e62:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	bfc1      	itttt	gt
 8003e6a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003e6e:	fa08 f803 	lslgt.w	r8, r8, r3
 8003e72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003e76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003e7a:	bfd6      	itet	le
 8003e7c:	f1c3 0320 	rsble	r3, r3, #32
 8003e80:	ea48 0003 	orrgt.w	r0, r8, r3
 8003e84:	fa04 f003 	lslle.w	r0, r4, r3
 8003e88:	f7fc faac 	bl	80003e4 <__aeabi_ui2d>
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003e92:	3e01      	subs	r6, #1
 8003e94:	9212      	str	r2, [sp, #72]	@ 0x48
 8003e96:	e774      	b.n	8003d82 <_dtoa_r+0x102>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e7b5      	b.n	8003e08 <_dtoa_r+0x188>
 8003e9c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003e9e:	e7b4      	b.n	8003e0a <_dtoa_r+0x18a>
 8003ea0:	9b04      	ldr	r3, [sp, #16]
 8003ea2:	1bdb      	subs	r3, r3, r7
 8003ea4:	9304      	str	r3, [sp, #16]
 8003ea6:	427b      	negs	r3, r7
 8003ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8003eaa:	2300      	movs	r3, #0
 8003eac:	930e      	str	r3, [sp, #56]	@ 0x38
 8003eae:	e7c1      	b.n	8003e34 <_dtoa_r+0x1b4>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003eb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003eb6:	eb07 0b03 	add.w	fp, r7, r3
 8003eba:	f10b 0301 	add.w	r3, fp, #1
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	9308      	str	r3, [sp, #32]
 8003ec2:	bfb8      	it	lt
 8003ec4:	2301      	movlt	r3, #1
 8003ec6:	e006      	b.n	8003ed6 <_dtoa_r+0x256>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ecc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	dd28      	ble.n	8003f24 <_dtoa_r+0x2a4>
 8003ed2:	469b      	mov	fp, r3
 8003ed4:	9308      	str	r3, [sp, #32]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2204      	movs	r2, #4
 8003eda:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003ede:	f102 0514 	add.w	r5, r2, #20
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	d926      	bls.n	8003f34 <_dtoa_r+0x2b4>
 8003ee6:	6041      	str	r1, [r0, #4]
 8003ee8:	4648      	mov	r0, r9
 8003eea:	f000 fd9b 	bl	8004a24 <_Balloc>
 8003eee:	4682      	mov	sl, r0
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d143      	bne.n	8003f7c <_dtoa_r+0x2fc>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	f240 11af 	movw	r1, #431	@ 0x1af
 8003efa:	4b1f      	ldr	r3, [pc, #124]	@ (8003f78 <_dtoa_r+0x2f8>)
 8003efc:	e6d4      	b.n	8003ca8 <_dtoa_r+0x28>
 8003efe:	2300      	movs	r3, #0
 8003f00:	e7e3      	b.n	8003eca <_dtoa_r+0x24a>
 8003f02:	2300      	movs	r3, #0
 8003f04:	e7d5      	b.n	8003eb2 <_dtoa_r+0x232>
 8003f06:	2401      	movs	r4, #1
 8003f08:	2300      	movs	r3, #0
 8003f0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003f0c:	9320      	str	r3, [sp, #128]	@ 0x80
 8003f0e:	f04f 3bff 	mov.w	fp, #4294967295
 8003f12:	2200      	movs	r2, #0
 8003f14:	2312      	movs	r3, #18
 8003f16:	f8cd b020 	str.w	fp, [sp, #32]
 8003f1a:	9221      	str	r2, [sp, #132]	@ 0x84
 8003f1c:	e7db      	b.n	8003ed6 <_dtoa_r+0x256>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f22:	e7f4      	b.n	8003f0e <_dtoa_r+0x28e>
 8003f24:	f04f 0b01 	mov.w	fp, #1
 8003f28:	465b      	mov	r3, fp
 8003f2a:	f8cd b020 	str.w	fp, [sp, #32]
 8003f2e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003f32:	e7d0      	b.n	8003ed6 <_dtoa_r+0x256>
 8003f34:	3101      	adds	r1, #1
 8003f36:	0052      	lsls	r2, r2, #1
 8003f38:	e7d1      	b.n	8003ede <_dtoa_r+0x25e>
 8003f3a:	bf00      	nop
 8003f3c:	f3af 8000 	nop.w
 8003f40:	636f4361 	.word	0x636f4361
 8003f44:	3fd287a7 	.word	0x3fd287a7
 8003f48:	8b60c8b3 	.word	0x8b60c8b3
 8003f4c:	3fc68a28 	.word	0x3fc68a28
 8003f50:	509f79fb 	.word	0x509f79fb
 8003f54:	3fd34413 	.word	0x3fd34413
 8003f58:	08005c94 	.word	0x08005c94
 8003f5c:	08005cab 	.word	0x08005cab
 8003f60:	7ff00000 	.word	0x7ff00000
 8003f64:	08005c90 	.word	0x08005c90
 8003f68:	08005c64 	.word	0x08005c64
 8003f6c:	08005c63 	.word	0x08005c63
 8003f70:	3ff80000 	.word	0x3ff80000
 8003f74:	08005e28 	.word	0x08005e28
 8003f78:	08005d03 	.word	0x08005d03
 8003f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003f80:	6018      	str	r0, [r3, #0]
 8003f82:	9b08      	ldr	r3, [sp, #32]
 8003f84:	2b0e      	cmp	r3, #14
 8003f86:	f200 80a1 	bhi.w	80040cc <_dtoa_r+0x44c>
 8003f8a:	2c00      	cmp	r4, #0
 8003f8c:	f000 809e 	beq.w	80040cc <_dtoa_r+0x44c>
 8003f90:	2f00      	cmp	r7, #0
 8003f92:	dd33      	ble.n	8003ffc <_dtoa_r+0x37c>
 8003f94:	4b9c      	ldr	r3, [pc, #624]	@ (8004208 <_dtoa_r+0x588>)
 8003f96:	f007 020f 	and.w	r2, r7, #15
 8003f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f9e:	05f8      	lsls	r0, r7, #23
 8003fa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fa4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003fac:	d516      	bpl.n	8003fdc <_dtoa_r+0x35c>
 8003fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003fb2:	4b96      	ldr	r3, [pc, #600]	@ (800420c <_dtoa_r+0x58c>)
 8003fb4:	2603      	movs	r6, #3
 8003fb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fba:	f7fc fbb7 	bl	800072c <__aeabi_ddiv>
 8003fbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003fc2:	f004 040f 	and.w	r4, r4, #15
 8003fc6:	4d91      	ldr	r5, [pc, #580]	@ (800420c <_dtoa_r+0x58c>)
 8003fc8:	b954      	cbnz	r4, 8003fe0 <_dtoa_r+0x360>
 8003fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fd2:	f7fc fbab 	bl	800072c <__aeabi_ddiv>
 8003fd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003fda:	e028      	b.n	800402e <_dtoa_r+0x3ae>
 8003fdc:	2602      	movs	r6, #2
 8003fde:	e7f2      	b.n	8003fc6 <_dtoa_r+0x346>
 8003fe0:	07e1      	lsls	r1, r4, #31
 8003fe2:	d508      	bpl.n	8003ff6 <_dtoa_r+0x376>
 8003fe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003fec:	f7fc fa74 	bl	80004d8 <__aeabi_dmul>
 8003ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003ff4:	3601      	adds	r6, #1
 8003ff6:	1064      	asrs	r4, r4, #1
 8003ff8:	3508      	adds	r5, #8
 8003ffa:	e7e5      	b.n	8003fc8 <_dtoa_r+0x348>
 8003ffc:	f000 80af 	beq.w	800415e <_dtoa_r+0x4de>
 8004000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004004:	427c      	negs	r4, r7
 8004006:	4b80      	ldr	r3, [pc, #512]	@ (8004208 <_dtoa_r+0x588>)
 8004008:	f004 020f 	and.w	r2, r4, #15
 800400c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f7fc fa60 	bl	80004d8 <__aeabi_dmul>
 8004018:	2602      	movs	r6, #2
 800401a:	2300      	movs	r3, #0
 800401c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004020:	4d7a      	ldr	r5, [pc, #488]	@ (800420c <_dtoa_r+0x58c>)
 8004022:	1124      	asrs	r4, r4, #4
 8004024:	2c00      	cmp	r4, #0
 8004026:	f040 808f 	bne.w	8004148 <_dtoa_r+0x4c8>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1d3      	bne.n	8003fd6 <_dtoa_r+0x356>
 800402e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8094 	beq.w	8004162 <_dtoa_r+0x4e2>
 800403a:	2200      	movs	r2, #0
 800403c:	4620      	mov	r0, r4
 800403e:	4629      	mov	r1, r5
 8004040:	4b73      	ldr	r3, [pc, #460]	@ (8004210 <_dtoa_r+0x590>)
 8004042:	f7fc fcbb 	bl	80009bc <__aeabi_dcmplt>
 8004046:	2800      	cmp	r0, #0
 8004048:	f000 808b 	beq.w	8004162 <_dtoa_r+0x4e2>
 800404c:	9b08      	ldr	r3, [sp, #32]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8087 	beq.w	8004162 <_dtoa_r+0x4e2>
 8004054:	f1bb 0f00 	cmp.w	fp, #0
 8004058:	dd34      	ble.n	80040c4 <_dtoa_r+0x444>
 800405a:	4620      	mov	r0, r4
 800405c:	2200      	movs	r2, #0
 800405e:	4629      	mov	r1, r5
 8004060:	4b6c      	ldr	r3, [pc, #432]	@ (8004214 <_dtoa_r+0x594>)
 8004062:	f7fc fa39 	bl	80004d8 <__aeabi_dmul>
 8004066:	465c      	mov	r4, fp
 8004068:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800406c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004070:	3601      	adds	r6, #1
 8004072:	4630      	mov	r0, r6
 8004074:	f7fc f9c6 	bl	8000404 <__aeabi_i2d>
 8004078:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800407c:	f7fc fa2c 	bl	80004d8 <__aeabi_dmul>
 8004080:	2200      	movs	r2, #0
 8004082:	4b65      	ldr	r3, [pc, #404]	@ (8004218 <_dtoa_r+0x598>)
 8004084:	f7fc f872 	bl	800016c <__adddf3>
 8004088:	4605      	mov	r5, r0
 800408a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800408e:	2c00      	cmp	r4, #0
 8004090:	d16a      	bne.n	8004168 <_dtoa_r+0x4e8>
 8004092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004096:	2200      	movs	r2, #0
 8004098:	4b60      	ldr	r3, [pc, #384]	@ (800421c <_dtoa_r+0x59c>)
 800409a:	f7fc f865 	bl	8000168 <__aeabi_dsub>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80040a6:	462a      	mov	r2, r5
 80040a8:	4633      	mov	r3, r6
 80040aa:	f7fc fca5 	bl	80009f8 <__aeabi_dcmpgt>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	f040 8298 	bne.w	80045e4 <_dtoa_r+0x964>
 80040b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040b8:	462a      	mov	r2, r5
 80040ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80040be:	f7fc fc7d 	bl	80009bc <__aeabi_dcmplt>
 80040c2:	bb38      	cbnz	r0, 8004114 <_dtoa_r+0x494>
 80040c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80040c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80040cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f2c0 8157 	blt.w	8004382 <_dtoa_r+0x702>
 80040d4:	2f0e      	cmp	r7, #14
 80040d6:	f300 8154 	bgt.w	8004382 <_dtoa_r+0x702>
 80040da:	4b4b      	ldr	r3, [pc, #300]	@ (8004208 <_dtoa_r+0x588>)
 80040dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80040e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f280 80e5 	bge.w	80042ba <_dtoa_r+0x63a>
 80040f0:	9b08      	ldr	r3, [sp, #32]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f300 80e1 	bgt.w	80042ba <_dtoa_r+0x63a>
 80040f8:	d10c      	bne.n	8004114 <_dtoa_r+0x494>
 80040fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040fe:	2200      	movs	r2, #0
 8004100:	4b46      	ldr	r3, [pc, #280]	@ (800421c <_dtoa_r+0x59c>)
 8004102:	f7fc f9e9 	bl	80004d8 <__aeabi_dmul>
 8004106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800410a:	f7fc fc6b 	bl	80009e4 <__aeabi_dcmpge>
 800410e:	2800      	cmp	r0, #0
 8004110:	f000 8266 	beq.w	80045e0 <_dtoa_r+0x960>
 8004114:	2400      	movs	r4, #0
 8004116:	4625      	mov	r5, r4
 8004118:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800411a:	4656      	mov	r6, sl
 800411c:	ea6f 0803 	mvn.w	r8, r3
 8004120:	2700      	movs	r7, #0
 8004122:	4621      	mov	r1, r4
 8004124:	4648      	mov	r0, r9
 8004126:	f000 fcbd 	bl	8004aa4 <_Bfree>
 800412a:	2d00      	cmp	r5, #0
 800412c:	f000 80bd 	beq.w	80042aa <_dtoa_r+0x62a>
 8004130:	b12f      	cbz	r7, 800413e <_dtoa_r+0x4be>
 8004132:	42af      	cmp	r7, r5
 8004134:	d003      	beq.n	800413e <_dtoa_r+0x4be>
 8004136:	4639      	mov	r1, r7
 8004138:	4648      	mov	r0, r9
 800413a:	f000 fcb3 	bl	8004aa4 <_Bfree>
 800413e:	4629      	mov	r1, r5
 8004140:	4648      	mov	r0, r9
 8004142:	f000 fcaf 	bl	8004aa4 <_Bfree>
 8004146:	e0b0      	b.n	80042aa <_dtoa_r+0x62a>
 8004148:	07e2      	lsls	r2, r4, #31
 800414a:	d505      	bpl.n	8004158 <_dtoa_r+0x4d8>
 800414c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004150:	f7fc f9c2 	bl	80004d8 <__aeabi_dmul>
 8004154:	2301      	movs	r3, #1
 8004156:	3601      	adds	r6, #1
 8004158:	1064      	asrs	r4, r4, #1
 800415a:	3508      	adds	r5, #8
 800415c:	e762      	b.n	8004024 <_dtoa_r+0x3a4>
 800415e:	2602      	movs	r6, #2
 8004160:	e765      	b.n	800402e <_dtoa_r+0x3ae>
 8004162:	46b8      	mov	r8, r7
 8004164:	9c08      	ldr	r4, [sp, #32]
 8004166:	e784      	b.n	8004072 <_dtoa_r+0x3f2>
 8004168:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <_dtoa_r+0x588>)
 800416a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800416c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004174:	4454      	add	r4, sl
 8004176:	2900      	cmp	r1, #0
 8004178:	d054      	beq.n	8004224 <_dtoa_r+0x5a4>
 800417a:	2000      	movs	r0, #0
 800417c:	4928      	ldr	r1, [pc, #160]	@ (8004220 <_dtoa_r+0x5a0>)
 800417e:	f7fc fad5 	bl	800072c <__aeabi_ddiv>
 8004182:	4633      	mov	r3, r6
 8004184:	462a      	mov	r2, r5
 8004186:	f7fb ffef 	bl	8000168 <__aeabi_dsub>
 800418a:	4656      	mov	r6, sl
 800418c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004194:	f7fc fc50 	bl	8000a38 <__aeabi_d2iz>
 8004198:	4605      	mov	r5, r0
 800419a:	f7fc f933 	bl	8000404 <__aeabi_i2d>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041a6:	f7fb ffdf 	bl	8000168 <__aeabi_dsub>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	3530      	adds	r5, #48	@ 0x30
 80041b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041b8:	f806 5b01 	strb.w	r5, [r6], #1
 80041bc:	f7fc fbfe 	bl	80009bc <__aeabi_dcmplt>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d172      	bne.n	80042aa <_dtoa_r+0x62a>
 80041c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041c8:	2000      	movs	r0, #0
 80041ca:	4911      	ldr	r1, [pc, #68]	@ (8004210 <_dtoa_r+0x590>)
 80041cc:	f7fb ffcc 	bl	8000168 <__aeabi_dsub>
 80041d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041d4:	f7fc fbf2 	bl	80009bc <__aeabi_dcmplt>
 80041d8:	2800      	cmp	r0, #0
 80041da:	f040 80b4 	bne.w	8004346 <_dtoa_r+0x6c6>
 80041de:	42a6      	cmp	r6, r4
 80041e0:	f43f af70 	beq.w	80040c4 <_dtoa_r+0x444>
 80041e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80041e8:	2200      	movs	r2, #0
 80041ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <_dtoa_r+0x594>)
 80041ec:	f7fc f974 	bl	80004d8 <__aeabi_dmul>
 80041f0:	2200      	movs	r2, #0
 80041f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041fa:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <_dtoa_r+0x594>)
 80041fc:	f7fc f96c 	bl	80004d8 <__aeabi_dmul>
 8004200:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004204:	e7c4      	b.n	8004190 <_dtoa_r+0x510>
 8004206:	bf00      	nop
 8004208:	08005e28 	.word	0x08005e28
 800420c:	08005e00 	.word	0x08005e00
 8004210:	3ff00000 	.word	0x3ff00000
 8004214:	40240000 	.word	0x40240000
 8004218:	401c0000 	.word	0x401c0000
 800421c:	40140000 	.word	0x40140000
 8004220:	3fe00000 	.word	0x3fe00000
 8004224:	4631      	mov	r1, r6
 8004226:	4628      	mov	r0, r5
 8004228:	f7fc f956 	bl	80004d8 <__aeabi_dmul>
 800422c:	4656      	mov	r6, sl
 800422e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004232:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004238:	f7fc fbfe 	bl	8000a38 <__aeabi_d2iz>
 800423c:	4605      	mov	r5, r0
 800423e:	f7fc f8e1 	bl	8000404 <__aeabi_i2d>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800424a:	f7fb ff8d 	bl	8000168 <__aeabi_dsub>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	3530      	adds	r5, #48	@ 0x30
 8004254:	f806 5b01 	strb.w	r5, [r6], #1
 8004258:	42a6      	cmp	r6, r4
 800425a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	d124      	bne.n	80042ae <_dtoa_r+0x62e>
 8004264:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004268:	4bae      	ldr	r3, [pc, #696]	@ (8004524 <_dtoa_r+0x8a4>)
 800426a:	f7fb ff7f 	bl	800016c <__adddf3>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004276:	f7fc fbbf 	bl	80009f8 <__aeabi_dcmpgt>
 800427a:	2800      	cmp	r0, #0
 800427c:	d163      	bne.n	8004346 <_dtoa_r+0x6c6>
 800427e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004282:	2000      	movs	r0, #0
 8004284:	49a7      	ldr	r1, [pc, #668]	@ (8004524 <_dtoa_r+0x8a4>)
 8004286:	f7fb ff6f 	bl	8000168 <__aeabi_dsub>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004292:	f7fc fb93 	bl	80009bc <__aeabi_dcmplt>
 8004296:	2800      	cmp	r0, #0
 8004298:	f43f af14 	beq.w	80040c4 <_dtoa_r+0x444>
 800429c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800429e:	1e73      	subs	r3, r6, #1
 80042a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80042a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80042a6:	2b30      	cmp	r3, #48	@ 0x30
 80042a8:	d0f8      	beq.n	800429c <_dtoa_r+0x61c>
 80042aa:	4647      	mov	r7, r8
 80042ac:	e03b      	b.n	8004326 <_dtoa_r+0x6a6>
 80042ae:	4b9e      	ldr	r3, [pc, #632]	@ (8004528 <_dtoa_r+0x8a8>)
 80042b0:	f7fc f912 	bl	80004d8 <__aeabi_dmul>
 80042b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042b8:	e7bc      	b.n	8004234 <_dtoa_r+0x5b4>
 80042ba:	4656      	mov	r6, sl
 80042bc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80042c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042c4:	4620      	mov	r0, r4
 80042c6:	4629      	mov	r1, r5
 80042c8:	f7fc fa30 	bl	800072c <__aeabi_ddiv>
 80042cc:	f7fc fbb4 	bl	8000a38 <__aeabi_d2iz>
 80042d0:	4680      	mov	r8, r0
 80042d2:	f7fc f897 	bl	8000404 <__aeabi_i2d>
 80042d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042da:	f7fc f8fd 	bl	80004d8 <__aeabi_dmul>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4620      	mov	r0, r4
 80042e4:	4629      	mov	r1, r5
 80042e6:	f7fb ff3f 	bl	8000168 <__aeabi_dsub>
 80042ea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80042ee:	9d08      	ldr	r5, [sp, #32]
 80042f0:	f806 4b01 	strb.w	r4, [r6], #1
 80042f4:	eba6 040a 	sub.w	r4, r6, sl
 80042f8:	42a5      	cmp	r5, r4
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	d133      	bne.n	8004368 <_dtoa_r+0x6e8>
 8004300:	f7fb ff34 	bl	800016c <__adddf3>
 8004304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004308:	4604      	mov	r4, r0
 800430a:	460d      	mov	r5, r1
 800430c:	f7fc fb74 	bl	80009f8 <__aeabi_dcmpgt>
 8004310:	b9c0      	cbnz	r0, 8004344 <_dtoa_r+0x6c4>
 8004312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fc fb45 	bl	80009a8 <__aeabi_dcmpeq>
 800431e:	b110      	cbz	r0, 8004326 <_dtoa_r+0x6a6>
 8004320:	f018 0f01 	tst.w	r8, #1
 8004324:	d10e      	bne.n	8004344 <_dtoa_r+0x6c4>
 8004326:	4648      	mov	r0, r9
 8004328:	9903      	ldr	r1, [sp, #12]
 800432a:	f000 fbbb 	bl	8004aa4 <_Bfree>
 800432e:	2300      	movs	r3, #0
 8004330:	7033      	strb	r3, [r6, #0]
 8004332:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004334:	3701      	adds	r7, #1
 8004336:	601f      	str	r7, [r3, #0]
 8004338:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 824b 	beq.w	80047d6 <_dtoa_r+0xb56>
 8004340:	601e      	str	r6, [r3, #0]
 8004342:	e248      	b.n	80047d6 <_dtoa_r+0xb56>
 8004344:	46b8      	mov	r8, r7
 8004346:	4633      	mov	r3, r6
 8004348:	461e      	mov	r6, r3
 800434a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800434e:	2a39      	cmp	r2, #57	@ 0x39
 8004350:	d106      	bne.n	8004360 <_dtoa_r+0x6e0>
 8004352:	459a      	cmp	sl, r3
 8004354:	d1f8      	bne.n	8004348 <_dtoa_r+0x6c8>
 8004356:	2230      	movs	r2, #48	@ 0x30
 8004358:	f108 0801 	add.w	r8, r8, #1
 800435c:	f88a 2000 	strb.w	r2, [sl]
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	3201      	adds	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e7a0      	b.n	80042aa <_dtoa_r+0x62a>
 8004368:	2200      	movs	r2, #0
 800436a:	4b6f      	ldr	r3, [pc, #444]	@ (8004528 <_dtoa_r+0x8a8>)
 800436c:	f7fc f8b4 	bl	80004d8 <__aeabi_dmul>
 8004370:	2200      	movs	r2, #0
 8004372:	2300      	movs	r3, #0
 8004374:	4604      	mov	r4, r0
 8004376:	460d      	mov	r5, r1
 8004378:	f7fc fb16 	bl	80009a8 <__aeabi_dcmpeq>
 800437c:	2800      	cmp	r0, #0
 800437e:	d09f      	beq.n	80042c0 <_dtoa_r+0x640>
 8004380:	e7d1      	b.n	8004326 <_dtoa_r+0x6a6>
 8004382:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004384:	2a00      	cmp	r2, #0
 8004386:	f000 80ea 	beq.w	800455e <_dtoa_r+0x8de>
 800438a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800438c:	2a01      	cmp	r2, #1
 800438e:	f300 80cd 	bgt.w	800452c <_dtoa_r+0x8ac>
 8004392:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004394:	2a00      	cmp	r2, #0
 8004396:	f000 80c1 	beq.w	800451c <_dtoa_r+0x89c>
 800439a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800439e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80043a0:	9e04      	ldr	r6, [sp, #16]
 80043a2:	9a04      	ldr	r2, [sp, #16]
 80043a4:	2101      	movs	r1, #1
 80043a6:	441a      	add	r2, r3
 80043a8:	9204      	str	r2, [sp, #16]
 80043aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043ac:	4648      	mov	r0, r9
 80043ae:	441a      	add	r2, r3
 80043b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80043b2:	f000 fc2b 	bl	8004c0c <__i2b>
 80043b6:	4605      	mov	r5, r0
 80043b8:	b166      	cbz	r6, 80043d4 <_dtoa_r+0x754>
 80043ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	dd09      	ble.n	80043d4 <_dtoa_r+0x754>
 80043c0:	42b3      	cmp	r3, r6
 80043c2:	bfa8      	it	ge
 80043c4:	4633      	movge	r3, r6
 80043c6:	9a04      	ldr	r2, [sp, #16]
 80043c8:	1af6      	subs	r6, r6, r3
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	9204      	str	r2, [sp, #16]
 80043ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043d6:	b30b      	cbz	r3, 800441c <_dtoa_r+0x79c>
 80043d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80c6 	beq.w	800456c <_dtoa_r+0x8ec>
 80043e0:	2c00      	cmp	r4, #0
 80043e2:	f000 80c0 	beq.w	8004566 <_dtoa_r+0x8e6>
 80043e6:	4629      	mov	r1, r5
 80043e8:	4622      	mov	r2, r4
 80043ea:	4648      	mov	r0, r9
 80043ec:	f000 fcc6 	bl	8004d7c <__pow5mult>
 80043f0:	9a03      	ldr	r2, [sp, #12]
 80043f2:	4601      	mov	r1, r0
 80043f4:	4605      	mov	r5, r0
 80043f6:	4648      	mov	r0, r9
 80043f8:	f000 fc1e 	bl	8004c38 <__multiply>
 80043fc:	9903      	ldr	r1, [sp, #12]
 80043fe:	4680      	mov	r8, r0
 8004400:	4648      	mov	r0, r9
 8004402:	f000 fb4f 	bl	8004aa4 <_Bfree>
 8004406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004408:	1b1b      	subs	r3, r3, r4
 800440a:	930a      	str	r3, [sp, #40]	@ 0x28
 800440c:	f000 80b1 	beq.w	8004572 <_dtoa_r+0x8f2>
 8004410:	4641      	mov	r1, r8
 8004412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004414:	4648      	mov	r0, r9
 8004416:	f000 fcb1 	bl	8004d7c <__pow5mult>
 800441a:	9003      	str	r0, [sp, #12]
 800441c:	2101      	movs	r1, #1
 800441e:	4648      	mov	r0, r9
 8004420:	f000 fbf4 	bl	8004c0c <__i2b>
 8004424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004426:	4604      	mov	r4, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 81d8 	beq.w	80047de <_dtoa_r+0xb5e>
 800442e:	461a      	mov	r2, r3
 8004430:	4601      	mov	r1, r0
 8004432:	4648      	mov	r0, r9
 8004434:	f000 fca2 	bl	8004d7c <__pow5mult>
 8004438:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800443a:	4604      	mov	r4, r0
 800443c:	2b01      	cmp	r3, #1
 800443e:	f300 809f 	bgt.w	8004580 <_dtoa_r+0x900>
 8004442:	9b06      	ldr	r3, [sp, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f040 8097 	bne.w	8004578 <_dtoa_r+0x8f8>
 800444a:	9b07      	ldr	r3, [sp, #28]
 800444c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 8093 	bne.w	800457c <_dtoa_r+0x8fc>
 8004456:	9b07      	ldr	r3, [sp, #28]
 8004458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800445c:	0d1b      	lsrs	r3, r3, #20
 800445e:	051b      	lsls	r3, r3, #20
 8004460:	b133      	cbz	r3, 8004470 <_dtoa_r+0x7f0>
 8004462:	9b04      	ldr	r3, [sp, #16]
 8004464:	3301      	adds	r3, #1
 8004466:	9304      	str	r3, [sp, #16]
 8004468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800446a:	3301      	adds	r3, #1
 800446c:	9309      	str	r3, [sp, #36]	@ 0x24
 800446e:	2301      	movs	r3, #1
 8004470:	930a      	str	r3, [sp, #40]	@ 0x28
 8004472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 81b8 	beq.w	80047ea <_dtoa_r+0xb6a>
 800447a:	6923      	ldr	r3, [r4, #16]
 800447c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004480:	6918      	ldr	r0, [r3, #16]
 8004482:	f000 fb77 	bl	8004b74 <__hi0bits>
 8004486:	f1c0 0020 	rsb	r0, r0, #32
 800448a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800448c:	4418      	add	r0, r3
 800448e:	f010 001f 	ands.w	r0, r0, #31
 8004492:	f000 8082 	beq.w	800459a <_dtoa_r+0x91a>
 8004496:	f1c0 0320 	rsb	r3, r0, #32
 800449a:	2b04      	cmp	r3, #4
 800449c:	dd73      	ble.n	8004586 <_dtoa_r+0x906>
 800449e:	9b04      	ldr	r3, [sp, #16]
 80044a0:	f1c0 001c 	rsb	r0, r0, #28
 80044a4:	4403      	add	r3, r0
 80044a6:	9304      	str	r3, [sp, #16]
 80044a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044aa:	4406      	add	r6, r0
 80044ac:	4403      	add	r3, r0
 80044ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80044b0:	9b04      	ldr	r3, [sp, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	dd05      	ble.n	80044c2 <_dtoa_r+0x842>
 80044b6:	461a      	mov	r2, r3
 80044b8:	4648      	mov	r0, r9
 80044ba:	9903      	ldr	r1, [sp, #12]
 80044bc:	f000 fcb8 	bl	8004e30 <__lshift>
 80044c0:	9003      	str	r0, [sp, #12]
 80044c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dd05      	ble.n	80044d4 <_dtoa_r+0x854>
 80044c8:	4621      	mov	r1, r4
 80044ca:	461a      	mov	r2, r3
 80044cc:	4648      	mov	r0, r9
 80044ce:	f000 fcaf 	bl	8004e30 <__lshift>
 80044d2:	4604      	mov	r4, r0
 80044d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d061      	beq.n	800459e <_dtoa_r+0x91e>
 80044da:	4621      	mov	r1, r4
 80044dc:	9803      	ldr	r0, [sp, #12]
 80044de:	f000 fd13 	bl	8004f08 <__mcmp>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	da5b      	bge.n	800459e <_dtoa_r+0x91e>
 80044e6:	2300      	movs	r3, #0
 80044e8:	220a      	movs	r2, #10
 80044ea:	4648      	mov	r0, r9
 80044ec:	9903      	ldr	r1, [sp, #12]
 80044ee:	f000 fafb 	bl	8004ae8 <__multadd>
 80044f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044f4:	f107 38ff 	add.w	r8, r7, #4294967295
 80044f8:	9003      	str	r0, [sp, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 8177 	beq.w	80047ee <_dtoa_r+0xb6e>
 8004500:	4629      	mov	r1, r5
 8004502:	2300      	movs	r3, #0
 8004504:	220a      	movs	r2, #10
 8004506:	4648      	mov	r0, r9
 8004508:	f000 faee 	bl	8004ae8 <__multadd>
 800450c:	f1bb 0f00 	cmp.w	fp, #0
 8004510:	4605      	mov	r5, r0
 8004512:	dc6f      	bgt.n	80045f4 <_dtoa_r+0x974>
 8004514:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004516:	2b02      	cmp	r3, #2
 8004518:	dc49      	bgt.n	80045ae <_dtoa_r+0x92e>
 800451a:	e06b      	b.n	80045f4 <_dtoa_r+0x974>
 800451c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800451e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004522:	e73c      	b.n	800439e <_dtoa_r+0x71e>
 8004524:	3fe00000 	.word	0x3fe00000
 8004528:	40240000 	.word	0x40240000
 800452c:	9b08      	ldr	r3, [sp, #32]
 800452e:	1e5c      	subs	r4, r3, #1
 8004530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004532:	42a3      	cmp	r3, r4
 8004534:	db09      	blt.n	800454a <_dtoa_r+0x8ca>
 8004536:	1b1c      	subs	r4, r3, r4
 8004538:	9b08      	ldr	r3, [sp, #32]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f6bf af30 	bge.w	80043a0 <_dtoa_r+0x720>
 8004540:	9b04      	ldr	r3, [sp, #16]
 8004542:	9a08      	ldr	r2, [sp, #32]
 8004544:	1a9e      	subs	r6, r3, r2
 8004546:	2300      	movs	r3, #0
 8004548:	e72b      	b.n	80043a2 <_dtoa_r+0x722>
 800454a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800454c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800454e:	1ae3      	subs	r3, r4, r3
 8004550:	441a      	add	r2, r3
 8004552:	940a      	str	r4, [sp, #40]	@ 0x28
 8004554:	9e04      	ldr	r6, [sp, #16]
 8004556:	2400      	movs	r4, #0
 8004558:	9b08      	ldr	r3, [sp, #32]
 800455a:	920e      	str	r2, [sp, #56]	@ 0x38
 800455c:	e721      	b.n	80043a2 <_dtoa_r+0x722>
 800455e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004560:	9e04      	ldr	r6, [sp, #16]
 8004562:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004564:	e728      	b.n	80043b8 <_dtoa_r+0x738>
 8004566:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800456a:	e751      	b.n	8004410 <_dtoa_r+0x790>
 800456c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800456e:	9903      	ldr	r1, [sp, #12]
 8004570:	e750      	b.n	8004414 <_dtoa_r+0x794>
 8004572:	f8cd 800c 	str.w	r8, [sp, #12]
 8004576:	e751      	b.n	800441c <_dtoa_r+0x79c>
 8004578:	2300      	movs	r3, #0
 800457a:	e779      	b.n	8004470 <_dtoa_r+0x7f0>
 800457c:	9b06      	ldr	r3, [sp, #24]
 800457e:	e777      	b.n	8004470 <_dtoa_r+0x7f0>
 8004580:	2300      	movs	r3, #0
 8004582:	930a      	str	r3, [sp, #40]	@ 0x28
 8004584:	e779      	b.n	800447a <_dtoa_r+0x7fa>
 8004586:	d093      	beq.n	80044b0 <_dtoa_r+0x830>
 8004588:	9a04      	ldr	r2, [sp, #16]
 800458a:	331c      	adds	r3, #28
 800458c:	441a      	add	r2, r3
 800458e:	9204      	str	r2, [sp, #16]
 8004590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004592:	441e      	add	r6, r3
 8004594:	441a      	add	r2, r3
 8004596:	9209      	str	r2, [sp, #36]	@ 0x24
 8004598:	e78a      	b.n	80044b0 <_dtoa_r+0x830>
 800459a:	4603      	mov	r3, r0
 800459c:	e7f4      	b.n	8004588 <_dtoa_r+0x908>
 800459e:	9b08      	ldr	r3, [sp, #32]
 80045a0:	46b8      	mov	r8, r7
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	dc20      	bgt.n	80045e8 <_dtoa_r+0x968>
 80045a6:	469b      	mov	fp, r3
 80045a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	dd1e      	ble.n	80045ec <_dtoa_r+0x96c>
 80045ae:	f1bb 0f00 	cmp.w	fp, #0
 80045b2:	f47f adb1 	bne.w	8004118 <_dtoa_r+0x498>
 80045b6:	4621      	mov	r1, r4
 80045b8:	465b      	mov	r3, fp
 80045ba:	2205      	movs	r2, #5
 80045bc:	4648      	mov	r0, r9
 80045be:	f000 fa93 	bl	8004ae8 <__multadd>
 80045c2:	4601      	mov	r1, r0
 80045c4:	4604      	mov	r4, r0
 80045c6:	9803      	ldr	r0, [sp, #12]
 80045c8:	f000 fc9e 	bl	8004f08 <__mcmp>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	f77f ada3 	ble.w	8004118 <_dtoa_r+0x498>
 80045d2:	4656      	mov	r6, sl
 80045d4:	2331      	movs	r3, #49	@ 0x31
 80045d6:	f108 0801 	add.w	r8, r8, #1
 80045da:	f806 3b01 	strb.w	r3, [r6], #1
 80045de:	e59f      	b.n	8004120 <_dtoa_r+0x4a0>
 80045e0:	46b8      	mov	r8, r7
 80045e2:	9c08      	ldr	r4, [sp, #32]
 80045e4:	4625      	mov	r5, r4
 80045e6:	e7f4      	b.n	80045d2 <_dtoa_r+0x952>
 80045e8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80045ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8101 	beq.w	80047f6 <_dtoa_r+0xb76>
 80045f4:	2e00      	cmp	r6, #0
 80045f6:	dd05      	ble.n	8004604 <_dtoa_r+0x984>
 80045f8:	4629      	mov	r1, r5
 80045fa:	4632      	mov	r2, r6
 80045fc:	4648      	mov	r0, r9
 80045fe:	f000 fc17 	bl	8004e30 <__lshift>
 8004602:	4605      	mov	r5, r0
 8004604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004606:	2b00      	cmp	r3, #0
 8004608:	d05c      	beq.n	80046c4 <_dtoa_r+0xa44>
 800460a:	4648      	mov	r0, r9
 800460c:	6869      	ldr	r1, [r5, #4]
 800460e:	f000 fa09 	bl	8004a24 <_Balloc>
 8004612:	4606      	mov	r6, r0
 8004614:	b928      	cbnz	r0, 8004622 <_dtoa_r+0x9a2>
 8004616:	4602      	mov	r2, r0
 8004618:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800461c:	4b80      	ldr	r3, [pc, #512]	@ (8004820 <_dtoa_r+0xba0>)
 800461e:	f7ff bb43 	b.w	8003ca8 <_dtoa_r+0x28>
 8004622:	692a      	ldr	r2, [r5, #16]
 8004624:	f105 010c 	add.w	r1, r5, #12
 8004628:	3202      	adds	r2, #2
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	300c      	adds	r0, #12
 800462e:	f000 ffef 	bl	8005610 <memcpy>
 8004632:	2201      	movs	r2, #1
 8004634:	4631      	mov	r1, r6
 8004636:	4648      	mov	r0, r9
 8004638:	f000 fbfa 	bl	8004e30 <__lshift>
 800463c:	462f      	mov	r7, r5
 800463e:	4605      	mov	r5, r0
 8004640:	f10a 0301 	add.w	r3, sl, #1
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	eb0a 030b 	add.w	r3, sl, fp
 800464a:	930a      	str	r3, [sp, #40]	@ 0x28
 800464c:	9b06      	ldr	r3, [sp, #24]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	9309      	str	r3, [sp, #36]	@ 0x24
 8004654:	9b04      	ldr	r3, [sp, #16]
 8004656:	4621      	mov	r1, r4
 8004658:	9803      	ldr	r0, [sp, #12]
 800465a:	f103 3bff 	add.w	fp, r3, #4294967295
 800465e:	f7ff fa86 	bl	8003b6e <quorem>
 8004662:	4603      	mov	r3, r0
 8004664:	4639      	mov	r1, r7
 8004666:	3330      	adds	r3, #48	@ 0x30
 8004668:	9006      	str	r0, [sp, #24]
 800466a:	9803      	ldr	r0, [sp, #12]
 800466c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800466e:	f000 fc4b 	bl	8004f08 <__mcmp>
 8004672:	462a      	mov	r2, r5
 8004674:	9008      	str	r0, [sp, #32]
 8004676:	4621      	mov	r1, r4
 8004678:	4648      	mov	r0, r9
 800467a:	f000 fc61 	bl	8004f40 <__mdiff>
 800467e:	68c2      	ldr	r2, [r0, #12]
 8004680:	4606      	mov	r6, r0
 8004682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004684:	bb02      	cbnz	r2, 80046c8 <_dtoa_r+0xa48>
 8004686:	4601      	mov	r1, r0
 8004688:	9803      	ldr	r0, [sp, #12]
 800468a:	f000 fc3d 	bl	8004f08 <__mcmp>
 800468e:	4602      	mov	r2, r0
 8004690:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004692:	4631      	mov	r1, r6
 8004694:	4648      	mov	r0, r9
 8004696:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800469a:	f000 fa03 	bl	8004aa4 <_Bfree>
 800469e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80046a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80046a2:	9e04      	ldr	r6, [sp, #16]
 80046a4:	ea42 0103 	orr.w	r1, r2, r3
 80046a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046aa:	4319      	orrs	r1, r3
 80046ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046ae:	d10d      	bne.n	80046cc <_dtoa_r+0xa4c>
 80046b0:	2b39      	cmp	r3, #57	@ 0x39
 80046b2:	d027      	beq.n	8004704 <_dtoa_r+0xa84>
 80046b4:	9a08      	ldr	r2, [sp, #32]
 80046b6:	2a00      	cmp	r2, #0
 80046b8:	dd01      	ble.n	80046be <_dtoa_r+0xa3e>
 80046ba:	9b06      	ldr	r3, [sp, #24]
 80046bc:	3331      	adds	r3, #49	@ 0x31
 80046be:	f88b 3000 	strb.w	r3, [fp]
 80046c2:	e52e      	b.n	8004122 <_dtoa_r+0x4a2>
 80046c4:	4628      	mov	r0, r5
 80046c6:	e7b9      	b.n	800463c <_dtoa_r+0x9bc>
 80046c8:	2201      	movs	r2, #1
 80046ca:	e7e2      	b.n	8004692 <_dtoa_r+0xa12>
 80046cc:	9908      	ldr	r1, [sp, #32]
 80046ce:	2900      	cmp	r1, #0
 80046d0:	db04      	blt.n	80046dc <_dtoa_r+0xa5c>
 80046d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80046d4:	4301      	orrs	r1, r0
 80046d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046d8:	4301      	orrs	r1, r0
 80046da:	d120      	bne.n	800471e <_dtoa_r+0xa9e>
 80046dc:	2a00      	cmp	r2, #0
 80046de:	ddee      	ble.n	80046be <_dtoa_r+0xa3e>
 80046e0:	2201      	movs	r2, #1
 80046e2:	9903      	ldr	r1, [sp, #12]
 80046e4:	4648      	mov	r0, r9
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	f000 fba2 	bl	8004e30 <__lshift>
 80046ec:	4621      	mov	r1, r4
 80046ee:	9003      	str	r0, [sp, #12]
 80046f0:	f000 fc0a 	bl	8004f08 <__mcmp>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	9b04      	ldr	r3, [sp, #16]
 80046f8:	dc02      	bgt.n	8004700 <_dtoa_r+0xa80>
 80046fa:	d1e0      	bne.n	80046be <_dtoa_r+0xa3e>
 80046fc:	07da      	lsls	r2, r3, #31
 80046fe:	d5de      	bpl.n	80046be <_dtoa_r+0xa3e>
 8004700:	2b39      	cmp	r3, #57	@ 0x39
 8004702:	d1da      	bne.n	80046ba <_dtoa_r+0xa3a>
 8004704:	2339      	movs	r3, #57	@ 0x39
 8004706:	f88b 3000 	strb.w	r3, [fp]
 800470a:	4633      	mov	r3, r6
 800470c:	461e      	mov	r6, r3
 800470e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004712:	3b01      	subs	r3, #1
 8004714:	2a39      	cmp	r2, #57	@ 0x39
 8004716:	d04e      	beq.n	80047b6 <_dtoa_r+0xb36>
 8004718:	3201      	adds	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e501      	b.n	8004122 <_dtoa_r+0x4a2>
 800471e:	2a00      	cmp	r2, #0
 8004720:	dd03      	ble.n	800472a <_dtoa_r+0xaaa>
 8004722:	2b39      	cmp	r3, #57	@ 0x39
 8004724:	d0ee      	beq.n	8004704 <_dtoa_r+0xa84>
 8004726:	3301      	adds	r3, #1
 8004728:	e7c9      	b.n	80046be <_dtoa_r+0xa3e>
 800472a:	9a04      	ldr	r2, [sp, #16]
 800472c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800472e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004732:	428a      	cmp	r2, r1
 8004734:	d028      	beq.n	8004788 <_dtoa_r+0xb08>
 8004736:	2300      	movs	r3, #0
 8004738:	220a      	movs	r2, #10
 800473a:	9903      	ldr	r1, [sp, #12]
 800473c:	4648      	mov	r0, r9
 800473e:	f000 f9d3 	bl	8004ae8 <__multadd>
 8004742:	42af      	cmp	r7, r5
 8004744:	9003      	str	r0, [sp, #12]
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	f04f 020a 	mov.w	r2, #10
 800474e:	4639      	mov	r1, r7
 8004750:	4648      	mov	r0, r9
 8004752:	d107      	bne.n	8004764 <_dtoa_r+0xae4>
 8004754:	f000 f9c8 	bl	8004ae8 <__multadd>
 8004758:	4607      	mov	r7, r0
 800475a:	4605      	mov	r5, r0
 800475c:	9b04      	ldr	r3, [sp, #16]
 800475e:	3301      	adds	r3, #1
 8004760:	9304      	str	r3, [sp, #16]
 8004762:	e777      	b.n	8004654 <_dtoa_r+0x9d4>
 8004764:	f000 f9c0 	bl	8004ae8 <__multadd>
 8004768:	4629      	mov	r1, r5
 800476a:	4607      	mov	r7, r0
 800476c:	2300      	movs	r3, #0
 800476e:	220a      	movs	r2, #10
 8004770:	4648      	mov	r0, r9
 8004772:	f000 f9b9 	bl	8004ae8 <__multadd>
 8004776:	4605      	mov	r5, r0
 8004778:	e7f0      	b.n	800475c <_dtoa_r+0xadc>
 800477a:	f1bb 0f00 	cmp.w	fp, #0
 800477e:	bfcc      	ite	gt
 8004780:	465e      	movgt	r6, fp
 8004782:	2601      	movle	r6, #1
 8004784:	2700      	movs	r7, #0
 8004786:	4456      	add	r6, sl
 8004788:	2201      	movs	r2, #1
 800478a:	9903      	ldr	r1, [sp, #12]
 800478c:	4648      	mov	r0, r9
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	f000 fb4e 	bl	8004e30 <__lshift>
 8004794:	4621      	mov	r1, r4
 8004796:	9003      	str	r0, [sp, #12]
 8004798:	f000 fbb6 	bl	8004f08 <__mcmp>
 800479c:	2800      	cmp	r0, #0
 800479e:	dcb4      	bgt.n	800470a <_dtoa_r+0xa8a>
 80047a0:	d102      	bne.n	80047a8 <_dtoa_r+0xb28>
 80047a2:	9b04      	ldr	r3, [sp, #16]
 80047a4:	07db      	lsls	r3, r3, #31
 80047a6:	d4b0      	bmi.n	800470a <_dtoa_r+0xa8a>
 80047a8:	4633      	mov	r3, r6
 80047aa:	461e      	mov	r6, r3
 80047ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047b0:	2a30      	cmp	r2, #48	@ 0x30
 80047b2:	d0fa      	beq.n	80047aa <_dtoa_r+0xb2a>
 80047b4:	e4b5      	b.n	8004122 <_dtoa_r+0x4a2>
 80047b6:	459a      	cmp	sl, r3
 80047b8:	d1a8      	bne.n	800470c <_dtoa_r+0xa8c>
 80047ba:	2331      	movs	r3, #49	@ 0x31
 80047bc:	f108 0801 	add.w	r8, r8, #1
 80047c0:	f88a 3000 	strb.w	r3, [sl]
 80047c4:	e4ad      	b.n	8004122 <_dtoa_r+0x4a2>
 80047c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80047c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004824 <_dtoa_r+0xba4>
 80047cc:	b11b      	cbz	r3, 80047d6 <_dtoa_r+0xb56>
 80047ce:	f10a 0308 	add.w	r3, sl, #8
 80047d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4650      	mov	r0, sl
 80047d8:	b017      	add	sp, #92	@ 0x5c
 80047da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	f77f ae2e 	ble.w	8004442 <_dtoa_r+0x7c2>
 80047e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80047ea:	2001      	movs	r0, #1
 80047ec:	e64d      	b.n	800448a <_dtoa_r+0x80a>
 80047ee:	f1bb 0f00 	cmp.w	fp, #0
 80047f2:	f77f aed9 	ble.w	80045a8 <_dtoa_r+0x928>
 80047f6:	4656      	mov	r6, sl
 80047f8:	4621      	mov	r1, r4
 80047fa:	9803      	ldr	r0, [sp, #12]
 80047fc:	f7ff f9b7 	bl	8003b6e <quorem>
 8004800:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004804:	f806 3b01 	strb.w	r3, [r6], #1
 8004808:	eba6 020a 	sub.w	r2, r6, sl
 800480c:	4593      	cmp	fp, r2
 800480e:	ddb4      	ble.n	800477a <_dtoa_r+0xafa>
 8004810:	2300      	movs	r3, #0
 8004812:	220a      	movs	r2, #10
 8004814:	4648      	mov	r0, r9
 8004816:	9903      	ldr	r1, [sp, #12]
 8004818:	f000 f966 	bl	8004ae8 <__multadd>
 800481c:	9003      	str	r0, [sp, #12]
 800481e:	e7eb      	b.n	80047f8 <_dtoa_r+0xb78>
 8004820:	08005d03 	.word	0x08005d03
 8004824:	08005c87 	.word	0x08005c87

08004828 <_free_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4605      	mov	r5, r0
 800482c:	2900      	cmp	r1, #0
 800482e:	d040      	beq.n	80048b2 <_free_r+0x8a>
 8004830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004834:	1f0c      	subs	r4, r1, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfb8      	it	lt
 800483a:	18e4      	addlt	r4, r4, r3
 800483c:	f000 f8e6 	bl	8004a0c <__malloc_lock>
 8004840:	4a1c      	ldr	r2, [pc, #112]	@ (80048b4 <_free_r+0x8c>)
 8004842:	6813      	ldr	r3, [r2, #0]
 8004844:	b933      	cbnz	r3, 8004854 <_free_r+0x2c>
 8004846:	6063      	str	r3, [r4, #4]
 8004848:	6014      	str	r4, [r2, #0]
 800484a:	4628      	mov	r0, r5
 800484c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004850:	f000 b8e2 	b.w	8004a18 <__malloc_unlock>
 8004854:	42a3      	cmp	r3, r4
 8004856:	d908      	bls.n	800486a <_free_r+0x42>
 8004858:	6820      	ldr	r0, [r4, #0]
 800485a:	1821      	adds	r1, r4, r0
 800485c:	428b      	cmp	r3, r1
 800485e:	bf01      	itttt	eq
 8004860:	6819      	ldreq	r1, [r3, #0]
 8004862:	685b      	ldreq	r3, [r3, #4]
 8004864:	1809      	addeq	r1, r1, r0
 8004866:	6021      	streq	r1, [r4, #0]
 8004868:	e7ed      	b.n	8004846 <_free_r+0x1e>
 800486a:	461a      	mov	r2, r3
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b10b      	cbz	r3, 8004874 <_free_r+0x4c>
 8004870:	42a3      	cmp	r3, r4
 8004872:	d9fa      	bls.n	800486a <_free_r+0x42>
 8004874:	6811      	ldr	r1, [r2, #0]
 8004876:	1850      	adds	r0, r2, r1
 8004878:	42a0      	cmp	r0, r4
 800487a:	d10b      	bne.n	8004894 <_free_r+0x6c>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	4401      	add	r1, r0
 8004880:	1850      	adds	r0, r2, r1
 8004882:	4283      	cmp	r3, r0
 8004884:	6011      	str	r1, [r2, #0]
 8004886:	d1e0      	bne.n	800484a <_free_r+0x22>
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4408      	add	r0, r1
 800488e:	6010      	str	r0, [r2, #0]
 8004890:	6053      	str	r3, [r2, #4]
 8004892:	e7da      	b.n	800484a <_free_r+0x22>
 8004894:	d902      	bls.n	800489c <_free_r+0x74>
 8004896:	230c      	movs	r3, #12
 8004898:	602b      	str	r3, [r5, #0]
 800489a:	e7d6      	b.n	800484a <_free_r+0x22>
 800489c:	6820      	ldr	r0, [r4, #0]
 800489e:	1821      	adds	r1, r4, r0
 80048a0:	428b      	cmp	r3, r1
 80048a2:	bf01      	itttt	eq
 80048a4:	6819      	ldreq	r1, [r3, #0]
 80048a6:	685b      	ldreq	r3, [r3, #4]
 80048a8:	1809      	addeq	r1, r1, r0
 80048aa:	6021      	streq	r1, [r4, #0]
 80048ac:	6063      	str	r3, [r4, #4]
 80048ae:	6054      	str	r4, [r2, #4]
 80048b0:	e7cb      	b.n	800484a <_free_r+0x22>
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	20000508 	.word	0x20000508

080048b8 <malloc>:
 80048b8:	4b02      	ldr	r3, [pc, #8]	@ (80048c4 <malloc+0xc>)
 80048ba:	4601      	mov	r1, r0
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	f000 b825 	b.w	800490c <_malloc_r>
 80048c2:	bf00      	nop
 80048c4:	20000018 	.word	0x20000018

080048c8 <sbrk_aligned>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004908 <sbrk_aligned+0x40>)
 80048cc:	460c      	mov	r4, r1
 80048ce:	6831      	ldr	r1, [r6, #0]
 80048d0:	4605      	mov	r5, r0
 80048d2:	b911      	cbnz	r1, 80048da <sbrk_aligned+0x12>
 80048d4:	f000 fe8c 	bl	80055f0 <_sbrk_r>
 80048d8:	6030      	str	r0, [r6, #0]
 80048da:	4621      	mov	r1, r4
 80048dc:	4628      	mov	r0, r5
 80048de:	f000 fe87 	bl	80055f0 <_sbrk_r>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	d103      	bne.n	80048ee <sbrk_aligned+0x26>
 80048e6:	f04f 34ff 	mov.w	r4, #4294967295
 80048ea:	4620      	mov	r0, r4
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	1cc4      	adds	r4, r0, #3
 80048f0:	f024 0403 	bic.w	r4, r4, #3
 80048f4:	42a0      	cmp	r0, r4
 80048f6:	d0f8      	beq.n	80048ea <sbrk_aligned+0x22>
 80048f8:	1a21      	subs	r1, r4, r0
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 fe78 	bl	80055f0 <_sbrk_r>
 8004900:	3001      	adds	r0, #1
 8004902:	d1f2      	bne.n	80048ea <sbrk_aligned+0x22>
 8004904:	e7ef      	b.n	80048e6 <sbrk_aligned+0x1e>
 8004906:	bf00      	nop
 8004908:	20000504 	.word	0x20000504

0800490c <_malloc_r>:
 800490c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004910:	1ccd      	adds	r5, r1, #3
 8004912:	f025 0503 	bic.w	r5, r5, #3
 8004916:	3508      	adds	r5, #8
 8004918:	2d0c      	cmp	r5, #12
 800491a:	bf38      	it	cc
 800491c:	250c      	movcc	r5, #12
 800491e:	2d00      	cmp	r5, #0
 8004920:	4606      	mov	r6, r0
 8004922:	db01      	blt.n	8004928 <_malloc_r+0x1c>
 8004924:	42a9      	cmp	r1, r5
 8004926:	d904      	bls.n	8004932 <_malloc_r+0x26>
 8004928:	230c      	movs	r3, #12
 800492a:	6033      	str	r3, [r6, #0]
 800492c:	2000      	movs	r0, #0
 800492e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a08 <_malloc_r+0xfc>
 8004936:	f000 f869 	bl	8004a0c <__malloc_lock>
 800493a:	f8d8 3000 	ldr.w	r3, [r8]
 800493e:	461c      	mov	r4, r3
 8004940:	bb44      	cbnz	r4, 8004994 <_malloc_r+0x88>
 8004942:	4629      	mov	r1, r5
 8004944:	4630      	mov	r0, r6
 8004946:	f7ff ffbf 	bl	80048c8 <sbrk_aligned>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	4604      	mov	r4, r0
 800494e:	d158      	bne.n	8004a02 <_malloc_r+0xf6>
 8004950:	f8d8 4000 	ldr.w	r4, [r8]
 8004954:	4627      	mov	r7, r4
 8004956:	2f00      	cmp	r7, #0
 8004958:	d143      	bne.n	80049e2 <_malloc_r+0xd6>
 800495a:	2c00      	cmp	r4, #0
 800495c:	d04b      	beq.n	80049f6 <_malloc_r+0xea>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	4639      	mov	r1, r7
 8004962:	4630      	mov	r0, r6
 8004964:	eb04 0903 	add.w	r9, r4, r3
 8004968:	f000 fe42 	bl	80055f0 <_sbrk_r>
 800496c:	4581      	cmp	r9, r0
 800496e:	d142      	bne.n	80049f6 <_malloc_r+0xea>
 8004970:	6821      	ldr	r1, [r4, #0]
 8004972:	4630      	mov	r0, r6
 8004974:	1a6d      	subs	r5, r5, r1
 8004976:	4629      	mov	r1, r5
 8004978:	f7ff ffa6 	bl	80048c8 <sbrk_aligned>
 800497c:	3001      	adds	r0, #1
 800497e:	d03a      	beq.n	80049f6 <_malloc_r+0xea>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	442b      	add	r3, r5
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	f8d8 3000 	ldr.w	r3, [r8]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	bb62      	cbnz	r2, 80049e8 <_malloc_r+0xdc>
 800498e:	f8c8 7000 	str.w	r7, [r8]
 8004992:	e00f      	b.n	80049b4 <_malloc_r+0xa8>
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	1b52      	subs	r2, r2, r5
 8004998:	d420      	bmi.n	80049dc <_malloc_r+0xd0>
 800499a:	2a0b      	cmp	r2, #11
 800499c:	d917      	bls.n	80049ce <_malloc_r+0xc2>
 800499e:	1961      	adds	r1, r4, r5
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	6025      	str	r5, [r4, #0]
 80049a4:	bf18      	it	ne
 80049a6:	6059      	strne	r1, [r3, #4]
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	bf08      	it	eq
 80049ac:	f8c8 1000 	streq.w	r1, [r8]
 80049b0:	5162      	str	r2, [r4, r5]
 80049b2:	604b      	str	r3, [r1, #4]
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 f82f 	bl	8004a18 <__malloc_unlock>
 80049ba:	f104 000b 	add.w	r0, r4, #11
 80049be:	1d23      	adds	r3, r4, #4
 80049c0:	f020 0007 	bic.w	r0, r0, #7
 80049c4:	1ac2      	subs	r2, r0, r3
 80049c6:	bf1c      	itt	ne
 80049c8:	1a1b      	subne	r3, r3, r0
 80049ca:	50a3      	strne	r3, [r4, r2]
 80049cc:	e7af      	b.n	800492e <_malloc_r+0x22>
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	42a3      	cmp	r3, r4
 80049d2:	bf0c      	ite	eq
 80049d4:	f8c8 2000 	streq.w	r2, [r8]
 80049d8:	605a      	strne	r2, [r3, #4]
 80049da:	e7eb      	b.n	80049b4 <_malloc_r+0xa8>
 80049dc:	4623      	mov	r3, r4
 80049de:	6864      	ldr	r4, [r4, #4]
 80049e0:	e7ae      	b.n	8004940 <_malloc_r+0x34>
 80049e2:	463c      	mov	r4, r7
 80049e4:	687f      	ldr	r7, [r7, #4]
 80049e6:	e7b6      	b.n	8004956 <_malloc_r+0x4a>
 80049e8:	461a      	mov	r2, r3
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	d1fb      	bne.n	80049e8 <_malloc_r+0xdc>
 80049f0:	2300      	movs	r3, #0
 80049f2:	6053      	str	r3, [r2, #4]
 80049f4:	e7de      	b.n	80049b4 <_malloc_r+0xa8>
 80049f6:	230c      	movs	r3, #12
 80049f8:	4630      	mov	r0, r6
 80049fa:	6033      	str	r3, [r6, #0]
 80049fc:	f000 f80c 	bl	8004a18 <__malloc_unlock>
 8004a00:	e794      	b.n	800492c <_malloc_r+0x20>
 8004a02:	6005      	str	r5, [r0, #0]
 8004a04:	e7d6      	b.n	80049b4 <_malloc_r+0xa8>
 8004a06:	bf00      	nop
 8004a08:	20000508 	.word	0x20000508

08004a0c <__malloc_lock>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	@ (8004a14 <__malloc_lock+0x8>)
 8004a0e:	f7ff b89e 	b.w	8003b4e <__retarget_lock_acquire_recursive>
 8004a12:	bf00      	nop
 8004a14:	20000500 	.word	0x20000500

08004a18 <__malloc_unlock>:
 8004a18:	4801      	ldr	r0, [pc, #4]	@ (8004a20 <__malloc_unlock+0x8>)
 8004a1a:	f7ff b899 	b.w	8003b50 <__retarget_lock_release_recursive>
 8004a1e:	bf00      	nop
 8004a20:	20000500 	.word	0x20000500

08004a24 <_Balloc>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	69c6      	ldr	r6, [r0, #28]
 8004a28:	4604      	mov	r4, r0
 8004a2a:	460d      	mov	r5, r1
 8004a2c:	b976      	cbnz	r6, 8004a4c <_Balloc+0x28>
 8004a2e:	2010      	movs	r0, #16
 8004a30:	f7ff ff42 	bl	80048b8 <malloc>
 8004a34:	4602      	mov	r2, r0
 8004a36:	61e0      	str	r0, [r4, #28]
 8004a38:	b920      	cbnz	r0, 8004a44 <_Balloc+0x20>
 8004a3a:	216b      	movs	r1, #107	@ 0x6b
 8004a3c:	4b17      	ldr	r3, [pc, #92]	@ (8004a9c <_Balloc+0x78>)
 8004a3e:	4818      	ldr	r0, [pc, #96]	@ (8004aa0 <_Balloc+0x7c>)
 8004a40:	f000 fdf4 	bl	800562c <__assert_func>
 8004a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a48:	6006      	str	r6, [r0, #0]
 8004a4a:	60c6      	str	r6, [r0, #12]
 8004a4c:	69e6      	ldr	r6, [r4, #28]
 8004a4e:	68f3      	ldr	r3, [r6, #12]
 8004a50:	b183      	cbz	r3, 8004a74 <_Balloc+0x50>
 8004a52:	69e3      	ldr	r3, [r4, #28]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a5a:	b9b8      	cbnz	r0, 8004a8c <_Balloc+0x68>
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f605 	lsl.w	r6, r1, r5
 8004a62:	1d72      	adds	r2, r6, #5
 8004a64:	4620      	mov	r0, r4
 8004a66:	0092      	lsls	r2, r2, #2
 8004a68:	f000 fdfe 	bl	8005668 <_calloc_r>
 8004a6c:	b160      	cbz	r0, 8004a88 <_Balloc+0x64>
 8004a6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a72:	e00e      	b.n	8004a92 <_Balloc+0x6e>
 8004a74:	2221      	movs	r2, #33	@ 0x21
 8004a76:	2104      	movs	r1, #4
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 fdf5 	bl	8005668 <_calloc_r>
 8004a7e:	69e3      	ldr	r3, [r4, #28]
 8004a80:	60f0      	str	r0, [r6, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e4      	bne.n	8004a52 <_Balloc+0x2e>
 8004a88:	2000      	movs	r0, #0
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	6802      	ldr	r2, [r0, #0]
 8004a8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004a92:	2300      	movs	r3, #0
 8004a94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004a98:	e7f7      	b.n	8004a8a <_Balloc+0x66>
 8004a9a:	bf00      	nop
 8004a9c:	08005c94 	.word	0x08005c94
 8004aa0:	08005d14 	.word	0x08005d14

08004aa4 <_Bfree>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	69c6      	ldr	r6, [r0, #28]
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	b976      	cbnz	r6, 8004acc <_Bfree+0x28>
 8004aae:	2010      	movs	r0, #16
 8004ab0:	f7ff ff02 	bl	80048b8 <malloc>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	61e8      	str	r0, [r5, #28]
 8004ab8:	b920      	cbnz	r0, 8004ac4 <_Bfree+0x20>
 8004aba:	218f      	movs	r1, #143	@ 0x8f
 8004abc:	4b08      	ldr	r3, [pc, #32]	@ (8004ae0 <_Bfree+0x3c>)
 8004abe:	4809      	ldr	r0, [pc, #36]	@ (8004ae4 <_Bfree+0x40>)
 8004ac0:	f000 fdb4 	bl	800562c <__assert_func>
 8004ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ac8:	6006      	str	r6, [r0, #0]
 8004aca:	60c6      	str	r6, [r0, #12]
 8004acc:	b13c      	cbz	r4, 8004ade <_Bfree+0x3a>
 8004ace:	69eb      	ldr	r3, [r5, #28]
 8004ad0:	6862      	ldr	r2, [r4, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ad8:	6021      	str	r1, [r4, #0]
 8004ada:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ade:	bd70      	pop	{r4, r5, r6, pc}
 8004ae0:	08005c94 	.word	0x08005c94
 8004ae4:	08005d14 	.word	0x08005d14

08004ae8 <__multadd>:
 8004ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aec:	4607      	mov	r7, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	461e      	mov	r6, r3
 8004af2:	2000      	movs	r0, #0
 8004af4:	690d      	ldr	r5, [r1, #16]
 8004af6:	f101 0c14 	add.w	ip, r1, #20
 8004afa:	f8dc 3000 	ldr.w	r3, [ip]
 8004afe:	3001      	adds	r0, #1
 8004b00:	b299      	uxth	r1, r3
 8004b02:	fb02 6101 	mla	r1, r2, r1, r6
 8004b06:	0c1e      	lsrs	r6, r3, #16
 8004b08:	0c0b      	lsrs	r3, r1, #16
 8004b0a:	fb02 3306 	mla	r3, r2, r6, r3
 8004b0e:	b289      	uxth	r1, r1
 8004b10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b14:	4285      	cmp	r5, r0
 8004b16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8004b1e:	dcec      	bgt.n	8004afa <__multadd+0x12>
 8004b20:	b30e      	cbz	r6, 8004b66 <__multadd+0x7e>
 8004b22:	68a3      	ldr	r3, [r4, #8]
 8004b24:	42ab      	cmp	r3, r5
 8004b26:	dc19      	bgt.n	8004b5c <__multadd+0x74>
 8004b28:	6861      	ldr	r1, [r4, #4]
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	3101      	adds	r1, #1
 8004b2e:	f7ff ff79 	bl	8004a24 <_Balloc>
 8004b32:	4680      	mov	r8, r0
 8004b34:	b928      	cbnz	r0, 8004b42 <__multadd+0x5a>
 8004b36:	4602      	mov	r2, r0
 8004b38:	21ba      	movs	r1, #186	@ 0xba
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b6c <__multadd+0x84>)
 8004b3c:	480c      	ldr	r0, [pc, #48]	@ (8004b70 <__multadd+0x88>)
 8004b3e:	f000 fd75 	bl	800562c <__assert_func>
 8004b42:	6922      	ldr	r2, [r4, #16]
 8004b44:	f104 010c 	add.w	r1, r4, #12
 8004b48:	3202      	adds	r2, #2
 8004b4a:	0092      	lsls	r2, r2, #2
 8004b4c:	300c      	adds	r0, #12
 8004b4e:	f000 fd5f 	bl	8005610 <memcpy>
 8004b52:	4621      	mov	r1, r4
 8004b54:	4638      	mov	r0, r7
 8004b56:	f7ff ffa5 	bl	8004aa4 <_Bfree>
 8004b5a:	4644      	mov	r4, r8
 8004b5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b60:	3501      	adds	r5, #1
 8004b62:	615e      	str	r6, [r3, #20]
 8004b64:	6125      	str	r5, [r4, #16]
 8004b66:	4620      	mov	r0, r4
 8004b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b6c:	08005d03 	.word	0x08005d03
 8004b70:	08005d14 	.word	0x08005d14

08004b74 <__hi0bits>:
 8004b74:	4603      	mov	r3, r0
 8004b76:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004b7a:	bf3a      	itte	cc
 8004b7c:	0403      	lslcc	r3, r0, #16
 8004b7e:	2010      	movcc	r0, #16
 8004b80:	2000      	movcs	r0, #0
 8004b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b86:	bf3c      	itt	cc
 8004b88:	021b      	lslcc	r3, r3, #8
 8004b8a:	3008      	addcc	r0, #8
 8004b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b90:	bf3c      	itt	cc
 8004b92:	011b      	lslcc	r3, r3, #4
 8004b94:	3004      	addcc	r0, #4
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9a:	bf3c      	itt	cc
 8004b9c:	009b      	lslcc	r3, r3, #2
 8004b9e:	3002      	addcc	r0, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	db05      	blt.n	8004bb0 <__hi0bits+0x3c>
 8004ba4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004ba8:	f100 0001 	add.w	r0, r0, #1
 8004bac:	bf08      	it	eq
 8004bae:	2020      	moveq	r0, #32
 8004bb0:	4770      	bx	lr

08004bb2 <__lo0bits>:
 8004bb2:	6803      	ldr	r3, [r0, #0]
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	f013 0007 	ands.w	r0, r3, #7
 8004bba:	d00b      	beq.n	8004bd4 <__lo0bits+0x22>
 8004bbc:	07d9      	lsls	r1, r3, #31
 8004bbe:	d421      	bmi.n	8004c04 <__lo0bits+0x52>
 8004bc0:	0798      	lsls	r0, r3, #30
 8004bc2:	bf49      	itett	mi
 8004bc4:	085b      	lsrmi	r3, r3, #1
 8004bc6:	089b      	lsrpl	r3, r3, #2
 8004bc8:	2001      	movmi	r0, #1
 8004bca:	6013      	strmi	r3, [r2, #0]
 8004bcc:	bf5c      	itt	pl
 8004bce:	2002      	movpl	r0, #2
 8004bd0:	6013      	strpl	r3, [r2, #0]
 8004bd2:	4770      	bx	lr
 8004bd4:	b299      	uxth	r1, r3
 8004bd6:	b909      	cbnz	r1, 8004bdc <__lo0bits+0x2a>
 8004bd8:	2010      	movs	r0, #16
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	b2d9      	uxtb	r1, r3
 8004bde:	b909      	cbnz	r1, 8004be4 <__lo0bits+0x32>
 8004be0:	3008      	adds	r0, #8
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	0719      	lsls	r1, r3, #28
 8004be6:	bf04      	itt	eq
 8004be8:	091b      	lsreq	r3, r3, #4
 8004bea:	3004      	addeq	r0, #4
 8004bec:	0799      	lsls	r1, r3, #30
 8004bee:	bf04      	itt	eq
 8004bf0:	089b      	lsreq	r3, r3, #2
 8004bf2:	3002      	addeq	r0, #2
 8004bf4:	07d9      	lsls	r1, r3, #31
 8004bf6:	d403      	bmi.n	8004c00 <__lo0bits+0x4e>
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	f100 0001 	add.w	r0, r0, #1
 8004bfe:	d003      	beq.n	8004c08 <__lo0bits+0x56>
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	4770      	bx	lr
 8004c04:	2000      	movs	r0, #0
 8004c06:	4770      	bx	lr
 8004c08:	2020      	movs	r0, #32
 8004c0a:	4770      	bx	lr

08004c0c <__i2b>:
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	460c      	mov	r4, r1
 8004c10:	2101      	movs	r1, #1
 8004c12:	f7ff ff07 	bl	8004a24 <_Balloc>
 8004c16:	4602      	mov	r2, r0
 8004c18:	b928      	cbnz	r0, 8004c26 <__i2b+0x1a>
 8004c1a:	f240 1145 	movw	r1, #325	@ 0x145
 8004c1e:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <__i2b+0x24>)
 8004c20:	4804      	ldr	r0, [pc, #16]	@ (8004c34 <__i2b+0x28>)
 8004c22:	f000 fd03 	bl	800562c <__assert_func>
 8004c26:	2301      	movs	r3, #1
 8004c28:	6144      	str	r4, [r0, #20]
 8004c2a:	6103      	str	r3, [r0, #16]
 8004c2c:	bd10      	pop	{r4, pc}
 8004c2e:	bf00      	nop
 8004c30:	08005d03 	.word	0x08005d03
 8004c34:	08005d14 	.word	0x08005d14

08004c38 <__multiply>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	4617      	mov	r7, r2
 8004c3e:	690a      	ldr	r2, [r1, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4689      	mov	r9, r1
 8004c44:	429a      	cmp	r2, r3
 8004c46:	bfa2      	ittt	ge
 8004c48:	463b      	movge	r3, r7
 8004c4a:	460f      	movge	r7, r1
 8004c4c:	4699      	movge	r9, r3
 8004c4e:	693d      	ldr	r5, [r7, #16]
 8004c50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	eb05 060a 	add.w	r6, r5, sl
 8004c5c:	42b3      	cmp	r3, r6
 8004c5e:	b085      	sub	sp, #20
 8004c60:	bfb8      	it	lt
 8004c62:	3101      	addlt	r1, #1
 8004c64:	f7ff fede 	bl	8004a24 <_Balloc>
 8004c68:	b930      	cbnz	r0, 8004c78 <__multiply+0x40>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004c70:	4b40      	ldr	r3, [pc, #256]	@ (8004d74 <__multiply+0x13c>)
 8004c72:	4841      	ldr	r0, [pc, #260]	@ (8004d78 <__multiply+0x140>)
 8004c74:	f000 fcda 	bl	800562c <__assert_func>
 8004c78:	f100 0414 	add.w	r4, r0, #20
 8004c7c:	4623      	mov	r3, r4
 8004c7e:	2200      	movs	r2, #0
 8004c80:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004c84:	4573      	cmp	r3, lr
 8004c86:	d320      	bcc.n	8004cca <__multiply+0x92>
 8004c88:	f107 0814 	add.w	r8, r7, #20
 8004c8c:	f109 0114 	add.w	r1, r9, #20
 8004c90:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004c94:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004c98:	9302      	str	r3, [sp, #8]
 8004c9a:	1beb      	subs	r3, r5, r7
 8004c9c:	3b15      	subs	r3, #21
 8004c9e:	f023 0303 	bic.w	r3, r3, #3
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	3715      	adds	r7, #21
 8004ca6:	42bd      	cmp	r5, r7
 8004ca8:	bf38      	it	cc
 8004caa:	2304      	movcc	r3, #4
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	9b02      	ldr	r3, [sp, #8]
 8004cb0:	9103      	str	r1, [sp, #12]
 8004cb2:	428b      	cmp	r3, r1
 8004cb4:	d80c      	bhi.n	8004cd0 <__multiply+0x98>
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	dd03      	ble.n	8004cc2 <__multiply+0x8a>
 8004cba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d055      	beq.n	8004d6e <__multiply+0x136>
 8004cc2:	6106      	str	r6, [r0, #16]
 8004cc4:	b005      	add	sp, #20
 8004cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cca:	f843 2b04 	str.w	r2, [r3], #4
 8004cce:	e7d9      	b.n	8004c84 <__multiply+0x4c>
 8004cd0:	f8b1 a000 	ldrh.w	sl, [r1]
 8004cd4:	f1ba 0f00 	cmp.w	sl, #0
 8004cd8:	d01f      	beq.n	8004d1a <__multiply+0xe2>
 8004cda:	46c4      	mov	ip, r8
 8004cdc:	46a1      	mov	r9, r4
 8004cde:	2700      	movs	r7, #0
 8004ce0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004ce4:	f8d9 3000 	ldr.w	r3, [r9]
 8004ce8:	fa1f fb82 	uxth.w	fp, r2
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	fb0a 330b 	mla	r3, sl, fp, r3
 8004cf2:	443b      	add	r3, r7
 8004cf4:	f8d9 7000 	ldr.w	r7, [r9]
 8004cf8:	0c12      	lsrs	r2, r2, #16
 8004cfa:	0c3f      	lsrs	r7, r7, #16
 8004cfc:	fb0a 7202 	mla	r2, sl, r2, r7
 8004d00:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d0a:	4565      	cmp	r5, ip
 8004d0c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004d10:	f849 3b04 	str.w	r3, [r9], #4
 8004d14:	d8e4      	bhi.n	8004ce0 <__multiply+0xa8>
 8004d16:	9b01      	ldr	r3, [sp, #4]
 8004d18:	50e7      	str	r7, [r4, r3]
 8004d1a:	9b03      	ldr	r3, [sp, #12]
 8004d1c:	3104      	adds	r1, #4
 8004d1e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d22:	f1b9 0f00 	cmp.w	r9, #0
 8004d26:	d020      	beq.n	8004d6a <__multiply+0x132>
 8004d28:	4647      	mov	r7, r8
 8004d2a:	46a4      	mov	ip, r4
 8004d2c:	f04f 0a00 	mov.w	sl, #0
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	f8b7 b000 	ldrh.w	fp, [r7]
 8004d36:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	fb09 220b 	mla	r2, r9, fp, r2
 8004d40:	4452      	add	r2, sl
 8004d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d46:	f84c 3b04 	str.w	r3, [ip], #4
 8004d4a:	f857 3b04 	ldr.w	r3, [r7], #4
 8004d4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d52:	f8bc 3000 	ldrh.w	r3, [ip]
 8004d56:	42bd      	cmp	r5, r7
 8004d58:	fb09 330a 	mla	r3, r9, sl, r3
 8004d5c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004d60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d64:	d8e5      	bhi.n	8004d32 <__multiply+0xfa>
 8004d66:	9a01      	ldr	r2, [sp, #4]
 8004d68:	50a3      	str	r3, [r4, r2]
 8004d6a:	3404      	adds	r4, #4
 8004d6c:	e79f      	b.n	8004cae <__multiply+0x76>
 8004d6e:	3e01      	subs	r6, #1
 8004d70:	e7a1      	b.n	8004cb6 <__multiply+0x7e>
 8004d72:	bf00      	nop
 8004d74:	08005d03 	.word	0x08005d03
 8004d78:	08005d14 	.word	0x08005d14

08004d7c <__pow5mult>:
 8004d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d80:	4615      	mov	r5, r2
 8004d82:	f012 0203 	ands.w	r2, r2, #3
 8004d86:	4607      	mov	r7, r0
 8004d88:	460e      	mov	r6, r1
 8004d8a:	d007      	beq.n	8004d9c <__pow5mult+0x20>
 8004d8c:	4c25      	ldr	r4, [pc, #148]	@ (8004e24 <__pow5mult+0xa8>)
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	2300      	movs	r3, #0
 8004d92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004d96:	f7ff fea7 	bl	8004ae8 <__multadd>
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	10ad      	asrs	r5, r5, #2
 8004d9e:	d03d      	beq.n	8004e1c <__pow5mult+0xa0>
 8004da0:	69fc      	ldr	r4, [r7, #28]
 8004da2:	b97c      	cbnz	r4, 8004dc4 <__pow5mult+0x48>
 8004da4:	2010      	movs	r0, #16
 8004da6:	f7ff fd87 	bl	80048b8 <malloc>
 8004daa:	4602      	mov	r2, r0
 8004dac:	61f8      	str	r0, [r7, #28]
 8004dae:	b928      	cbnz	r0, 8004dbc <__pow5mult+0x40>
 8004db0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004db4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e28 <__pow5mult+0xac>)
 8004db6:	481d      	ldr	r0, [pc, #116]	@ (8004e2c <__pow5mult+0xb0>)
 8004db8:	f000 fc38 	bl	800562c <__assert_func>
 8004dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004dc0:	6004      	str	r4, [r0, #0]
 8004dc2:	60c4      	str	r4, [r0, #12]
 8004dc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004dcc:	b94c      	cbnz	r4, 8004de2 <__pow5mult+0x66>
 8004dce:	f240 2171 	movw	r1, #625	@ 0x271
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	f7ff ff1a 	bl	8004c0c <__i2b>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4604      	mov	r4, r0
 8004ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8004de0:	6003      	str	r3, [r0, #0]
 8004de2:	f04f 0900 	mov.w	r9, #0
 8004de6:	07eb      	lsls	r3, r5, #31
 8004de8:	d50a      	bpl.n	8004e00 <__pow5mult+0x84>
 8004dea:	4631      	mov	r1, r6
 8004dec:	4622      	mov	r2, r4
 8004dee:	4638      	mov	r0, r7
 8004df0:	f7ff ff22 	bl	8004c38 <__multiply>
 8004df4:	4680      	mov	r8, r0
 8004df6:	4631      	mov	r1, r6
 8004df8:	4638      	mov	r0, r7
 8004dfa:	f7ff fe53 	bl	8004aa4 <_Bfree>
 8004dfe:	4646      	mov	r6, r8
 8004e00:	106d      	asrs	r5, r5, #1
 8004e02:	d00b      	beq.n	8004e1c <__pow5mult+0xa0>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	b938      	cbnz	r0, 8004e18 <__pow5mult+0x9c>
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f7ff ff13 	bl	8004c38 <__multiply>
 8004e12:	6020      	str	r0, [r4, #0]
 8004e14:	f8c0 9000 	str.w	r9, [r0]
 8004e18:	4604      	mov	r4, r0
 8004e1a:	e7e4      	b.n	8004de6 <__pow5mult+0x6a>
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e22:	bf00      	nop
 8004e24:	08005df0 	.word	0x08005df0
 8004e28:	08005c94 	.word	0x08005c94
 8004e2c:	08005d14 	.word	0x08005d14

08004e30 <__lshift>:
 8004e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	460c      	mov	r4, r1
 8004e36:	4607      	mov	r7, r0
 8004e38:	4691      	mov	r9, r2
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	6849      	ldr	r1, [r1, #4]
 8004e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e42:	68a3      	ldr	r3, [r4, #8]
 8004e44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e48:	f108 0601 	add.w	r6, r8, #1
 8004e4c:	42b3      	cmp	r3, r6
 8004e4e:	db0b      	blt.n	8004e68 <__lshift+0x38>
 8004e50:	4638      	mov	r0, r7
 8004e52:	f7ff fde7 	bl	8004a24 <_Balloc>
 8004e56:	4605      	mov	r5, r0
 8004e58:	b948      	cbnz	r0, 8004e6e <__lshift+0x3e>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004e60:	4b27      	ldr	r3, [pc, #156]	@ (8004f00 <__lshift+0xd0>)
 8004e62:	4828      	ldr	r0, [pc, #160]	@ (8004f04 <__lshift+0xd4>)
 8004e64:	f000 fbe2 	bl	800562c <__assert_func>
 8004e68:	3101      	adds	r1, #1
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	e7ee      	b.n	8004e4c <__lshift+0x1c>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f100 0114 	add.w	r1, r0, #20
 8004e74:	f100 0210 	add.w	r2, r0, #16
 8004e78:	4618      	mov	r0, r3
 8004e7a:	4553      	cmp	r3, sl
 8004e7c:	db33      	blt.n	8004ee6 <__lshift+0xb6>
 8004e7e:	6920      	ldr	r0, [r4, #16]
 8004e80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e84:	f104 0314 	add.w	r3, r4, #20
 8004e88:	f019 091f 	ands.w	r9, r9, #31
 8004e8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004e90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004e94:	d02b      	beq.n	8004eee <__lshift+0xbe>
 8004e96:	468a      	mov	sl, r1
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	fa00 f009 	lsl.w	r0, r0, r9
 8004ea4:	4310      	orrs	r0, r2
 8004ea6:	f84a 0b04 	str.w	r0, [sl], #4
 8004eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eae:	459c      	cmp	ip, r3
 8004eb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8004eb4:	d8f3      	bhi.n	8004e9e <__lshift+0x6e>
 8004eb6:	ebac 0304 	sub.w	r3, ip, r4
 8004eba:	3b15      	subs	r3, #21
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	f104 0015 	add.w	r0, r4, #21
 8004ec6:	4560      	cmp	r0, ip
 8004ec8:	bf88      	it	hi
 8004eca:	2304      	movhi	r3, #4
 8004ecc:	50ca      	str	r2, [r1, r3]
 8004ece:	b10a      	cbz	r2, 8004ed4 <__lshift+0xa4>
 8004ed0:	f108 0602 	add.w	r6, r8, #2
 8004ed4:	3e01      	subs	r6, #1
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	4621      	mov	r1, r4
 8004eda:	612e      	str	r6, [r5, #16]
 8004edc:	f7ff fde2 	bl	8004aa4 <_Bfree>
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004eea:	3301      	adds	r3, #1
 8004eec:	e7c5      	b.n	8004e7a <__lshift+0x4a>
 8004eee:	3904      	subs	r1, #4
 8004ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ef4:	459c      	cmp	ip, r3
 8004ef6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004efa:	d8f9      	bhi.n	8004ef0 <__lshift+0xc0>
 8004efc:	e7ea      	b.n	8004ed4 <__lshift+0xa4>
 8004efe:	bf00      	nop
 8004f00:	08005d03 	.word	0x08005d03
 8004f04:	08005d14 	.word	0x08005d14

08004f08 <__mcmp>:
 8004f08:	4603      	mov	r3, r0
 8004f0a:	690a      	ldr	r2, [r1, #16]
 8004f0c:	6900      	ldr	r0, [r0, #16]
 8004f0e:	b530      	push	{r4, r5, lr}
 8004f10:	1a80      	subs	r0, r0, r2
 8004f12:	d10e      	bne.n	8004f32 <__mcmp+0x2a>
 8004f14:	3314      	adds	r3, #20
 8004f16:	3114      	adds	r1, #20
 8004f18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f28:	4295      	cmp	r5, r2
 8004f2a:	d003      	beq.n	8004f34 <__mcmp+0x2c>
 8004f2c:	d205      	bcs.n	8004f3a <__mcmp+0x32>
 8004f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f32:	bd30      	pop	{r4, r5, pc}
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	d3f3      	bcc.n	8004f20 <__mcmp+0x18>
 8004f38:	e7fb      	b.n	8004f32 <__mcmp+0x2a>
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	e7f9      	b.n	8004f32 <__mcmp+0x2a>
	...

08004f40 <__mdiff>:
 8004f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	4689      	mov	r9, r1
 8004f46:	4606      	mov	r6, r0
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4648      	mov	r0, r9
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	f7ff ffdb 	bl	8004f08 <__mcmp>
 8004f52:	1e05      	subs	r5, r0, #0
 8004f54:	d112      	bne.n	8004f7c <__mdiff+0x3c>
 8004f56:	4629      	mov	r1, r5
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f7ff fd63 	bl	8004a24 <_Balloc>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	b928      	cbnz	r0, 8004f6e <__mdiff+0x2e>
 8004f62:	f240 2137 	movw	r1, #567	@ 0x237
 8004f66:	4b3e      	ldr	r3, [pc, #248]	@ (8005060 <__mdiff+0x120>)
 8004f68:	483e      	ldr	r0, [pc, #248]	@ (8005064 <__mdiff+0x124>)
 8004f6a:	f000 fb5f 	bl	800562c <__assert_func>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004f74:	4610      	mov	r0, r2
 8004f76:	b003      	add	sp, #12
 8004f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7c:	bfbc      	itt	lt
 8004f7e:	464b      	movlt	r3, r9
 8004f80:	46a1      	movlt	r9, r4
 8004f82:	4630      	mov	r0, r6
 8004f84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004f88:	bfba      	itte	lt
 8004f8a:	461c      	movlt	r4, r3
 8004f8c:	2501      	movlt	r5, #1
 8004f8e:	2500      	movge	r5, #0
 8004f90:	f7ff fd48 	bl	8004a24 <_Balloc>
 8004f94:	4602      	mov	r2, r0
 8004f96:	b918      	cbnz	r0, 8004fa0 <__mdiff+0x60>
 8004f98:	f240 2145 	movw	r1, #581	@ 0x245
 8004f9c:	4b30      	ldr	r3, [pc, #192]	@ (8005060 <__mdiff+0x120>)
 8004f9e:	e7e3      	b.n	8004f68 <__mdiff+0x28>
 8004fa0:	f100 0b14 	add.w	fp, r0, #20
 8004fa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004fa8:	f109 0310 	add.w	r3, r9, #16
 8004fac:	60c5      	str	r5, [r0, #12]
 8004fae:	f04f 0c00 	mov.w	ip, #0
 8004fb2:	f109 0514 	add.w	r5, r9, #20
 8004fb6:	46d9      	mov	r9, fp
 8004fb8:	6926      	ldr	r6, [r4, #16]
 8004fba:	f104 0e14 	add.w	lr, r4, #20
 8004fbe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004fc2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	9b01      	ldr	r3, [sp, #4]
 8004fca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004fce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004fd2:	b281      	uxth	r1, r0
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	fa1f f38a 	uxth.w	r3, sl
 8004fda:	1a5b      	subs	r3, r3, r1
 8004fdc:	0c00      	lsrs	r0, r0, #16
 8004fde:	4463      	add	r3, ip
 8004fe0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004fe4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004fee:	4576      	cmp	r6, lr
 8004ff0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ff4:	f849 3b04 	str.w	r3, [r9], #4
 8004ff8:	d8e6      	bhi.n	8004fc8 <__mdiff+0x88>
 8004ffa:	1b33      	subs	r3, r6, r4
 8004ffc:	3b15      	subs	r3, #21
 8004ffe:	f023 0303 	bic.w	r3, r3, #3
 8005002:	3415      	adds	r4, #21
 8005004:	3304      	adds	r3, #4
 8005006:	42a6      	cmp	r6, r4
 8005008:	bf38      	it	cc
 800500a:	2304      	movcc	r3, #4
 800500c:	441d      	add	r5, r3
 800500e:	445b      	add	r3, fp
 8005010:	461e      	mov	r6, r3
 8005012:	462c      	mov	r4, r5
 8005014:	4544      	cmp	r4, r8
 8005016:	d30e      	bcc.n	8005036 <__mdiff+0xf6>
 8005018:	f108 0103 	add.w	r1, r8, #3
 800501c:	1b49      	subs	r1, r1, r5
 800501e:	f021 0103 	bic.w	r1, r1, #3
 8005022:	3d03      	subs	r5, #3
 8005024:	45a8      	cmp	r8, r5
 8005026:	bf38      	it	cc
 8005028:	2100      	movcc	r1, #0
 800502a:	440b      	add	r3, r1
 800502c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005030:	b199      	cbz	r1, 800505a <__mdiff+0x11a>
 8005032:	6117      	str	r7, [r2, #16]
 8005034:	e79e      	b.n	8004f74 <__mdiff+0x34>
 8005036:	46e6      	mov	lr, ip
 8005038:	f854 1b04 	ldr.w	r1, [r4], #4
 800503c:	fa1f fc81 	uxth.w	ip, r1
 8005040:	44f4      	add	ip, lr
 8005042:	0c08      	lsrs	r0, r1, #16
 8005044:	4471      	add	r1, lr
 8005046:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800504a:	b289      	uxth	r1, r1
 800504c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005050:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005054:	f846 1b04 	str.w	r1, [r6], #4
 8005058:	e7dc      	b.n	8005014 <__mdiff+0xd4>
 800505a:	3f01      	subs	r7, #1
 800505c:	e7e6      	b.n	800502c <__mdiff+0xec>
 800505e:	bf00      	nop
 8005060:	08005d03 	.word	0x08005d03
 8005064:	08005d14 	.word	0x08005d14

08005068 <__d2b>:
 8005068:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800506c:	2101      	movs	r1, #1
 800506e:	4690      	mov	r8, r2
 8005070:	4699      	mov	r9, r3
 8005072:	9e08      	ldr	r6, [sp, #32]
 8005074:	f7ff fcd6 	bl	8004a24 <_Balloc>
 8005078:	4604      	mov	r4, r0
 800507a:	b930      	cbnz	r0, 800508a <__d2b+0x22>
 800507c:	4602      	mov	r2, r0
 800507e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005082:	4b23      	ldr	r3, [pc, #140]	@ (8005110 <__d2b+0xa8>)
 8005084:	4823      	ldr	r0, [pc, #140]	@ (8005114 <__d2b+0xac>)
 8005086:	f000 fad1 	bl	800562c <__assert_func>
 800508a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800508e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005092:	b10d      	cbz	r5, 8005098 <__d2b+0x30>
 8005094:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	f1b8 0300 	subs.w	r3, r8, #0
 800509e:	d024      	beq.n	80050ea <__d2b+0x82>
 80050a0:	4668      	mov	r0, sp
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	f7ff fd85 	bl	8004bb2 <__lo0bits>
 80050a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80050ac:	b1d8      	cbz	r0, 80050e6 <__d2b+0x7e>
 80050ae:	f1c0 0320 	rsb	r3, r0, #32
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	430b      	orrs	r3, r1
 80050b8:	40c2      	lsrs	r2, r0
 80050ba:	6163      	str	r3, [r4, #20]
 80050bc:	9201      	str	r2, [sp, #4]
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	bf0c      	ite	eq
 80050c4:	2201      	moveq	r2, #1
 80050c6:	2202      	movne	r2, #2
 80050c8:	61a3      	str	r3, [r4, #24]
 80050ca:	6122      	str	r2, [r4, #16]
 80050cc:	b1ad      	cbz	r5, 80050fa <__d2b+0x92>
 80050ce:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80050d2:	4405      	add	r5, r0
 80050d4:	6035      	str	r5, [r6, #0]
 80050d6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80050da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050dc:	6018      	str	r0, [r3, #0]
 80050de:	4620      	mov	r0, r4
 80050e0:	b002      	add	sp, #8
 80050e2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80050e6:	6161      	str	r1, [r4, #20]
 80050e8:	e7e9      	b.n	80050be <__d2b+0x56>
 80050ea:	a801      	add	r0, sp, #4
 80050ec:	f7ff fd61 	bl	8004bb2 <__lo0bits>
 80050f0:	9b01      	ldr	r3, [sp, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	6163      	str	r3, [r4, #20]
 80050f6:	3020      	adds	r0, #32
 80050f8:	e7e7      	b.n	80050ca <__d2b+0x62>
 80050fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80050fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005102:	6030      	str	r0, [r6, #0]
 8005104:	6918      	ldr	r0, [r3, #16]
 8005106:	f7ff fd35 	bl	8004b74 <__hi0bits>
 800510a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800510e:	e7e4      	b.n	80050da <__d2b+0x72>
 8005110:	08005d03 	.word	0x08005d03
 8005114:	08005d14 	.word	0x08005d14

08005118 <__sfputc_r>:
 8005118:	6893      	ldr	r3, [r2, #8]
 800511a:	b410      	push	{r4}
 800511c:	3b01      	subs	r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	6093      	str	r3, [r2, #8]
 8005122:	da07      	bge.n	8005134 <__sfputc_r+0x1c>
 8005124:	6994      	ldr	r4, [r2, #24]
 8005126:	42a3      	cmp	r3, r4
 8005128:	db01      	blt.n	800512e <__sfputc_r+0x16>
 800512a:	290a      	cmp	r1, #10
 800512c:	d102      	bne.n	8005134 <__sfputc_r+0x1c>
 800512e:	bc10      	pop	{r4}
 8005130:	f7fe bbeb 	b.w	800390a <__swbuf_r>
 8005134:	6813      	ldr	r3, [r2, #0]
 8005136:	1c58      	adds	r0, r3, #1
 8005138:	6010      	str	r0, [r2, #0]
 800513a:	7019      	strb	r1, [r3, #0]
 800513c:	4608      	mov	r0, r1
 800513e:	bc10      	pop	{r4}
 8005140:	4770      	bx	lr

08005142 <__sfputs_r>:
 8005142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005144:	4606      	mov	r6, r0
 8005146:	460f      	mov	r7, r1
 8005148:	4614      	mov	r4, r2
 800514a:	18d5      	adds	r5, r2, r3
 800514c:	42ac      	cmp	r4, r5
 800514e:	d101      	bne.n	8005154 <__sfputs_r+0x12>
 8005150:	2000      	movs	r0, #0
 8005152:	e007      	b.n	8005164 <__sfputs_r+0x22>
 8005154:	463a      	mov	r2, r7
 8005156:	4630      	mov	r0, r6
 8005158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515c:	f7ff ffdc 	bl	8005118 <__sfputc_r>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d1f3      	bne.n	800514c <__sfputs_r+0xa>
 8005164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005168 <_vfiprintf_r>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	460d      	mov	r5, r1
 800516e:	4614      	mov	r4, r2
 8005170:	4698      	mov	r8, r3
 8005172:	4606      	mov	r6, r0
 8005174:	b09d      	sub	sp, #116	@ 0x74
 8005176:	b118      	cbz	r0, 8005180 <_vfiprintf_r+0x18>
 8005178:	6a03      	ldr	r3, [r0, #32]
 800517a:	b90b      	cbnz	r3, 8005180 <_vfiprintf_r+0x18>
 800517c:	f7fe fadc 	bl	8003738 <__sinit>
 8005180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005182:	07d9      	lsls	r1, r3, #31
 8005184:	d405      	bmi.n	8005192 <_vfiprintf_r+0x2a>
 8005186:	89ab      	ldrh	r3, [r5, #12]
 8005188:	059a      	lsls	r2, r3, #22
 800518a:	d402      	bmi.n	8005192 <_vfiprintf_r+0x2a>
 800518c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800518e:	f7fe fcde 	bl	8003b4e <__retarget_lock_acquire_recursive>
 8005192:	89ab      	ldrh	r3, [r5, #12]
 8005194:	071b      	lsls	r3, r3, #28
 8005196:	d501      	bpl.n	800519c <_vfiprintf_r+0x34>
 8005198:	692b      	ldr	r3, [r5, #16]
 800519a:	b99b      	cbnz	r3, 80051c4 <_vfiprintf_r+0x5c>
 800519c:	4629      	mov	r1, r5
 800519e:	4630      	mov	r0, r6
 80051a0:	f7fe fbf2 	bl	8003988 <__swsetup_r>
 80051a4:	b170      	cbz	r0, 80051c4 <_vfiprintf_r+0x5c>
 80051a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051a8:	07dc      	lsls	r4, r3, #31
 80051aa:	d504      	bpl.n	80051b6 <_vfiprintf_r+0x4e>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	b01d      	add	sp, #116	@ 0x74
 80051b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b6:	89ab      	ldrh	r3, [r5, #12]
 80051b8:	0598      	lsls	r0, r3, #22
 80051ba:	d4f7      	bmi.n	80051ac <_vfiprintf_r+0x44>
 80051bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051be:	f7fe fcc7 	bl	8003b50 <__retarget_lock_release_recursive>
 80051c2:	e7f3      	b.n	80051ac <_vfiprintf_r+0x44>
 80051c4:	2300      	movs	r3, #0
 80051c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80051c8:	2320      	movs	r3, #32
 80051ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051ce:	2330      	movs	r3, #48	@ 0x30
 80051d0:	f04f 0901 	mov.w	r9, #1
 80051d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80051d8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005384 <_vfiprintf_r+0x21c>
 80051dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051e0:	4623      	mov	r3, r4
 80051e2:	469a      	mov	sl, r3
 80051e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051e8:	b10a      	cbz	r2, 80051ee <_vfiprintf_r+0x86>
 80051ea:	2a25      	cmp	r2, #37	@ 0x25
 80051ec:	d1f9      	bne.n	80051e2 <_vfiprintf_r+0x7a>
 80051ee:	ebba 0b04 	subs.w	fp, sl, r4
 80051f2:	d00b      	beq.n	800520c <_vfiprintf_r+0xa4>
 80051f4:	465b      	mov	r3, fp
 80051f6:	4622      	mov	r2, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	4630      	mov	r0, r6
 80051fc:	f7ff ffa1 	bl	8005142 <__sfputs_r>
 8005200:	3001      	adds	r0, #1
 8005202:	f000 80a7 	beq.w	8005354 <_vfiprintf_r+0x1ec>
 8005206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005208:	445a      	add	r2, fp
 800520a:	9209      	str	r2, [sp, #36]	@ 0x24
 800520c:	f89a 3000 	ldrb.w	r3, [sl]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 809f 	beq.w	8005354 <_vfiprintf_r+0x1ec>
 8005216:	2300      	movs	r3, #0
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005220:	f10a 0a01 	add.w	sl, sl, #1
 8005224:	9304      	str	r3, [sp, #16]
 8005226:	9307      	str	r3, [sp, #28]
 8005228:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800522c:	931a      	str	r3, [sp, #104]	@ 0x68
 800522e:	4654      	mov	r4, sl
 8005230:	2205      	movs	r2, #5
 8005232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005236:	4853      	ldr	r0, [pc, #332]	@ (8005384 <_vfiprintf_r+0x21c>)
 8005238:	f7fe fc8b 	bl	8003b52 <memchr>
 800523c:	9a04      	ldr	r2, [sp, #16]
 800523e:	b9d8      	cbnz	r0, 8005278 <_vfiprintf_r+0x110>
 8005240:	06d1      	lsls	r1, r2, #27
 8005242:	bf44      	itt	mi
 8005244:	2320      	movmi	r3, #32
 8005246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800524a:	0713      	lsls	r3, r2, #28
 800524c:	bf44      	itt	mi
 800524e:	232b      	movmi	r3, #43	@ 0x2b
 8005250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005254:	f89a 3000 	ldrb.w	r3, [sl]
 8005258:	2b2a      	cmp	r3, #42	@ 0x2a
 800525a:	d015      	beq.n	8005288 <_vfiprintf_r+0x120>
 800525c:	4654      	mov	r4, sl
 800525e:	2000      	movs	r0, #0
 8005260:	f04f 0c0a 	mov.w	ip, #10
 8005264:	9a07      	ldr	r2, [sp, #28]
 8005266:	4621      	mov	r1, r4
 8005268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800526c:	3b30      	subs	r3, #48	@ 0x30
 800526e:	2b09      	cmp	r3, #9
 8005270:	d94b      	bls.n	800530a <_vfiprintf_r+0x1a2>
 8005272:	b1b0      	cbz	r0, 80052a2 <_vfiprintf_r+0x13a>
 8005274:	9207      	str	r2, [sp, #28]
 8005276:	e014      	b.n	80052a2 <_vfiprintf_r+0x13a>
 8005278:	eba0 0308 	sub.w	r3, r0, r8
 800527c:	fa09 f303 	lsl.w	r3, r9, r3
 8005280:	4313      	orrs	r3, r2
 8005282:	46a2      	mov	sl, r4
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	e7d2      	b.n	800522e <_vfiprintf_r+0xc6>
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	1d19      	adds	r1, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	9103      	str	r1, [sp, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	bfbb      	ittet	lt
 8005294:	425b      	neglt	r3, r3
 8005296:	f042 0202 	orrlt.w	r2, r2, #2
 800529a:	9307      	strge	r3, [sp, #28]
 800529c:	9307      	strlt	r3, [sp, #28]
 800529e:	bfb8      	it	lt
 80052a0:	9204      	strlt	r2, [sp, #16]
 80052a2:	7823      	ldrb	r3, [r4, #0]
 80052a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80052a6:	d10a      	bne.n	80052be <_vfiprintf_r+0x156>
 80052a8:	7863      	ldrb	r3, [r4, #1]
 80052aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ac:	d132      	bne.n	8005314 <_vfiprintf_r+0x1ac>
 80052ae:	9b03      	ldr	r3, [sp, #12]
 80052b0:	3402      	adds	r4, #2
 80052b2:	1d1a      	adds	r2, r3, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	9203      	str	r2, [sp, #12]
 80052b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052bc:	9305      	str	r3, [sp, #20]
 80052be:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005388 <_vfiprintf_r+0x220>
 80052c2:	2203      	movs	r2, #3
 80052c4:	4650      	mov	r0, sl
 80052c6:	7821      	ldrb	r1, [r4, #0]
 80052c8:	f7fe fc43 	bl	8003b52 <memchr>
 80052cc:	b138      	cbz	r0, 80052de <_vfiprintf_r+0x176>
 80052ce:	2240      	movs	r2, #64	@ 0x40
 80052d0:	9b04      	ldr	r3, [sp, #16]
 80052d2:	eba0 000a 	sub.w	r0, r0, sl
 80052d6:	4082      	lsls	r2, r0
 80052d8:	4313      	orrs	r3, r2
 80052da:	3401      	adds	r4, #1
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e2:	2206      	movs	r2, #6
 80052e4:	4829      	ldr	r0, [pc, #164]	@ (800538c <_vfiprintf_r+0x224>)
 80052e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052ea:	f7fe fc32 	bl	8003b52 <memchr>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d03f      	beq.n	8005372 <_vfiprintf_r+0x20a>
 80052f2:	4b27      	ldr	r3, [pc, #156]	@ (8005390 <_vfiprintf_r+0x228>)
 80052f4:	bb1b      	cbnz	r3, 800533e <_vfiprintf_r+0x1d6>
 80052f6:	9b03      	ldr	r3, [sp, #12]
 80052f8:	3307      	adds	r3, #7
 80052fa:	f023 0307 	bic.w	r3, r3, #7
 80052fe:	3308      	adds	r3, #8
 8005300:	9303      	str	r3, [sp, #12]
 8005302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005304:	443b      	add	r3, r7
 8005306:	9309      	str	r3, [sp, #36]	@ 0x24
 8005308:	e76a      	b.n	80051e0 <_vfiprintf_r+0x78>
 800530a:	460c      	mov	r4, r1
 800530c:	2001      	movs	r0, #1
 800530e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005312:	e7a8      	b.n	8005266 <_vfiprintf_r+0xfe>
 8005314:	2300      	movs	r3, #0
 8005316:	f04f 0c0a 	mov.w	ip, #10
 800531a:	4619      	mov	r1, r3
 800531c:	3401      	adds	r4, #1
 800531e:	9305      	str	r3, [sp, #20]
 8005320:	4620      	mov	r0, r4
 8005322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005326:	3a30      	subs	r2, #48	@ 0x30
 8005328:	2a09      	cmp	r2, #9
 800532a:	d903      	bls.n	8005334 <_vfiprintf_r+0x1cc>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0c6      	beq.n	80052be <_vfiprintf_r+0x156>
 8005330:	9105      	str	r1, [sp, #20]
 8005332:	e7c4      	b.n	80052be <_vfiprintf_r+0x156>
 8005334:	4604      	mov	r4, r0
 8005336:	2301      	movs	r3, #1
 8005338:	fb0c 2101 	mla	r1, ip, r1, r2
 800533c:	e7f0      	b.n	8005320 <_vfiprintf_r+0x1b8>
 800533e:	ab03      	add	r3, sp, #12
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	462a      	mov	r2, r5
 8005344:	4630      	mov	r0, r6
 8005346:	4b13      	ldr	r3, [pc, #76]	@ (8005394 <_vfiprintf_r+0x22c>)
 8005348:	a904      	add	r1, sp, #16
 800534a:	f7fd fdad 	bl	8002ea8 <_printf_float>
 800534e:	4607      	mov	r7, r0
 8005350:	1c78      	adds	r0, r7, #1
 8005352:	d1d6      	bne.n	8005302 <_vfiprintf_r+0x19a>
 8005354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005356:	07d9      	lsls	r1, r3, #31
 8005358:	d405      	bmi.n	8005366 <_vfiprintf_r+0x1fe>
 800535a:	89ab      	ldrh	r3, [r5, #12]
 800535c:	059a      	lsls	r2, r3, #22
 800535e:	d402      	bmi.n	8005366 <_vfiprintf_r+0x1fe>
 8005360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005362:	f7fe fbf5 	bl	8003b50 <__retarget_lock_release_recursive>
 8005366:	89ab      	ldrh	r3, [r5, #12]
 8005368:	065b      	lsls	r3, r3, #25
 800536a:	f53f af1f 	bmi.w	80051ac <_vfiprintf_r+0x44>
 800536e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005370:	e71e      	b.n	80051b0 <_vfiprintf_r+0x48>
 8005372:	ab03      	add	r3, sp, #12
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	462a      	mov	r2, r5
 8005378:	4630      	mov	r0, r6
 800537a:	4b06      	ldr	r3, [pc, #24]	@ (8005394 <_vfiprintf_r+0x22c>)
 800537c:	a904      	add	r1, sp, #16
 800537e:	f7fe f831 	bl	80033e4 <_printf_i>
 8005382:	e7e4      	b.n	800534e <_vfiprintf_r+0x1e6>
 8005384:	08005d6d 	.word	0x08005d6d
 8005388:	08005d73 	.word	0x08005d73
 800538c:	08005d77 	.word	0x08005d77
 8005390:	08002ea9 	.word	0x08002ea9
 8005394:	08005143 	.word	0x08005143

08005398 <__sflush_r>:
 8005398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	0716      	lsls	r6, r2, #28
 80053a0:	4605      	mov	r5, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	d454      	bmi.n	8005450 <__sflush_r+0xb8>
 80053a6:	684b      	ldr	r3, [r1, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dc02      	bgt.n	80053b2 <__sflush_r+0x1a>
 80053ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	dd48      	ble.n	8005444 <__sflush_r+0xac>
 80053b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053b4:	2e00      	cmp	r6, #0
 80053b6:	d045      	beq.n	8005444 <__sflush_r+0xac>
 80053b8:	2300      	movs	r3, #0
 80053ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053be:	682f      	ldr	r7, [r5, #0]
 80053c0:	6a21      	ldr	r1, [r4, #32]
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	d030      	beq.n	8005428 <__sflush_r+0x90>
 80053c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	0759      	lsls	r1, r3, #29
 80053cc:	d505      	bpl.n	80053da <__sflush_r+0x42>
 80053ce:	6863      	ldr	r3, [r4, #4]
 80053d0:	1ad2      	subs	r2, r2, r3
 80053d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053d4:	b10b      	cbz	r3, 80053da <__sflush_r+0x42>
 80053d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053d8:	1ad2      	subs	r2, r2, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	4628      	mov	r0, r5
 80053de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053e0:	6a21      	ldr	r1, [r4, #32]
 80053e2:	47b0      	blx	r6
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	d106      	bne.n	80053f8 <__sflush_r+0x60>
 80053ea:	6829      	ldr	r1, [r5, #0]
 80053ec:	291d      	cmp	r1, #29
 80053ee:	d82b      	bhi.n	8005448 <__sflush_r+0xb0>
 80053f0:	4a28      	ldr	r2, [pc, #160]	@ (8005494 <__sflush_r+0xfc>)
 80053f2:	40ca      	lsrs	r2, r1
 80053f4:	07d6      	lsls	r6, r2, #31
 80053f6:	d527      	bpl.n	8005448 <__sflush_r+0xb0>
 80053f8:	2200      	movs	r2, #0
 80053fa:	6062      	str	r2, [r4, #4]
 80053fc:	6922      	ldr	r2, [r4, #16]
 80053fe:	04d9      	lsls	r1, r3, #19
 8005400:	6022      	str	r2, [r4, #0]
 8005402:	d504      	bpl.n	800540e <__sflush_r+0x76>
 8005404:	1c42      	adds	r2, r0, #1
 8005406:	d101      	bne.n	800540c <__sflush_r+0x74>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	b903      	cbnz	r3, 800540e <__sflush_r+0x76>
 800540c:	6560      	str	r0, [r4, #84]	@ 0x54
 800540e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005410:	602f      	str	r7, [r5, #0]
 8005412:	b1b9      	cbz	r1, 8005444 <__sflush_r+0xac>
 8005414:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005418:	4299      	cmp	r1, r3
 800541a:	d002      	beq.n	8005422 <__sflush_r+0x8a>
 800541c:	4628      	mov	r0, r5
 800541e:	f7ff fa03 	bl	8004828 <_free_r>
 8005422:	2300      	movs	r3, #0
 8005424:	6363      	str	r3, [r4, #52]	@ 0x34
 8005426:	e00d      	b.n	8005444 <__sflush_r+0xac>
 8005428:	2301      	movs	r3, #1
 800542a:	4628      	mov	r0, r5
 800542c:	47b0      	blx	r6
 800542e:	4602      	mov	r2, r0
 8005430:	1c50      	adds	r0, r2, #1
 8005432:	d1c9      	bne.n	80053c8 <__sflush_r+0x30>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0c6      	beq.n	80053c8 <__sflush_r+0x30>
 800543a:	2b1d      	cmp	r3, #29
 800543c:	d001      	beq.n	8005442 <__sflush_r+0xaa>
 800543e:	2b16      	cmp	r3, #22
 8005440:	d11d      	bne.n	800547e <__sflush_r+0xe6>
 8005442:	602f      	str	r7, [r5, #0]
 8005444:	2000      	movs	r0, #0
 8005446:	e021      	b.n	800548c <__sflush_r+0xf4>
 8005448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800544c:	b21b      	sxth	r3, r3
 800544e:	e01a      	b.n	8005486 <__sflush_r+0xee>
 8005450:	690f      	ldr	r7, [r1, #16]
 8005452:	2f00      	cmp	r7, #0
 8005454:	d0f6      	beq.n	8005444 <__sflush_r+0xac>
 8005456:	0793      	lsls	r3, r2, #30
 8005458:	bf18      	it	ne
 800545a:	2300      	movne	r3, #0
 800545c:	680e      	ldr	r6, [r1, #0]
 800545e:	bf08      	it	eq
 8005460:	694b      	ldreq	r3, [r1, #20]
 8005462:	1bf6      	subs	r6, r6, r7
 8005464:	600f      	str	r7, [r1, #0]
 8005466:	608b      	str	r3, [r1, #8]
 8005468:	2e00      	cmp	r6, #0
 800546a:	ddeb      	ble.n	8005444 <__sflush_r+0xac>
 800546c:	4633      	mov	r3, r6
 800546e:	463a      	mov	r2, r7
 8005470:	4628      	mov	r0, r5
 8005472:	6a21      	ldr	r1, [r4, #32]
 8005474:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005478:	47e0      	blx	ip
 800547a:	2800      	cmp	r0, #0
 800547c:	dc07      	bgt.n	800548e <__sflush_r+0xf6>
 800547e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005486:	f04f 30ff 	mov.w	r0, #4294967295
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800548e:	4407      	add	r7, r0
 8005490:	1a36      	subs	r6, r6, r0
 8005492:	e7e9      	b.n	8005468 <__sflush_r+0xd0>
 8005494:	20400001 	.word	0x20400001

08005498 <_fflush_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	690b      	ldr	r3, [r1, #16]
 800549c:	4605      	mov	r5, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	b913      	cbnz	r3, 80054a8 <_fflush_r+0x10>
 80054a2:	2500      	movs	r5, #0
 80054a4:	4628      	mov	r0, r5
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	b118      	cbz	r0, 80054b2 <_fflush_r+0x1a>
 80054aa:	6a03      	ldr	r3, [r0, #32]
 80054ac:	b90b      	cbnz	r3, 80054b2 <_fflush_r+0x1a>
 80054ae:	f7fe f943 	bl	8003738 <__sinit>
 80054b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f3      	beq.n	80054a2 <_fflush_r+0xa>
 80054ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054bc:	07d0      	lsls	r0, r2, #31
 80054be:	d404      	bmi.n	80054ca <_fflush_r+0x32>
 80054c0:	0599      	lsls	r1, r3, #22
 80054c2:	d402      	bmi.n	80054ca <_fflush_r+0x32>
 80054c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054c6:	f7fe fb42 	bl	8003b4e <__retarget_lock_acquire_recursive>
 80054ca:	4628      	mov	r0, r5
 80054cc:	4621      	mov	r1, r4
 80054ce:	f7ff ff63 	bl	8005398 <__sflush_r>
 80054d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054d4:	4605      	mov	r5, r0
 80054d6:	07da      	lsls	r2, r3, #31
 80054d8:	d4e4      	bmi.n	80054a4 <_fflush_r+0xc>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	059b      	lsls	r3, r3, #22
 80054de:	d4e1      	bmi.n	80054a4 <_fflush_r+0xc>
 80054e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054e2:	f7fe fb35 	bl	8003b50 <__retarget_lock_release_recursive>
 80054e6:	e7dd      	b.n	80054a4 <_fflush_r+0xc>

080054e8 <__swhatbuf_r>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	460c      	mov	r4, r1
 80054ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f0:	4615      	mov	r5, r2
 80054f2:	2900      	cmp	r1, #0
 80054f4:	461e      	mov	r6, r3
 80054f6:	b096      	sub	sp, #88	@ 0x58
 80054f8:	da0c      	bge.n	8005514 <__swhatbuf_r+0x2c>
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	2100      	movs	r1, #0
 80054fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005502:	bf14      	ite	ne
 8005504:	2340      	movne	r3, #64	@ 0x40
 8005506:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800550a:	2000      	movs	r0, #0
 800550c:	6031      	str	r1, [r6, #0]
 800550e:	602b      	str	r3, [r5, #0]
 8005510:	b016      	add	sp, #88	@ 0x58
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	466a      	mov	r2, sp
 8005516:	f000 f849 	bl	80055ac <_fstat_r>
 800551a:	2800      	cmp	r0, #0
 800551c:	dbed      	blt.n	80054fa <__swhatbuf_r+0x12>
 800551e:	9901      	ldr	r1, [sp, #4]
 8005520:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005524:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005528:	4259      	negs	r1, r3
 800552a:	4159      	adcs	r1, r3
 800552c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005530:	e7eb      	b.n	800550a <__swhatbuf_r+0x22>

08005532 <__smakebuf_r>:
 8005532:	898b      	ldrh	r3, [r1, #12]
 8005534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005536:	079d      	lsls	r5, r3, #30
 8005538:	4606      	mov	r6, r0
 800553a:	460c      	mov	r4, r1
 800553c:	d507      	bpl.n	800554e <__smakebuf_r+0x1c>
 800553e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	6123      	str	r3, [r4, #16]
 8005546:	2301      	movs	r3, #1
 8005548:	6163      	str	r3, [r4, #20]
 800554a:	b003      	add	sp, #12
 800554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554e:	466a      	mov	r2, sp
 8005550:	ab01      	add	r3, sp, #4
 8005552:	f7ff ffc9 	bl	80054e8 <__swhatbuf_r>
 8005556:	9f00      	ldr	r7, [sp, #0]
 8005558:	4605      	mov	r5, r0
 800555a:	4639      	mov	r1, r7
 800555c:	4630      	mov	r0, r6
 800555e:	f7ff f9d5 	bl	800490c <_malloc_r>
 8005562:	b948      	cbnz	r0, 8005578 <__smakebuf_r+0x46>
 8005564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005568:	059a      	lsls	r2, r3, #22
 800556a:	d4ee      	bmi.n	800554a <__smakebuf_r+0x18>
 800556c:	f023 0303 	bic.w	r3, r3, #3
 8005570:	f043 0302 	orr.w	r3, r3, #2
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	e7e2      	b.n	800553e <__smakebuf_r+0xc>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800557e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005582:	81a3      	strh	r3, [r4, #12]
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	6020      	str	r0, [r4, #0]
 8005588:	b15b      	cbz	r3, 80055a2 <__smakebuf_r+0x70>
 800558a:	4630      	mov	r0, r6
 800558c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005590:	f000 f81e 	bl	80055d0 <_isatty_r>
 8005594:	b128      	cbz	r0, 80055a2 <__smakebuf_r+0x70>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	f023 0303 	bic.w	r3, r3, #3
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	431d      	orrs	r5, r3
 80055a6:	81a5      	strh	r5, [r4, #12]
 80055a8:	e7cf      	b.n	800554a <__smakebuf_r+0x18>
	...

080055ac <_fstat_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	2300      	movs	r3, #0
 80055b0:	4d06      	ldr	r5, [pc, #24]	@ (80055cc <_fstat_r+0x20>)
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	f7fb ffe4 	bl	8001586 <_fstat>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	d102      	bne.n	80055c8 <_fstat_r+0x1c>
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	b103      	cbz	r3, 80055c8 <_fstat_r+0x1c>
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	bd38      	pop	{r3, r4, r5, pc}
 80055ca:	bf00      	nop
 80055cc:	200004fc 	.word	0x200004fc

080055d0 <_isatty_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	2300      	movs	r3, #0
 80055d4:	4d05      	ldr	r5, [pc, #20]	@ (80055ec <_isatty_r+0x1c>)
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	f7fb ffd8 	bl	8001590 <_isatty>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_isatty_r+0x1a>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_isatty_r+0x1a>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	200004fc 	.word	0x200004fc

080055f0 <_sbrk_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	2300      	movs	r3, #0
 80055f4:	4d05      	ldr	r5, [pc, #20]	@ (800560c <_sbrk_r+0x1c>)
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	602b      	str	r3, [r5, #0]
 80055fc:	f7fb ffcc 	bl	8001598 <_sbrk>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_sbrk_r+0x1a>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_sbrk_r+0x1a>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	200004fc 	.word	0x200004fc

08005610 <memcpy>:
 8005610:	440a      	add	r2, r1
 8005612:	4291      	cmp	r1, r2
 8005614:	f100 33ff 	add.w	r3, r0, #4294967295
 8005618:	d100      	bne.n	800561c <memcpy+0xc>
 800561a:	4770      	bx	lr
 800561c:	b510      	push	{r4, lr}
 800561e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005622:	4291      	cmp	r1, r2
 8005624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005628:	d1f9      	bne.n	800561e <memcpy+0xe>
 800562a:	bd10      	pop	{r4, pc}

0800562c <__assert_func>:
 800562c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800562e:	4614      	mov	r4, r2
 8005630:	461a      	mov	r2, r3
 8005632:	4b09      	ldr	r3, [pc, #36]	@ (8005658 <__assert_func+0x2c>)
 8005634:	4605      	mov	r5, r0
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68d8      	ldr	r0, [r3, #12]
 800563a:	b14c      	cbz	r4, 8005650 <__assert_func+0x24>
 800563c:	4b07      	ldr	r3, [pc, #28]	@ (800565c <__assert_func+0x30>)
 800563e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005642:	9100      	str	r1, [sp, #0]
 8005644:	462b      	mov	r3, r5
 8005646:	4906      	ldr	r1, [pc, #24]	@ (8005660 <__assert_func+0x34>)
 8005648:	f000 f842 	bl	80056d0 <fiprintf>
 800564c:	f000 f852 	bl	80056f4 <abort>
 8005650:	4b04      	ldr	r3, [pc, #16]	@ (8005664 <__assert_func+0x38>)
 8005652:	461c      	mov	r4, r3
 8005654:	e7f3      	b.n	800563e <__assert_func+0x12>
 8005656:	bf00      	nop
 8005658:	20000018 	.word	0x20000018
 800565c:	08005d88 	.word	0x08005d88
 8005660:	08005d95 	.word	0x08005d95
 8005664:	08005b8a 	.word	0x08005b8a

08005668 <_calloc_r>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	fba1 5402 	umull	r5, r4, r1, r2
 800566e:	b934      	cbnz	r4, 800567e <_calloc_r+0x16>
 8005670:	4629      	mov	r1, r5
 8005672:	f7ff f94b 	bl	800490c <_malloc_r>
 8005676:	4606      	mov	r6, r0
 8005678:	b928      	cbnz	r0, 8005686 <_calloc_r+0x1e>
 800567a:	4630      	mov	r0, r6
 800567c:	bd70      	pop	{r4, r5, r6, pc}
 800567e:	220c      	movs	r2, #12
 8005680:	2600      	movs	r6, #0
 8005682:	6002      	str	r2, [r0, #0]
 8005684:	e7f9      	b.n	800567a <_calloc_r+0x12>
 8005686:	462a      	mov	r2, r5
 8005688:	4621      	mov	r1, r4
 800568a:	f7fe f9d3 	bl	8003a34 <memset>
 800568e:	e7f4      	b.n	800567a <_calloc_r+0x12>

08005690 <__ascii_mbtowc>:
 8005690:	b082      	sub	sp, #8
 8005692:	b901      	cbnz	r1, 8005696 <__ascii_mbtowc+0x6>
 8005694:	a901      	add	r1, sp, #4
 8005696:	b142      	cbz	r2, 80056aa <__ascii_mbtowc+0x1a>
 8005698:	b14b      	cbz	r3, 80056ae <__ascii_mbtowc+0x1e>
 800569a:	7813      	ldrb	r3, [r2, #0]
 800569c:	600b      	str	r3, [r1, #0]
 800569e:	7812      	ldrb	r2, [r2, #0]
 80056a0:	1e10      	subs	r0, r2, #0
 80056a2:	bf18      	it	ne
 80056a4:	2001      	movne	r0, #1
 80056a6:	b002      	add	sp, #8
 80056a8:	4770      	bx	lr
 80056aa:	4610      	mov	r0, r2
 80056ac:	e7fb      	b.n	80056a6 <__ascii_mbtowc+0x16>
 80056ae:	f06f 0001 	mvn.w	r0, #1
 80056b2:	e7f8      	b.n	80056a6 <__ascii_mbtowc+0x16>

080056b4 <__ascii_wctomb>:
 80056b4:	4603      	mov	r3, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	b141      	cbz	r1, 80056cc <__ascii_wctomb+0x18>
 80056ba:	2aff      	cmp	r2, #255	@ 0xff
 80056bc:	d904      	bls.n	80056c8 <__ascii_wctomb+0x14>
 80056be:	228a      	movs	r2, #138	@ 0x8a
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	4770      	bx	lr
 80056c8:	2001      	movs	r0, #1
 80056ca:	700a      	strb	r2, [r1, #0]
 80056cc:	4770      	bx	lr
	...

080056d0 <fiprintf>:
 80056d0:	b40e      	push	{r1, r2, r3}
 80056d2:	b503      	push	{r0, r1, lr}
 80056d4:	4601      	mov	r1, r0
 80056d6:	ab03      	add	r3, sp, #12
 80056d8:	4805      	ldr	r0, [pc, #20]	@ (80056f0 <fiprintf+0x20>)
 80056da:	f853 2b04 	ldr.w	r2, [r3], #4
 80056de:	6800      	ldr	r0, [r0, #0]
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	f7ff fd41 	bl	8005168 <_vfiprintf_r>
 80056e6:	b002      	add	sp, #8
 80056e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056ec:	b003      	add	sp, #12
 80056ee:	4770      	bx	lr
 80056f0:	20000018 	.word	0x20000018

080056f4 <abort>:
 80056f4:	2006      	movs	r0, #6
 80056f6:	b508      	push	{r3, lr}
 80056f8:	f000 f82c 	bl	8005754 <raise>
 80056fc:	2001      	movs	r0, #1
 80056fe:	f7fb ff2b 	bl	8001558 <_exit>

08005702 <_raise_r>:
 8005702:	291f      	cmp	r1, #31
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	460c      	mov	r4, r1
 800570a:	d904      	bls.n	8005716 <_raise_r+0x14>
 800570c:	2316      	movs	r3, #22
 800570e:	6003      	str	r3, [r0, #0]
 8005710:	f04f 30ff 	mov.w	r0, #4294967295
 8005714:	bd38      	pop	{r3, r4, r5, pc}
 8005716:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005718:	b112      	cbz	r2, 8005720 <_raise_r+0x1e>
 800571a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800571e:	b94b      	cbnz	r3, 8005734 <_raise_r+0x32>
 8005720:	4628      	mov	r0, r5
 8005722:	f000 f831 	bl	8005788 <_getpid_r>
 8005726:	4622      	mov	r2, r4
 8005728:	4601      	mov	r1, r0
 800572a:	4628      	mov	r0, r5
 800572c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005730:	f000 b818 	b.w	8005764 <_kill_r>
 8005734:	2b01      	cmp	r3, #1
 8005736:	d00a      	beq.n	800574e <_raise_r+0x4c>
 8005738:	1c59      	adds	r1, r3, #1
 800573a:	d103      	bne.n	8005744 <_raise_r+0x42>
 800573c:	2316      	movs	r3, #22
 800573e:	6003      	str	r3, [r0, #0]
 8005740:	2001      	movs	r0, #1
 8005742:	e7e7      	b.n	8005714 <_raise_r+0x12>
 8005744:	2100      	movs	r1, #0
 8005746:	4620      	mov	r0, r4
 8005748:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800574c:	4798      	blx	r3
 800574e:	2000      	movs	r0, #0
 8005750:	e7e0      	b.n	8005714 <_raise_r+0x12>
	...

08005754 <raise>:
 8005754:	4b02      	ldr	r3, [pc, #8]	@ (8005760 <raise+0xc>)
 8005756:	4601      	mov	r1, r0
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	f7ff bfd2 	b.w	8005702 <_raise_r>
 800575e:	bf00      	nop
 8005760:	20000018 	.word	0x20000018

08005764 <_kill_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	2300      	movs	r3, #0
 8005768:	4d06      	ldr	r5, [pc, #24]	@ (8005784 <_kill_r+0x20>)
 800576a:	4604      	mov	r4, r0
 800576c:	4608      	mov	r0, r1
 800576e:	4611      	mov	r1, r2
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	f7fb fee9 	bl	8001548 <_kill>
 8005776:	1c43      	adds	r3, r0, #1
 8005778:	d102      	bne.n	8005780 <_kill_r+0x1c>
 800577a:	682b      	ldr	r3, [r5, #0]
 800577c:	b103      	cbz	r3, 8005780 <_kill_r+0x1c>
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	bd38      	pop	{r3, r4, r5, pc}
 8005782:	bf00      	nop
 8005784:	200004fc 	.word	0x200004fc

08005788 <_getpid_r>:
 8005788:	f7fb bedc 	b.w	8001544 <_getpid>

0800578c <sqrtf>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4605      	mov	r5, r0
 8005790:	f000 f816 	bl	80057c0 <__ieee754_sqrtf>
 8005794:	4629      	mov	r1, r5
 8005796:	4604      	mov	r4, r0
 8005798:	4628      	mov	r0, r5
 800579a:	f7fb fc49 	bl	8001030 <__aeabi_fcmpun>
 800579e:	b968      	cbnz	r0, 80057bc <sqrtf+0x30>
 80057a0:	2100      	movs	r1, #0
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7fb fc1c 	bl	8000fe0 <__aeabi_fcmplt>
 80057a8:	b140      	cbz	r0, 80057bc <sqrtf+0x30>
 80057aa:	f7fe f9a5 	bl	8003af8 <__errno>
 80057ae:	2321      	movs	r3, #33	@ 0x21
 80057b0:	2100      	movs	r1, #0
 80057b2:	6003      	str	r3, [r0, #0]
 80057b4:	4608      	mov	r0, r1
 80057b6:	f7fb fb29 	bl	8000e0c <__aeabi_fdiv>
 80057ba:	4604      	mov	r4, r0
 80057bc:	4620      	mov	r0, r4
 80057be:	bd38      	pop	{r3, r4, r5, pc}

080057c0 <__ieee754_sqrtf>:
 80057c0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80057c4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80057c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057cc:	4603      	mov	r3, r0
 80057ce:	4604      	mov	r4, r0
 80057d0:	d30a      	bcc.n	80057e8 <__ieee754_sqrtf+0x28>
 80057d2:	4601      	mov	r1, r0
 80057d4:	f7fb fa66 	bl	8000ca4 <__aeabi_fmul>
 80057d8:	4601      	mov	r1, r0
 80057da:	4620      	mov	r0, r4
 80057dc:	f7fb f95a 	bl	8000a94 <__addsf3>
 80057e0:	4604      	mov	r4, r0
 80057e2:	4620      	mov	r0, r4
 80057e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	d0fa      	beq.n	80057e2 <__ieee754_sqrtf+0x22>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	da06      	bge.n	80057fe <__ieee754_sqrtf+0x3e>
 80057f0:	4601      	mov	r1, r0
 80057f2:	f7fb f94d 	bl	8000a90 <__aeabi_fsub>
 80057f6:	4601      	mov	r1, r0
 80057f8:	f7fb fb08 	bl	8000e0c <__aeabi_fdiv>
 80057fc:	e7f0      	b.n	80057e0 <__ieee754_sqrtf+0x20>
 80057fe:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8005802:	d03c      	beq.n	800587e <__ieee754_sqrtf+0xbe>
 8005804:	15c2      	asrs	r2, r0, #23
 8005806:	2400      	movs	r4, #0
 8005808:	2019      	movs	r0, #25
 800580a:	4626      	mov	r6, r4
 800580c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8005810:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005814:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8005818:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800581c:	07d2      	lsls	r2, r2, #31
 800581e:	bf58      	it	pl
 8005820:	005b      	lslpl	r3, r3, #1
 8005822:	106d      	asrs	r5, r5, #1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	1872      	adds	r2, r6, r1
 8005828:	429a      	cmp	r2, r3
 800582a:	bfcf      	iteee	gt
 800582c:	461a      	movgt	r2, r3
 800582e:	1856      	addle	r6, r2, r1
 8005830:	1864      	addle	r4, r4, r1
 8005832:	1a9a      	suble	r2, r3, r2
 8005834:	3801      	subs	r0, #1
 8005836:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800583a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800583e:	d1f2      	bne.n	8005826 <__ieee754_sqrtf+0x66>
 8005840:	b1ba      	cbz	r2, 8005872 <__ieee754_sqrtf+0xb2>
 8005842:	4e15      	ldr	r6, [pc, #84]	@ (8005898 <__ieee754_sqrtf+0xd8>)
 8005844:	4f15      	ldr	r7, [pc, #84]	@ (800589c <__ieee754_sqrtf+0xdc>)
 8005846:	6830      	ldr	r0, [r6, #0]
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	f7fb f921 	bl	8000a90 <__aeabi_fsub>
 800584e:	f8d6 8000 	ldr.w	r8, [r6]
 8005852:	4601      	mov	r1, r0
 8005854:	4640      	mov	r0, r8
 8005856:	f7fb fbcd 	bl	8000ff4 <__aeabi_fcmple>
 800585a:	b150      	cbz	r0, 8005872 <__ieee754_sqrtf+0xb2>
 800585c:	6830      	ldr	r0, [r6, #0]
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	f7fb f918 	bl	8000a94 <__addsf3>
 8005864:	6836      	ldr	r6, [r6, #0]
 8005866:	4601      	mov	r1, r0
 8005868:	4630      	mov	r0, r6
 800586a:	f7fb fbb9 	bl	8000fe0 <__aeabi_fcmplt>
 800586e:	b170      	cbz	r0, 800588e <__ieee754_sqrtf+0xce>
 8005870:	3402      	adds	r4, #2
 8005872:	1064      	asrs	r4, r4, #1
 8005874:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8005878:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800587c:	e7b1      	b.n	80057e2 <__ieee754_sqrtf+0x22>
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	0218      	lsls	r0, r3, #8
 8005882:	460a      	mov	r2, r1
 8005884:	f101 0101 	add.w	r1, r1, #1
 8005888:	d5f9      	bpl.n	800587e <__ieee754_sqrtf+0xbe>
 800588a:	4252      	negs	r2, r2
 800588c:	e7bb      	b.n	8005806 <__ieee754_sqrtf+0x46>
 800588e:	3401      	adds	r4, #1
 8005890:	f024 0401 	bic.w	r4, r4, #1
 8005894:	e7ed      	b.n	8005872 <__ieee754_sqrtf+0xb2>
 8005896:	bf00      	nop
 8005898:	08005ff8 	.word	0x08005ff8
 800589c:	08005ff4 	.word	0x08005ff4

080058a0 <_init>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr

080058ac <_fini>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr
